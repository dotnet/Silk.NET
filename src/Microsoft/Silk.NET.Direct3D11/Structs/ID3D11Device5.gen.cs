// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.


using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Text;
using Silk.NET.Core;
using Silk.NET.Core.Native;
using Silk.NET.Core.Attributes;
using Silk.NET.Core.Contexts;
using Silk.NET.Core.Loader;

#pragma warning disable 1591

namespace Silk.NET.Direct3D11
{
    [Guid("8ffde202-a0e7-45df-9e01-e837801b5ea0")]
    [NativeName("Name", "ID3D11Device5")]
    public unsafe partial struct ID3D11Device5 : IComVtbl<ID3D11Device5>, IComVtbl<ID3D11Device4>, IComVtbl<ID3D11Device3>, IComVtbl<ID3D11Device2>, IComVtbl<ID3D11Device1>, IComVtbl<ID3D11Device>, IComVtbl<Silk.NET.Core.Native.IUnknown>
    {
        public static readonly Guid Guid = new("8ffde202-a0e7-45df-9e01-e837801b5ea0");

        void*** IComVtbl.AsVtblPtr()
            => (void***) Unsafe.AsPointer(ref Unsafe.AsRef(in this));

        public static implicit operator ID3D11Device4(ID3D11Device5 val)
            => Unsafe.As<ID3D11Device5, ID3D11Device4>(ref val);

        public static implicit operator ID3D11Device3(ID3D11Device5 val)
            => Unsafe.As<ID3D11Device5, ID3D11Device3>(ref val);

        public static implicit operator ID3D11Device2(ID3D11Device5 val)
            => Unsafe.As<ID3D11Device5, ID3D11Device2>(ref val);

        public static implicit operator ID3D11Device1(ID3D11Device5 val)
            => Unsafe.As<ID3D11Device5, ID3D11Device1>(ref val);

        public static implicit operator ID3D11Device(ID3D11Device5 val)
            => Unsafe.As<ID3D11Device5, ID3D11Device>(ref val);

        public static implicit operator Silk.NET.Core.Native.IUnknown(ID3D11Device5 val)
            => Unsafe.As<ID3D11Device5, Silk.NET.Core.Native.IUnknown>(ref val);

        public ID3D11Device5
        (
            void** lpVtbl = null
        ) : this()
        {
            if (lpVtbl is not null)
            {
                LpVtbl = lpVtbl;
            }
        }


        [NativeName("Type", "")]
        [NativeName("Type.Name", "")]
        [NativeName("Name", "lpVtbl")]
        public void** LpVtbl;
        /// <summary>To be documented.</summary>
        public readonly unsafe int QueryInterface(Guid* riid, void** ppvObject)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, void**, int>)@this->LpVtbl[0])(@this, riid, ppvObject);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int QueryInterface(Guid* riid, ref void* ppvObject)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void** ppvObjectPtr = &ppvObject)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, void**, int>)@this->LpVtbl[0])(@this, riid, ppvObjectPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int QueryInterface(ref Guid riid, void** ppvObject)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* riidPtr = &riid)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, void**, int>)@this->LpVtbl[0])(@this, riidPtr, ppvObject);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int QueryInterface(ref Guid riid, ref void* ppvObject)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* riidPtr = &riid)
            {
                fixed (void** ppvObjectPtr = &ppvObject)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, void**, int>)@this->LpVtbl[0])(@this, riidPtr, ppvObjectPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly uint AddRef()
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            uint ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint>)@this->LpVtbl[1])(@this);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly uint Release()
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            uint ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint>)@this->LpVtbl[2])(@this);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] BufferDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Buffer** ppBuffer)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDesc, pInitialData, ppBuffer);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] BufferDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Buffer* ppBuffer)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Buffer** ppBufferPtr = &ppBuffer)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDesc, pInitialData, ppBufferPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] BufferDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Buffer** ppBuffer)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDesc, pInitialDataPtr, ppBuffer);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] BufferDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Buffer* ppBuffer)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                fixed (ID3D11Buffer** ppBufferPtr = &ppBuffer)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDesc, pInitialDataPtr, ppBufferPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BufferDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Buffer** ppBuffer)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (BufferDesc* pDescPtr = &pDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDescPtr, pInitialData, ppBuffer);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BufferDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Buffer* ppBuffer)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (BufferDesc* pDescPtr = &pDesc)
            {
                fixed (ID3D11Buffer** ppBufferPtr = &ppBuffer)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDescPtr, pInitialData, ppBufferPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BufferDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Buffer** ppBuffer)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (BufferDesc* pDescPtr = &pDesc)
            {
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDescPtr, pInitialDataPtr, ppBuffer);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BufferDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Buffer* ppBuffer)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (BufferDesc* pDescPtr = &pDesc)
            {
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    fixed (ID3D11Buffer** ppBufferPtr = &ppBuffer)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDescPtr, pInitialDataPtr, ppBufferPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture1D([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture1DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture1D** ppTexture1D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDesc, pInitialData, ppTexture1D);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture1D([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture1DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture1D* ppTexture1D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Texture1D** ppTexture1DPtr = &ppTexture1D)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDesc, pInitialData, ppTexture1DPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture1D([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture1DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Texture1D** ppTexture1D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDesc, pInitialDataPtr, ppTexture1D);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture1D([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture1DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Texture1D* ppTexture1D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                fixed (ID3D11Texture1D** ppTexture1DPtr = &ppTexture1D)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDesc, pInitialDataPtr, ppTexture1DPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture1D([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture1DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture1D** ppTexture1D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture1DDesc* pDescPtr = &pDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDescPtr, pInitialData, ppTexture1D);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture1D([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture1DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture1D* ppTexture1D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture1DDesc* pDescPtr = &pDesc)
            {
                fixed (ID3D11Texture1D** ppTexture1DPtr = &ppTexture1D)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDescPtr, pInitialData, ppTexture1DPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture1D([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture1DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Texture1D** ppTexture1D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture1DDesc* pDescPtr = &pDesc)
            {
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDescPtr, pInitialDataPtr, ppTexture1D);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture1D([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture1DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Texture1D* ppTexture1D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture1DDesc* pDescPtr = &pDesc)
            {
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    fixed (ID3D11Texture1D** ppTexture1DPtr = &ppTexture1D)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDescPtr, pInitialDataPtr, ppTexture1DPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture2D** ppTexture2D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDesc, pInitialData, ppTexture2D);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture2D* ppTexture2D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Texture2D** ppTexture2DPtr = &ppTexture2D)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDesc, pInitialData, ppTexture2DPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Texture2D** ppTexture2D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDesc, pInitialDataPtr, ppTexture2D);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Texture2D* ppTexture2D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                fixed (ID3D11Texture2D** ppTexture2DPtr = &ppTexture2D)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDesc, pInitialDataPtr, ppTexture2DPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture2D** ppTexture2D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture2DDesc* pDescPtr = &pDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDescPtr, pInitialData, ppTexture2D);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture2D* ppTexture2D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture2DDesc* pDescPtr = &pDesc)
            {
                fixed (ID3D11Texture2D** ppTexture2DPtr = &ppTexture2D)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDescPtr, pInitialData, ppTexture2DPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Texture2D** ppTexture2D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture2DDesc* pDescPtr = &pDesc)
            {
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDescPtr, pInitialDataPtr, ppTexture2D);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Texture2D* ppTexture2D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture2DDesc* pDescPtr = &pDesc)
            {
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    fixed (ID3D11Texture2D** ppTexture2DPtr = &ppTexture2D)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDescPtr, pInitialDataPtr, ppTexture2DPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture3D** ppTexture3D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDesc, pInitialData, ppTexture3D);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture3D* ppTexture3D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Texture3D** ppTexture3DPtr = &ppTexture3D)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDesc, pInitialData, ppTexture3DPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Texture3D** ppTexture3D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDesc, pInitialDataPtr, ppTexture3D);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Texture3D* ppTexture3D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                fixed (ID3D11Texture3D** ppTexture3DPtr = &ppTexture3D)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDesc, pInitialDataPtr, ppTexture3DPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture3D** ppTexture3D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture3DDesc* pDescPtr = &pDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDescPtr, pInitialData, ppTexture3D);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture3D* ppTexture3D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture3DDesc* pDescPtr = &pDesc)
            {
                fixed (ID3D11Texture3D** ppTexture3DPtr = &ppTexture3D)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDescPtr, pInitialData, ppTexture3DPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Texture3D** ppTexture3D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture3DDesc* pDescPtr = &pDesc)
            {
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDescPtr, pInitialDataPtr, ppTexture3D);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Texture3D* ppTexture3D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture3DDesc* pDescPtr = &pDesc)
            {
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    fixed (ID3D11Texture3D** ppTexture3DPtr = &ppTexture3D)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDescPtr, pInitialDataPtr, ppTexture3DPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc* pDesc, ID3D11ShaderResourceView** ppSRView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResource, pDesc, ppSRView);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc* pDesc, ref ID3D11ShaderResourceView* ppSRView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ShaderResourceView** ppSRViewPtr = &ppSRView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResource, pDesc, ppSRViewPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc pDesc, ID3D11ShaderResourceView** ppSRView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ShaderResourceViewDesc* pDescPtr = &pDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResource, pDescPtr, ppSRView);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc pDesc, ref ID3D11ShaderResourceView* ppSRView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ShaderResourceViewDesc* pDescPtr = &pDesc)
            {
                fixed (ID3D11ShaderResourceView** ppSRViewPtr = &ppSRView)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResource, pDescPtr, ppSRViewPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc* pDesc, ID3D11ShaderResourceView** ppSRView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResourcePtr, pDesc, ppSRView);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc* pDesc, ref ID3D11ShaderResourceView* ppSRView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (ID3D11ShaderResourceView** ppSRViewPtr = &ppSRView)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResourcePtr, pDesc, ppSRViewPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc pDesc, ID3D11ShaderResourceView** ppSRView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (ShaderResourceViewDesc* pDescPtr = &pDesc)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResourcePtr, pDescPtr, ppSRView);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc pDesc, ref ID3D11ShaderResourceView* ppSRView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (ShaderResourceViewDesc* pDescPtr = &pDesc)
                {
                    fixed (ID3D11ShaderResourceView** ppSRViewPtr = &ppSRView)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResourcePtr, pDescPtr, ppSRViewPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc* pDesc, ID3D11UnorderedAccessView** ppUAView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResource, pDesc, ppUAView);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc* pDesc, ref ID3D11UnorderedAccessView* ppUAView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11UnorderedAccessView** ppUAViewPtr = &ppUAView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResource, pDesc, ppUAViewPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc pDesc, ID3D11UnorderedAccessView** ppUAView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (UnorderedAccessViewDesc* pDescPtr = &pDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResource, pDescPtr, ppUAView);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc pDesc, ref ID3D11UnorderedAccessView* ppUAView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (UnorderedAccessViewDesc* pDescPtr = &pDesc)
            {
                fixed (ID3D11UnorderedAccessView** ppUAViewPtr = &ppUAView)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResource, pDescPtr, ppUAViewPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc* pDesc, ID3D11UnorderedAccessView** ppUAView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResourcePtr, pDesc, ppUAView);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc* pDesc, ref ID3D11UnorderedAccessView* ppUAView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (ID3D11UnorderedAccessView** ppUAViewPtr = &ppUAView)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResourcePtr, pDesc, ppUAViewPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc pDesc, ID3D11UnorderedAccessView** ppUAView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (UnorderedAccessViewDesc* pDescPtr = &pDesc)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResourcePtr, pDescPtr, ppUAView);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc pDesc, ref ID3D11UnorderedAccessView* ppUAView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (UnorderedAccessViewDesc* pDescPtr = &pDesc)
                {
                    fixed (ID3D11UnorderedAccessView** ppUAViewPtr = &ppUAView)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResourcePtr, pDescPtr, ppUAViewPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc* pDesc, ID3D11RenderTargetView** ppRTView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResource, pDesc, ppRTView);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc* pDesc, ref ID3D11RenderTargetView* ppRTView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11RenderTargetView** ppRTViewPtr = &ppRTView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResource, pDesc, ppRTViewPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc pDesc, ID3D11RenderTargetView** ppRTView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (RenderTargetViewDesc* pDescPtr = &pDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResource, pDescPtr, ppRTView);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc pDesc, ref ID3D11RenderTargetView* ppRTView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (RenderTargetViewDesc* pDescPtr = &pDesc)
            {
                fixed (ID3D11RenderTargetView** ppRTViewPtr = &ppRTView)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResource, pDescPtr, ppRTViewPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc* pDesc, ID3D11RenderTargetView** ppRTView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResourcePtr, pDesc, ppRTView);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc* pDesc, ref ID3D11RenderTargetView* ppRTView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (ID3D11RenderTargetView** ppRTViewPtr = &ppRTView)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResourcePtr, pDesc, ppRTViewPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc pDesc, ID3D11RenderTargetView** ppRTView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (RenderTargetViewDesc* pDescPtr = &pDesc)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResourcePtr, pDescPtr, ppRTView);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc pDesc, ref ID3D11RenderTargetView* ppRTView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (RenderTargetViewDesc* pDescPtr = &pDesc)
                {
                    fixed (ID3D11RenderTargetView** ppRTViewPtr = &ppRTView)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResourcePtr, pDescPtr, ppRTViewPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDepthStencilView(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilViewDesc* pDesc, ID3D11DepthStencilView** ppDepthStencilView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResource, pDesc, ppDepthStencilView);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDepthStencilView(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilViewDesc* pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11DepthStencilView** ppDepthStencilViewPtr = &ppDepthStencilView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResource, pDesc, ppDepthStencilViewPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDepthStencilView(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilViewDesc pDesc, ID3D11DepthStencilView** ppDepthStencilView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (DepthStencilViewDesc* pDescPtr = &pDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResource, pDescPtr, ppDepthStencilView);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDepthStencilView(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilViewDesc pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (DepthStencilViewDesc* pDescPtr = &pDesc)
            {
                fixed (ID3D11DepthStencilView** ppDepthStencilViewPtr = &ppDepthStencilView)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResource, pDescPtr, ppDepthStencilViewPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDepthStencilView(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilViewDesc* pDesc, ID3D11DepthStencilView** ppDepthStencilView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResourcePtr, pDesc, ppDepthStencilView);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDepthStencilView(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilViewDesc* pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (ID3D11DepthStencilView** ppDepthStencilViewPtr = &ppDepthStencilView)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResourcePtr, pDesc, ppDepthStencilViewPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDepthStencilView(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilViewDesc pDesc, ID3D11DepthStencilView** ppDepthStencilView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (DepthStencilViewDesc* pDescPtr = &pDesc)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResourcePtr, pDescPtr, ppDepthStencilView);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDepthStencilView(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilViewDesc pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (DepthStencilViewDesc* pDescPtr = &pDesc)
                {
                    fixed (ID3D11DepthStencilView** ppDepthStencilViewPtr = &ppDepthStencilView)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResourcePtr, pDescPtr, ppDepthStencilViewPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateInputLayout([Flow(Silk.NET.Core.Native.FlowDirection.In)] InputElementDesc* pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ID3D11InputLayout** ppInputLayout)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateInputLayout([Flow(Silk.NET.Core.Native.FlowDirection.In)] InputElementDesc* pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ID3D11InputLayout* ppInputLayout)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11InputLayout** ppInputLayoutPtr = &ppInputLayout)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayoutPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateInputLayout<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] InputElementDesc* pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecodeWithInputSignature, nuint BytecodeLength, ID3D11InputLayout** ppInputLayout) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodeWithInputSignaturePtr = &pShaderBytecodeWithInputSignature)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignaturePtr, BytecodeLength, ppInputLayout);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateInputLayout<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] InputElementDesc* pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ID3D11InputLayout* ppInputLayout) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodeWithInputSignaturePtr = &pShaderBytecodeWithInputSignature)
            {
                fixed (ID3D11InputLayout** ppInputLayoutPtr = &ppInputLayout)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignaturePtr, BytecodeLength, ppInputLayoutPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateInputLayout([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly InputElementDesc pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ID3D11InputLayout** ppInputLayout)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (InputElementDesc* pInputElementDescsPtr = &pInputElementDescs)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescsPtr, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateInputLayout([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly InputElementDesc pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ID3D11InputLayout* ppInputLayout)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (InputElementDesc* pInputElementDescsPtr = &pInputElementDescs)
            {
                fixed (ID3D11InputLayout** ppInputLayoutPtr = &ppInputLayout)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescsPtr, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayoutPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateInputLayout<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly InputElementDesc pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecodeWithInputSignature, nuint BytecodeLength, ID3D11InputLayout** ppInputLayout) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (InputElementDesc* pInputElementDescsPtr = &pInputElementDescs)
            {
                fixed (void* pShaderBytecodeWithInputSignaturePtr = &pShaderBytecodeWithInputSignature)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescsPtr, NumElements, pShaderBytecodeWithInputSignaturePtr, BytecodeLength, ppInputLayout);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateInputLayout<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly InputElementDesc pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ID3D11InputLayout* ppInputLayout) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (InputElementDesc* pInputElementDescsPtr = &pInputElementDescs)
            {
                fixed (void* pShaderBytecodeWithInputSignaturePtr = &pShaderBytecodeWithInputSignature)
                {
                    fixed (ID3D11InputLayout** ppInputLayoutPtr = &ppInputLayout)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescsPtr, NumElements, pShaderBytecodeWithInputSignaturePtr, BytecodeLength, ppInputLayoutPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateVertexShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11VertexShader** ppVertexShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppVertexShader);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateVertexShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11VertexShader* ppVertexShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11VertexShader** ppVertexShaderPtr = &ppVertexShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppVertexShaderPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateVertexShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11VertexShader** ppVertexShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppVertexShader);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateVertexShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11VertexShader* ppVertexShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11VertexShader** ppVertexShaderPtr = &ppVertexShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppVertexShaderPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateVertexShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11VertexShader** ppVertexShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppVertexShader);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateVertexShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11VertexShader* ppVertexShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11VertexShader** ppVertexShaderPtr = &ppVertexShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppVertexShaderPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateVertexShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11VertexShader** ppVertexShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppVertexShader);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateVertexShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11VertexShader* ppVertexShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11VertexShader** ppVertexShaderPtr = &ppVertexShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppVertexShaderPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppGeometryShader);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppGeometryShaderPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppGeometryShader);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppGeometryShaderPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppGeometryShader);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppGeometryShaderPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppGeometryShader);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppGeometryShaderPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                {
                    fixed (uint* pBufferStridesPtr = &pBufferStrides)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                {
                    fixed (uint* pBufferStridesPtr = &pBufferStrides)
                    {
                        fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                {
                    fixed (uint* pBufferStridesPtr = &pBufferStrides)
                    {
                        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
                {
                    fixed (uint* pBufferStridesPtr = &pBufferStrides)
                    {
                        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                        {
                            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreatePixelShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11PixelShader** ppPixelShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppPixelShader);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreatePixelShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11PixelShader* ppPixelShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11PixelShader** ppPixelShaderPtr = &ppPixelShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppPixelShaderPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreatePixelShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11PixelShader** ppPixelShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppPixelShader);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreatePixelShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11PixelShader* ppPixelShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11PixelShader** ppPixelShaderPtr = &ppPixelShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppPixelShaderPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreatePixelShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11PixelShader** ppPixelShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppPixelShader);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreatePixelShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11PixelShader* ppPixelShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11PixelShader** ppPixelShaderPtr = &ppPixelShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppPixelShaderPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreatePixelShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11PixelShader** ppPixelShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppPixelShader);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreatePixelShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11PixelShader* ppPixelShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11PixelShader** ppPixelShaderPtr = &ppPixelShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppPixelShaderPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateHullShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11HullShader** ppHullShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppHullShader);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateHullShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11HullShader* ppHullShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11HullShader** ppHullShaderPtr = &ppHullShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppHullShaderPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateHullShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11HullShader** ppHullShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppHullShader);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateHullShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11HullShader* ppHullShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11HullShader** ppHullShaderPtr = &ppHullShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppHullShaderPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateHullShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11HullShader** ppHullShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppHullShader);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateHullShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11HullShader* ppHullShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11HullShader** ppHullShaderPtr = &ppHullShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppHullShaderPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateHullShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11HullShader** ppHullShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppHullShader);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateHullShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11HullShader* ppHullShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11HullShader** ppHullShaderPtr = &ppHullShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppHullShaderPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDomainShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11DomainShader** ppDomainShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppDomainShader);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDomainShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11DomainShader* ppDomainShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11DomainShader** ppDomainShaderPtr = &ppDomainShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppDomainShaderPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDomainShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11DomainShader** ppDomainShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppDomainShader);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDomainShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11DomainShader* ppDomainShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11DomainShader** ppDomainShaderPtr = &ppDomainShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppDomainShaderPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDomainShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11DomainShader** ppDomainShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppDomainShader);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDomainShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11DomainShader* ppDomainShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11DomainShader** ppDomainShaderPtr = &ppDomainShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppDomainShaderPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDomainShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11DomainShader** ppDomainShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppDomainShader);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDomainShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11DomainShader* ppDomainShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11DomainShader** ppDomainShaderPtr = &ppDomainShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppDomainShaderPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateComputeShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11ComputeShader** ppComputeShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppComputeShader);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateComputeShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11ComputeShader* ppComputeShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ComputeShader** ppComputeShaderPtr = &ppComputeShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppComputeShaderPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateComputeShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11ComputeShader** ppComputeShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppComputeShader);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateComputeShader([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11ComputeShader* ppComputeShader)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11ComputeShader** ppComputeShaderPtr = &ppComputeShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppComputeShaderPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateComputeShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11ComputeShader** ppComputeShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppComputeShader);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateComputeShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11ComputeShader** ppComputeShaderPtr = &ppComputeShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppComputeShaderPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateComputeShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11ComputeShader** ppComputeShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppComputeShader);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateComputeShader<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pShaderBytecodePtr = &pShaderBytecode)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11ComputeShader** ppComputeShaderPtr = &ppComputeShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppComputeShaderPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateClassLinkage(ID3D11ClassLinkage** ppLinkage)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11ClassLinkage**, int>)@this->LpVtbl[19])(@this, ppLinkage);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateClassLinkage(ref ID3D11ClassLinkage* ppLinkage)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ClassLinkage** ppLinkagePtr = &ppLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11ClassLinkage**, int>)@this->LpVtbl[19])(@this, ppLinkagePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBlendState([Flow(Silk.NET.Core.Native.FlowDirection.In)] BlendDesc* pBlendStateDesc, ID3D11BlendState** ppBlendState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BlendDesc*, ID3D11BlendState**, int>)@this->LpVtbl[20])(@this, pBlendStateDesc, ppBlendState);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBlendState([Flow(Silk.NET.Core.Native.FlowDirection.In)] BlendDesc* pBlendStateDesc, ref ID3D11BlendState* ppBlendState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11BlendState** ppBlendStatePtr = &ppBlendState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BlendDesc*, ID3D11BlendState**, int>)@this->LpVtbl[20])(@this, pBlendStateDesc, ppBlendStatePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBlendState([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BlendDesc pBlendStateDesc, ID3D11BlendState** ppBlendState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (BlendDesc* pBlendStateDescPtr = &pBlendStateDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BlendDesc*, ID3D11BlendState**, int>)@this->LpVtbl[20])(@this, pBlendStateDescPtr, ppBlendState);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBlendState([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BlendDesc pBlendStateDesc, ref ID3D11BlendState* ppBlendState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (BlendDesc* pBlendStateDescPtr = &pBlendStateDesc)
            {
                fixed (ID3D11BlendState** ppBlendStatePtr = &ppBlendState)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BlendDesc*, ID3D11BlendState**, int>)@this->LpVtbl[20])(@this, pBlendStateDescPtr, ppBlendStatePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDepthStencilState([Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilDesc* pDepthStencilDesc, ID3D11DepthStencilState** ppDepthStencilState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, DepthStencilDesc*, ID3D11DepthStencilState**, int>)@this->LpVtbl[21])(@this, pDepthStencilDesc, ppDepthStencilState);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDepthStencilState([Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilDesc* pDepthStencilDesc, ref ID3D11DepthStencilState* ppDepthStencilState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11DepthStencilState** ppDepthStencilStatePtr = &ppDepthStencilState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, DepthStencilDesc*, ID3D11DepthStencilState**, int>)@this->LpVtbl[21])(@this, pDepthStencilDesc, ppDepthStencilStatePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDepthStencilState([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilDesc pDepthStencilDesc, ID3D11DepthStencilState** ppDepthStencilState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (DepthStencilDesc* pDepthStencilDescPtr = &pDepthStencilDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, DepthStencilDesc*, ID3D11DepthStencilState**, int>)@this->LpVtbl[21])(@this, pDepthStencilDescPtr, ppDepthStencilState);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDepthStencilState([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilDesc pDepthStencilDesc, ref ID3D11DepthStencilState* ppDepthStencilState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (DepthStencilDesc* pDepthStencilDescPtr = &pDepthStencilDesc)
            {
                fixed (ID3D11DepthStencilState** ppDepthStencilStatePtr = &ppDepthStencilState)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, DepthStencilDesc*, ID3D11DepthStencilState**, int>)@this->LpVtbl[21])(@this, pDepthStencilDescPtr, ppDepthStencilStatePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRasterizerState([Flow(Silk.NET.Core.Native.FlowDirection.In)] RasterizerDesc* pRasterizerDesc, ID3D11RasterizerState** ppRasterizerState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc*, ID3D11RasterizerState**, int>)@this->LpVtbl[22])(@this, pRasterizerDesc, ppRasterizerState);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRasterizerState([Flow(Silk.NET.Core.Native.FlowDirection.In)] RasterizerDesc* pRasterizerDesc, ref ID3D11RasterizerState* ppRasterizerState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11RasterizerState** ppRasterizerStatePtr = &ppRasterizerState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc*, ID3D11RasterizerState**, int>)@this->LpVtbl[22])(@this, pRasterizerDesc, ppRasterizerStatePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRasterizerState([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RasterizerDesc pRasterizerDesc, ID3D11RasterizerState** ppRasterizerState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (RasterizerDesc* pRasterizerDescPtr = &pRasterizerDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc*, ID3D11RasterizerState**, int>)@this->LpVtbl[22])(@this, pRasterizerDescPtr, ppRasterizerState);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRasterizerState([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RasterizerDesc pRasterizerDesc, ref ID3D11RasterizerState* ppRasterizerState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (RasterizerDesc* pRasterizerDescPtr = &pRasterizerDesc)
            {
                fixed (ID3D11RasterizerState** ppRasterizerStatePtr = &ppRasterizerState)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc*, ID3D11RasterizerState**, int>)@this->LpVtbl[22])(@this, pRasterizerDescPtr, ppRasterizerStatePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateSamplerState([Flow(Silk.NET.Core.Native.FlowDirection.In)] SamplerDesc* pSamplerDesc, ID3D11SamplerState** ppSamplerState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, SamplerDesc*, ID3D11SamplerState**, int>)@this->LpVtbl[23])(@this, pSamplerDesc, ppSamplerState);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateSamplerState([Flow(Silk.NET.Core.Native.FlowDirection.In)] SamplerDesc* pSamplerDesc, ref ID3D11SamplerState* ppSamplerState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11SamplerState** ppSamplerStatePtr = &ppSamplerState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, SamplerDesc*, ID3D11SamplerState**, int>)@this->LpVtbl[23])(@this, pSamplerDesc, ppSamplerStatePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateSamplerState([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SamplerDesc pSamplerDesc, ID3D11SamplerState** ppSamplerState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SamplerDesc* pSamplerDescPtr = &pSamplerDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, SamplerDesc*, ID3D11SamplerState**, int>)@this->LpVtbl[23])(@this, pSamplerDescPtr, ppSamplerState);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateSamplerState([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SamplerDesc pSamplerDesc, ref ID3D11SamplerState* ppSamplerState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SamplerDesc* pSamplerDescPtr = &pSamplerDesc)
            {
                fixed (ID3D11SamplerState** ppSamplerStatePtr = &ppSamplerState)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, SamplerDesc*, ID3D11SamplerState**, int>)@this->LpVtbl[23])(@this, pSamplerDescPtr, ppSamplerStatePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateQuery([Flow(Silk.NET.Core.Native.FlowDirection.In)] QueryDesc* pQueryDesc, ID3D11Query** ppQuery)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Query**, int>)@this->LpVtbl[24])(@this, pQueryDesc, ppQuery);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateQuery([Flow(Silk.NET.Core.Native.FlowDirection.In)] QueryDesc* pQueryDesc, ref ID3D11Query* ppQuery)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Query** ppQueryPtr = &ppQuery)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Query**, int>)@this->LpVtbl[24])(@this, pQueryDesc, ppQueryPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateQuery([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly QueryDesc pQueryDesc, ID3D11Query** ppQuery)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (QueryDesc* pQueryDescPtr = &pQueryDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Query**, int>)@this->LpVtbl[24])(@this, pQueryDescPtr, ppQuery);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateQuery([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly QueryDesc pQueryDesc, ref ID3D11Query* ppQuery)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (QueryDesc* pQueryDescPtr = &pQueryDesc)
            {
                fixed (ID3D11Query** ppQueryPtr = &ppQuery)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Query**, int>)@this->LpVtbl[24])(@this, pQueryDescPtr, ppQueryPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreatePredicate([Flow(Silk.NET.Core.Native.FlowDirection.In)] QueryDesc* pPredicateDesc, ID3D11Predicate** ppPredicate)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Predicate**, int>)@this->LpVtbl[25])(@this, pPredicateDesc, ppPredicate);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreatePredicate([Flow(Silk.NET.Core.Native.FlowDirection.In)] QueryDesc* pPredicateDesc, ref ID3D11Predicate* ppPredicate)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Predicate** ppPredicatePtr = &ppPredicate)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Predicate**, int>)@this->LpVtbl[25])(@this, pPredicateDesc, ppPredicatePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreatePredicate([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly QueryDesc pPredicateDesc, ID3D11Predicate** ppPredicate)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (QueryDesc* pPredicateDescPtr = &pPredicateDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Predicate**, int>)@this->LpVtbl[25])(@this, pPredicateDescPtr, ppPredicate);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreatePredicate([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly QueryDesc pPredicateDesc, ref ID3D11Predicate* ppPredicate)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (QueryDesc* pPredicateDescPtr = &pPredicateDesc)
            {
                fixed (ID3D11Predicate** ppPredicatePtr = &ppPredicate)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc*, ID3D11Predicate**, int>)@this->LpVtbl[25])(@this, pPredicateDescPtr, ppPredicatePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pCounterDesc, ID3D11Counter** ppCounter)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, ID3D11Counter**, int>)@this->LpVtbl[26])(@this, pCounterDesc, ppCounter);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pCounterDesc, ref ID3D11Counter* ppCounter)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Counter** ppCounterPtr = &ppCounter)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, ID3D11Counter**, int>)@this->LpVtbl[26])(@this, pCounterDesc, ppCounterPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pCounterDesc, ID3D11Counter** ppCounter)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pCounterDescPtr = &pCounterDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, ID3D11Counter**, int>)@this->LpVtbl[26])(@this, pCounterDescPtr, ppCounter);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pCounterDesc, ref ID3D11Counter* ppCounter)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pCounterDescPtr = &pCounterDesc)
            {
                fixed (ID3D11Counter** ppCounterPtr = &ppCounter)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, ID3D11Counter**, int>)@this->LpVtbl[26])(@this, pCounterDescPtr, ppCounterPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeferredContext(uint ContextFlags, ID3D11DeviceContext** ppDeferredContext)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, ID3D11DeviceContext**, int>)@this->LpVtbl[27])(@this, ContextFlags, ppDeferredContext);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeferredContext(uint ContextFlags, ref ID3D11DeviceContext* ppDeferredContext)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11DeviceContext** ppDeferredContextPtr = &ppDeferredContext)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, ID3D11DeviceContext**, int>)@this->LpVtbl[27])(@this, ContextFlags, ppDeferredContextPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource(void* hResource, Guid* ReturnedInterface, void** ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResource, ReturnedInterface, ppResource);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource(void* hResource, Guid* ReturnedInterface, ref void* ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResource, ReturnedInterface, ppResourcePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource(void* hResource, ref Guid ReturnedInterface, void** ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResource, ReturnedInterfacePtr, ppResource);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource(void* hResource, ref Guid ReturnedInterface, ref void* ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
            {
                fixed (void** ppResourcePtr = &ppResource)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResource, ReturnedInterfacePtr, ppResourcePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource<T0>(ref T0 hResource, Guid* ReturnedInterface, void** ppResource) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* hResourcePtr = &hResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResourcePtr, ReturnedInterface, ppResource);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource<T0>(ref T0 hResource, Guid* ReturnedInterface, ref void* ppResource) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* hResourcePtr = &hResource)
            {
                fixed (void** ppResourcePtr = &ppResource)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResourcePtr, ReturnedInterface, ppResourcePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource<T0>(ref T0 hResource, ref Guid ReturnedInterface, void** ppResource) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* hResourcePtr = &hResource)
            {
                fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResourcePtr, ReturnedInterfacePtr, ppResource);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource<T0>(ref T0 hResource, ref Guid ReturnedInterface, ref void* ppResource) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* hResourcePtr = &hResource)
            {
                fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
                {
                    fixed (void** ppResourcePtr = &ppResource)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResourcePtr, ReturnedInterfacePtr, ppResourcePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckFormatSupport(Silk.NET.DXGI.Format Format, uint* pFormatSupport)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Silk.NET.DXGI.Format, uint*, int>)@this->LpVtbl[29])(@this, Format, pFormatSupport);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int CheckFormatSupport(Silk.NET.DXGI.Format Format, ref uint pFormatSupport)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pFormatSupportPtr = &pFormatSupport)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Silk.NET.DXGI.Format, uint*, int>)@this->LpVtbl[29])(@this, Format, pFormatSupportPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckMultisampleQualityLevels(Silk.NET.DXGI.Format Format, uint SampleCount, uint* pNumQualityLevels)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Silk.NET.DXGI.Format, uint, uint*, int>)@this->LpVtbl[30])(@this, Format, SampleCount, pNumQualityLevels);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int CheckMultisampleQualityLevels(Silk.NET.DXGI.Format Format, uint SampleCount, ref uint pNumQualityLevels)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNumQualityLevelsPtr = &pNumQualityLevels)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Silk.NET.DXGI.Format, uint, uint*, int>)@this->LpVtbl[30])(@this, Format, SampleCount, pNumQualityLevelsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void CheckCounterInfo(CounterInfo* pCounterInfo)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterInfo*, void>)@this->LpVtbl[31])(@this, pCounterInfo);
        }

        /// <summary>To be documented.</summary>
        public readonly void CheckCounterInfo(ref CounterInfo pCounterInfo)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (CounterInfo* pCounterInfoPtr = &pCounterInfo)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterInfo*, void>)@this->LpVtbl[31])(@this, pCounterInfoPtr);
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
            SilkMarshal.Free((nint)szDescriptionPtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szUnitsPtr = &szUnits)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szUnitsPtr = &szUnits)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            SilkMarshal.Free((nint)szNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            SilkMarshal.Free((nint)szNamePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
            SilkMarshal.Free((nint)szNamePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
                                        fixed (byte* szDescriptionPtr = &szDescription)
                                        {
                                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                            {
                                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
                                fixed (byte* szUnitsPtr = &szUnits)
                                {
                                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                    {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szUnitsPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
            SilkMarshal.Free((nint)szUnitsPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
            SilkMarshal.Free((nint)szUnitsPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
            SilkMarshal.Free((nint)szUnitsPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
            SilkMarshal.Free((nint)szUnitsPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
            SilkMarshal.Free((nint)szUnitsPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
            SilkMarshal.Free((nint)szUnitsPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
            SilkMarshal.Free((nint)szUnitsPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
                        fixed (byte* szNamePtr = &szName)
                        {
                            fixed (uint* pNameLengthPtr = &pNameLength)
                            {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
            SilkMarshal.Free((nint)szUnitsPtr);
                            }
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szUnitsPtr);
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
            SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
            SilkMarshal.Free((nint)szDescriptionPtr);
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int CheckCounter([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (CounterDesc* pDescPtr = &pDesc)
            {
                fixed (CounterType* pTypePtr = &pType)
                {
                    fixed (uint* pActiveCountersPtr = &pActiveCounters)
                    {
            var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
            var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
            var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
            SilkMarshal.Free((nint)szDescriptionPtr);
                            }
            SilkMarshal.Free((nint)szUnitsPtr);
                        }
            SilkMarshal.Free((nint)szNamePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckFeatureSupport(Feature Feature, void* pFeatureSupportData, uint FeatureSupportDataSize)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Feature, void*, uint, int>)@this->LpVtbl[33])(@this, Feature, pFeatureSupportData, FeatureSupportDataSize);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int CheckFeatureSupport<T0>(Feature Feature, ref T0 pFeatureSupportData, uint FeatureSupportDataSize) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pFeatureSupportDataPtr = &pFeatureSupportData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Feature, void*, uint, int>)@this->LpVtbl[33])(@this, Feature, pFeatureSupportDataPtr, FeatureSupportDataSize);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int GetPrivateData(Guid* guid, uint* pDataSize, void* pData)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guid, pDataSize, pData);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int GetPrivateData<T0>(Guid* guid, uint* pDataSize, ref T0 pData) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pDataPtr = &pData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guid, pDataSize, pDataPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int GetPrivateData(Guid* guid, ref uint pDataSize, void* pData)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pDataSizePtr = &pDataSize)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guid, pDataSizePtr, pData);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int GetPrivateData<T0>(Guid* guid, ref uint pDataSize, ref T0 pData) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pDataSizePtr = &pDataSize)
            {
                fixed (void* pDataPtr = &pData)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guid, pDataSizePtr, pDataPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int GetPrivateData(ref Guid guid, uint* pDataSize, void* pData)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* guidPtr = &guid)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guidPtr, pDataSize, pData);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int GetPrivateData<T0>(ref Guid guid, uint* pDataSize, ref T0 pData) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* guidPtr = &guid)
            {
                fixed (void* pDataPtr = &pData)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guidPtr, pDataSize, pDataPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int GetPrivateData(ref Guid guid, ref uint pDataSize, void* pData)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* guidPtr = &guid)
            {
                fixed (uint* pDataSizePtr = &pDataSize)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guidPtr, pDataSizePtr, pData);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int GetPrivateData<T0>(ref Guid guid, ref uint pDataSize, ref T0 pData) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* guidPtr = &guid)
            {
                fixed (uint* pDataSizePtr = &pDataSize)
                {
                    fixed (void* pDataPtr = &pData)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guidPtr, pDataSizePtr, pDataPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int SetPrivateData(Guid* guid, uint DataSize, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pData)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, uint, void*, int>)@this->LpVtbl[35])(@this, guid, DataSize, pData);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int SetPrivateData<T0>(Guid* guid, uint DataSize, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pData) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* pDataPtr = &pData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, uint, void*, int>)@this->LpVtbl[35])(@this, guid, DataSize, pDataPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int SetPrivateData(ref Guid guid, uint DataSize, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pData)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* guidPtr = &guid)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, uint, void*, int>)@this->LpVtbl[35])(@this, guidPtr, DataSize, pData);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int SetPrivateData<T0>(ref Guid guid, uint DataSize, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pData) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* guidPtr = &guid)
            {
                fixed (void* pDataPtr = &pData)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, uint, void*, int>)@this->LpVtbl[35])(@this, guidPtr, DataSize, pDataPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int SetPrivateDataInterface(Guid* guid, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.IUnknown* pData)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, Silk.NET.Core.Native.IUnknown*, int>)@this->LpVtbl[36])(@this, guid, pData);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int SetPrivateDataInterface(Guid* guid, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.IUnknown pData)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Silk.NET.Core.Native.IUnknown* pDataPtr = &pData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, Silk.NET.Core.Native.IUnknown*, int>)@this->LpVtbl[36])(@this, guid, pDataPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int SetPrivateDataInterface(ref Guid guid, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.IUnknown* pData)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* guidPtr = &guid)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, Silk.NET.Core.Native.IUnknown*, int>)@this->LpVtbl[36])(@this, guidPtr, pData);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int SetPrivateDataInterface(ref Guid guid, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.IUnknown pData)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* guidPtr = &guid)
            {
                fixed (Silk.NET.Core.Native.IUnknown* pDataPtr = &pData)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Guid*, Silk.NET.Core.Native.IUnknown*, int>)@this->LpVtbl[36])(@this, guidPtr, pDataPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly Silk.NET.Core.Native.D3DFeatureLevel GetFeatureLevel()
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            Silk.NET.Core.Native.D3DFeatureLevel ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Silk.NET.Core.Native.D3DFeatureLevel>)@this->LpVtbl[37])(@this);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly uint GetCreationFlags()
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            uint ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint>)@this->LpVtbl[38])(@this);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int GetDeviceRemovedReason()
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, int>)@this->LpVtbl[39])(@this);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetImmediateContext(ID3D11DeviceContext** ppImmediateContext)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11DeviceContext**, void>)@this->LpVtbl[40])(@this, ppImmediateContext);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetImmediateContext(ref ID3D11DeviceContext* ppImmediateContext)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11DeviceContext** ppImmediateContextPtr = &ppImmediateContext)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11DeviceContext**, void>)@this->LpVtbl[40])(@this, ppImmediateContextPtr);
            }
        }

        /// <summary>To be documented.</summary>
        public readonly int SetExceptionMode(uint RaiseFlags)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, int>)@this->LpVtbl[41])(@this, RaiseFlags);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly uint GetExceptionMode()
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            uint ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint>)@this->LpVtbl[42])(@this);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetImmediateContext1(ID3D11DeviceContext1** ppImmediateContext)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11DeviceContext1**, void>)@this->LpVtbl[43])(@this, ppImmediateContext);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetImmediateContext1(ref ID3D11DeviceContext1* ppImmediateContext)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11DeviceContext1** ppImmediateContextPtr = &ppImmediateContext)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11DeviceContext1**, void>)@this->LpVtbl[43])(@this, ppImmediateContextPtr);
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeferredContext1(uint ContextFlags, ID3D11DeviceContext1** ppDeferredContext)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, ID3D11DeviceContext1**, int>)@this->LpVtbl[44])(@this, ContextFlags, ppDeferredContext);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeferredContext1(uint ContextFlags, ref ID3D11DeviceContext1* ppDeferredContext)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11DeviceContext1** ppDeferredContextPtr = &ppDeferredContext)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, ID3D11DeviceContext1**, int>)@this->LpVtbl[44])(@this, ContextFlags, ppDeferredContextPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBlendState1([Flow(Silk.NET.Core.Native.FlowDirection.In)] BlendDesc1* pBlendStateDesc, ID3D11BlendState1** ppBlendState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BlendDesc1*, ID3D11BlendState1**, int>)@this->LpVtbl[45])(@this, pBlendStateDesc, ppBlendState);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBlendState1([Flow(Silk.NET.Core.Native.FlowDirection.In)] BlendDesc1* pBlendStateDesc, ref ID3D11BlendState1* ppBlendState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11BlendState1** ppBlendStatePtr = &ppBlendState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BlendDesc1*, ID3D11BlendState1**, int>)@this->LpVtbl[45])(@this, pBlendStateDesc, ppBlendStatePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBlendState1([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BlendDesc1 pBlendStateDesc, ID3D11BlendState1** ppBlendState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (BlendDesc1* pBlendStateDescPtr = &pBlendStateDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BlendDesc1*, ID3D11BlendState1**, int>)@this->LpVtbl[45])(@this, pBlendStateDescPtr, ppBlendState);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBlendState1([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BlendDesc1 pBlendStateDesc, ref ID3D11BlendState1* ppBlendState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (BlendDesc1* pBlendStateDescPtr = &pBlendStateDesc)
            {
                fixed (ID3D11BlendState1** ppBlendStatePtr = &ppBlendState)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, BlendDesc1*, ID3D11BlendState1**, int>)@this->LpVtbl[45])(@this, pBlendStateDescPtr, ppBlendStatePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRasterizerState1([Flow(Silk.NET.Core.Native.FlowDirection.In)] RasterizerDesc1* pRasterizerDesc, ID3D11RasterizerState1** ppRasterizerState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc1*, ID3D11RasterizerState1**, int>)@this->LpVtbl[46])(@this, pRasterizerDesc, ppRasterizerState);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRasterizerState1([Flow(Silk.NET.Core.Native.FlowDirection.In)] RasterizerDesc1* pRasterizerDesc, ref ID3D11RasterizerState1* ppRasterizerState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11RasterizerState1** ppRasterizerStatePtr = &ppRasterizerState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc1*, ID3D11RasterizerState1**, int>)@this->LpVtbl[46])(@this, pRasterizerDesc, ppRasterizerStatePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRasterizerState1([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RasterizerDesc1 pRasterizerDesc, ID3D11RasterizerState1** ppRasterizerState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (RasterizerDesc1* pRasterizerDescPtr = &pRasterizerDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc1*, ID3D11RasterizerState1**, int>)@this->LpVtbl[46])(@this, pRasterizerDescPtr, ppRasterizerState);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRasterizerState1([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RasterizerDesc1 pRasterizerDesc, ref ID3D11RasterizerState1* ppRasterizerState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (RasterizerDesc1* pRasterizerDescPtr = &pRasterizerDesc)
            {
                fixed (ID3D11RasterizerState1** ppRasterizerStatePtr = &ppRasterizerState)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc1*, ID3D11RasterizerState1**, int>)@this->LpVtbl[46])(@this, pRasterizerDescPtr, ppRasterizerStatePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextState);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextStatePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevelPtr, ppContextState);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
            {
                fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevelPtr, ppContextStatePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevel, ppContextState);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
            {
                fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevel, ppContextStatePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
            {
                fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevelPtr, ppContextState);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
            {
                fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                {
                    fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevelPtr, ppContextStatePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextState);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
            {
                fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextStatePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
            {
                fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevelPtr, ppContextState);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
            {
                fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                {
                    fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevelPtr, ppContextStatePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
            {
                fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevel, ppContextState);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
            {
                fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
                {
                    fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevel, ppContextStatePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
            {
                fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
                {
                    fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevelPtr, ppContextState);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
            {
                fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
                {
                    fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                    {
                        fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevelPtr, ppContextStatePtr);
                        }
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource1(void* hResource, Guid* returnedInterface, void** ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResource, returnedInterface, ppResource);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource1(void* hResource, Guid* returnedInterface, ref void* ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResource, returnedInterface, ppResourcePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource1(void* hResource, ref Guid returnedInterface, void** ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* returnedInterfacePtr = &returnedInterface)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResource, returnedInterfacePtr, ppResource);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource1(void* hResource, ref Guid returnedInterface, ref void* ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* returnedInterfacePtr = &returnedInterface)
            {
                fixed (void** ppResourcePtr = &ppResource)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResource, returnedInterfacePtr, ppResourcePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource1<T0>(ref T0 hResource, Guid* returnedInterface, void** ppResource) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* hResourcePtr = &hResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResourcePtr, returnedInterface, ppResource);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource1<T0>(ref T0 hResource, Guid* returnedInterface, ref void* ppResource) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* hResourcePtr = &hResource)
            {
                fixed (void** ppResourcePtr = &ppResource)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResourcePtr, returnedInterface, ppResourcePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource1<T0>(ref T0 hResource, ref Guid returnedInterface, void** ppResource) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* hResourcePtr = &hResource)
            {
                fixed (Guid* returnedInterfacePtr = &returnedInterface)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResourcePtr, returnedInterfacePtr, ppResource);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource1<T0>(ref T0 hResource, ref Guid returnedInterface, ref void* ppResource) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* hResourcePtr = &hResource)
            {
                fixed (Guid* returnedInterfacePtr = &returnedInterface)
                {
                    fixed (void** ppResourcePtr = &ppResource)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResourcePtr, returnedInterfacePtr, ppResourcePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResourceByName([Flow(Silk.NET.Core.Native.FlowDirection.In)] char* lpName, uint dwDesiredAccess, Guid* returnedInterface, void** ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpName, dwDesiredAccess, returnedInterface, ppResource);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResourceByName([Flow(Silk.NET.Core.Native.FlowDirection.In)] char* lpName, uint dwDesiredAccess, Guid* returnedInterface, ref void* ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpName, dwDesiredAccess, returnedInterface, ppResourcePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResourceByName([Flow(Silk.NET.Core.Native.FlowDirection.In)] char* lpName, uint dwDesiredAccess, ref Guid returnedInterface, void** ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* returnedInterfacePtr = &returnedInterface)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpName, dwDesiredAccess, returnedInterfacePtr, ppResource);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResourceByName([Flow(Silk.NET.Core.Native.FlowDirection.In)] char* lpName, uint dwDesiredAccess, ref Guid returnedInterface, ref void* ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* returnedInterfacePtr = &returnedInterface)
            {
                fixed (void** ppResourcePtr = &ppResource)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpName, dwDesiredAccess, returnedInterfacePtr, ppResourcePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResourceByName([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly char lpName, uint dwDesiredAccess, Guid* returnedInterface, void** ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (char* lpNamePtr = &lpName)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterface, ppResource);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResourceByName([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly char lpName, uint dwDesiredAccess, Guid* returnedInterface, ref void* ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (char* lpNamePtr = &lpName)
            {
                fixed (void** ppResourcePtr = &ppResource)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterface, ppResourcePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResourceByName([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly char lpName, uint dwDesiredAccess, ref Guid returnedInterface, void** ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (char* lpNamePtr = &lpName)
            {
                fixed (Guid* returnedInterfacePtr = &returnedInterface)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterfacePtr, ppResource);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResourceByName([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly char lpName, uint dwDesiredAccess, ref Guid returnedInterface, ref void* ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (char* lpNamePtr = &lpName)
            {
                fixed (Guid* returnedInterfacePtr = &returnedInterface)
                {
                    fixed (void** ppResourcePtr = &ppResource)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterfacePtr, ppResourcePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResourceByName([Flow(Silk.NET.Core.Native.FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess, Guid* returnedInterface, void** ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var lpNamePtr = (byte*) SilkMarshal.StringToPtr(lpName, NativeStringEncoding.LPWStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, byte*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterface, ppResource);
            SilkMarshal.Free((nint)lpNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResourceByName([Flow(Silk.NET.Core.Native.FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess, Guid* returnedInterface, ref void* ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var lpNamePtr = (byte*) SilkMarshal.StringToPtr(lpName, NativeStringEncoding.LPWStr);
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, byte*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterface, ppResourcePtr);
            }
            SilkMarshal.Free((nint)lpNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResourceByName([Flow(Silk.NET.Core.Native.FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess, ref Guid returnedInterface, void** ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var lpNamePtr = (byte*) SilkMarshal.StringToPtr(lpName, NativeStringEncoding.LPWStr);
            fixed (Guid* returnedInterfacePtr = &returnedInterface)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, byte*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterfacePtr, ppResource);
            }
            SilkMarshal.Free((nint)lpNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResourceByName([Flow(Silk.NET.Core.Native.FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess, ref Guid returnedInterface, ref void* ppResource)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            var lpNamePtr = (byte*) SilkMarshal.StringToPtr(lpName, NativeStringEncoding.LPWStr);
            fixed (Guid* returnedInterfacePtr = &returnedInterface)
            {
                fixed (void** ppResourcePtr = &ppResource)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, byte*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterfacePtr, ppResourcePtr);
                }
            }
            SilkMarshal.Free((nint)lpNamePtr);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetImmediateContext2(ID3D11DeviceContext2** ppImmediateContext)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11DeviceContext2**, void>)@this->LpVtbl[50])(@this, ppImmediateContext);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetImmediateContext2(ref ID3D11DeviceContext2* ppImmediateContext)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11DeviceContext2** ppImmediateContextPtr = &ppImmediateContext)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11DeviceContext2**, void>)@this->LpVtbl[50])(@this, ppImmediateContextPtr);
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeferredContext2(uint ContextFlags, ID3D11DeviceContext2** ppDeferredContext)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, ID3D11DeviceContext2**, int>)@this->LpVtbl[51])(@this, ContextFlags, ppDeferredContext);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeferredContext2(uint ContextFlags, ref ID3D11DeviceContext2* ppDeferredContext)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11DeviceContext2** ppDeferredContextPtr = &ppDeferredContext)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, ID3D11DeviceContext2**, int>)@this->LpVtbl[51])(@this, ContextFlags, ppDeferredContextPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
            {
                fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
            {
                fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                    {
                        fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                    {
                        fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ID3D11Resource* pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                    {
                        fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                        {
                            fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                            {
                                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResource, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                            }
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                    {
                        fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                    {
                        fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                {
                    fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                    {
                        fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                        {
                            fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                            {
                                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResource, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                            }
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
                {
                    fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
                {
                    fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                    {
                        fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
                {
                    fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
                {
                    fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                    {
                        fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
                {
                    fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                    {
                        fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
                {
                    fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                    {
                        fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                        {
                            fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                            {
                                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDesc, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                            }
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
                {
                    fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
                {
                    fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                    {
                        fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
                {
                    fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                    {
                        fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
                {
                    fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                    {
                        fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                        {
                            fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                            {
                                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMips, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                            }
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
                {
                    fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                    {
                        fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                        {
                            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
                {
                    fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                    {
                        fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                        {
                            fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                            {
                                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                            }
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
                {
                    fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                    {
                        fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                        {
                            fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                            {
                                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
                            }
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly void GetResourceTiling(ref ID3D11Resource pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pTiledResourcePtr = &pTiledResource)
            {
                fixed (uint* pNumTilesForEntireResourcePtr = &pNumTilesForEntireResource)
                {
                    fixed (PackedMipDesc* pPackedMipDescPtr = &pPackedMipDesc)
                    {
                        fixed (TileShape* pStandardTileShapeForNonPackedMipsPtr = &pStandardTileShapeForNonPackedMips)
                        {
                            fixed (uint* pNumSubresourceTilingsPtr = &pNumSubresourceTilings)
                            {
                                fixed (SubresourceTiling* pSubresourceTilingsForNonPackedMipsPtr = &pSubresourceTilingsForNonPackedMips)
                                {
                                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint*, PackedMipDesc*, TileShape*, uint*, uint, SubresourceTiling*, void>)@this->LpVtbl[52])(@this, pTiledResourcePtr, pNumTilesForEntireResourcePtr, pPackedMipDescPtr, pStandardTileShapeForNonPackedMipsPtr, pNumSubresourceTilingsPtr, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMipsPtr);
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CheckMultisampleQualityLevels1(Silk.NET.DXGI.Format Format, uint SampleCount, uint Flags, uint* pNumQualityLevels)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Silk.NET.DXGI.Format, uint, uint, uint*, int>)@this->LpVtbl[53])(@this, Format, SampleCount, Flags, pNumQualityLevels);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int CheckMultisampleQualityLevels1(Silk.NET.DXGI.Format Format, uint SampleCount, uint Flags, ref uint pNumQualityLevels)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pNumQualityLevelsPtr = &pNumQualityLevels)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Silk.NET.DXGI.Format, uint, uint, uint*, int>)@this->LpVtbl[53])(@this, Format, SampleCount, Flags, pNumQualityLevelsPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D1([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc1* pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture2D1** ppTexture2D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, int>)@this->LpVtbl[54])(@this, pDesc1, pInitialData, ppTexture2D);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D1([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc1* pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture2D1* ppTexture2D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Texture2D1** ppTexture2DPtr = &ppTexture2D)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, int>)@this->LpVtbl[54])(@this, pDesc1, pInitialData, ppTexture2DPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D1([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc1* pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Texture2D1** ppTexture2D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, int>)@this->LpVtbl[54])(@this, pDesc1, pInitialDataPtr, ppTexture2D);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D1([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc1* pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Texture2D1* ppTexture2D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                fixed (ID3D11Texture2D1** ppTexture2DPtr = &ppTexture2D)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, int>)@this->LpVtbl[54])(@this, pDesc1, pInitialDataPtr, ppTexture2DPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D1([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc1 pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture2D1** ppTexture2D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture2DDesc1* pDesc1Ptr = &pDesc1)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, int>)@this->LpVtbl[54])(@this, pDesc1Ptr, pInitialData, ppTexture2D);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D1([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc1 pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture2D1* ppTexture2D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture2DDesc1* pDesc1Ptr = &pDesc1)
            {
                fixed (ID3D11Texture2D1** ppTexture2DPtr = &ppTexture2D)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, int>)@this->LpVtbl[54])(@this, pDesc1Ptr, pInitialData, ppTexture2DPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D1([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc1 pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Texture2D1** ppTexture2D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture2DDesc1* pDesc1Ptr = &pDesc1)
            {
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, int>)@this->LpVtbl[54])(@this, pDesc1Ptr, pInitialDataPtr, ppTexture2D);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D1([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc1 pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Texture2D1* ppTexture2D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture2DDesc1* pDesc1Ptr = &pDesc1)
            {
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    fixed (ID3D11Texture2D1** ppTexture2DPtr = &ppTexture2D)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture2DDesc1*, SubresourceData*, ID3D11Texture2D1**, int>)@this->LpVtbl[54])(@this, pDesc1Ptr, pInitialDataPtr, ppTexture2DPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D1([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc1* pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture3D1** ppTexture3D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, int>)@this->LpVtbl[55])(@this, pDesc1, pInitialData, ppTexture3D);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D1([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc1* pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture3D1* ppTexture3D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Texture3D1** ppTexture3DPtr = &ppTexture3D)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, int>)@this->LpVtbl[55])(@this, pDesc1, pInitialData, ppTexture3DPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D1([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc1* pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Texture3D1** ppTexture3D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, int>)@this->LpVtbl[55])(@this, pDesc1, pInitialDataPtr, ppTexture3D);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D1([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc1* pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Texture3D1* ppTexture3D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                fixed (ID3D11Texture3D1** ppTexture3DPtr = &ppTexture3D)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, int>)@this->LpVtbl[55])(@this, pDesc1, pInitialDataPtr, ppTexture3DPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D1([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc1 pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture3D1** ppTexture3D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture3DDesc1* pDesc1Ptr = &pDesc1)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, int>)@this->LpVtbl[55])(@this, pDesc1Ptr, pInitialData, ppTexture3D);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D1([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc1 pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture3D1* ppTexture3D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture3DDesc1* pDesc1Ptr = &pDesc1)
            {
                fixed (ID3D11Texture3D1** ppTexture3DPtr = &ppTexture3D)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, int>)@this->LpVtbl[55])(@this, pDesc1Ptr, pInitialData, ppTexture3DPtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D1([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc1 pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Texture3D1** ppTexture3D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture3DDesc1* pDesc1Ptr = &pDesc1)
            {
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, int>)@this->LpVtbl[55])(@this, pDesc1Ptr, pInitialDataPtr, ppTexture3D);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D1([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc1 pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Texture3D1* ppTexture3D)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Texture3DDesc1* pDesc1Ptr = &pDesc1)
            {
                fixed (SubresourceData* pInitialDataPtr = &pInitialData)
                {
                    fixed (ID3D11Texture3D1** ppTexture3DPtr = &ppTexture3D)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, Texture3DDesc1*, SubresourceData*, ID3D11Texture3D1**, int>)@this->LpVtbl[55])(@this, pDesc1Ptr, pInitialDataPtr, ppTexture3DPtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRasterizerState2([Flow(Silk.NET.Core.Native.FlowDirection.In)] RasterizerDesc2* pRasterizerDesc, ID3D11RasterizerState2** ppRasterizerState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc2*, ID3D11RasterizerState2**, int>)@this->LpVtbl[56])(@this, pRasterizerDesc, ppRasterizerState);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRasterizerState2([Flow(Silk.NET.Core.Native.FlowDirection.In)] RasterizerDesc2* pRasterizerDesc, ref ID3D11RasterizerState2* ppRasterizerState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11RasterizerState2** ppRasterizerStatePtr = &ppRasterizerState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc2*, ID3D11RasterizerState2**, int>)@this->LpVtbl[56])(@this, pRasterizerDesc, ppRasterizerStatePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRasterizerState2([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RasterizerDesc2 pRasterizerDesc, ID3D11RasterizerState2** ppRasterizerState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (RasterizerDesc2* pRasterizerDescPtr = &pRasterizerDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc2*, ID3D11RasterizerState2**, int>)@this->LpVtbl[56])(@this, pRasterizerDescPtr, ppRasterizerState);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRasterizerState2([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RasterizerDesc2 pRasterizerDesc, ref ID3D11RasterizerState2* ppRasterizerState)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (RasterizerDesc2* pRasterizerDescPtr = &pRasterizerDesc)
            {
                fixed (ID3D11RasterizerState2** ppRasterizerStatePtr = &ppRasterizerState)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, RasterizerDesc2*, ID3D11RasterizerState2**, int>)@this->LpVtbl[56])(@this, pRasterizerDescPtr, ppRasterizerStatePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView1(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc1* pDesc1, ID3D11ShaderResourceView1** ppSRView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, int>)@this->LpVtbl[57])(@this, pResource, pDesc1, ppSRView1);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView1(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc1* pDesc1, ref ID3D11ShaderResourceView1* ppSRView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11ShaderResourceView1** ppSRView1Ptr = &ppSRView1)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, int>)@this->LpVtbl[57])(@this, pResource, pDesc1, ppSRView1Ptr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView1(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc1 pDesc1, ID3D11ShaderResourceView1** ppSRView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ShaderResourceViewDesc1* pDesc1Ptr = &pDesc1)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, int>)@this->LpVtbl[57])(@this, pResource, pDesc1Ptr, ppSRView1);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView1(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc1 pDesc1, ref ID3D11ShaderResourceView1* ppSRView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ShaderResourceViewDesc1* pDesc1Ptr = &pDesc1)
            {
                fixed (ID3D11ShaderResourceView1** ppSRView1Ptr = &ppSRView1)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, int>)@this->LpVtbl[57])(@this, pResource, pDesc1Ptr, ppSRView1Ptr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView1(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc1* pDesc1, ID3D11ShaderResourceView1** ppSRView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, int>)@this->LpVtbl[57])(@this, pResourcePtr, pDesc1, ppSRView1);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView1(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc1* pDesc1, ref ID3D11ShaderResourceView1* ppSRView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (ID3D11ShaderResourceView1** ppSRView1Ptr = &ppSRView1)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, int>)@this->LpVtbl[57])(@this, pResourcePtr, pDesc1, ppSRView1Ptr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView1(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc1 pDesc1, ID3D11ShaderResourceView1** ppSRView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (ShaderResourceViewDesc1* pDesc1Ptr = &pDesc1)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, int>)@this->LpVtbl[57])(@this, pResourcePtr, pDesc1Ptr, ppSRView1);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView1(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc1 pDesc1, ref ID3D11ShaderResourceView1* ppSRView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (ShaderResourceViewDesc1* pDesc1Ptr = &pDesc1)
                {
                    fixed (ID3D11ShaderResourceView1** ppSRView1Ptr = &ppSRView1)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, ShaderResourceViewDesc1*, ID3D11ShaderResourceView1**, int>)@this->LpVtbl[57])(@this, pResourcePtr, pDesc1Ptr, ppSRView1Ptr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView1(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc1* pDesc1, ID3D11UnorderedAccessView1** ppUAView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, int>)@this->LpVtbl[58])(@this, pResource, pDesc1, ppUAView1);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView1(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc1* pDesc1, ref ID3D11UnorderedAccessView1* ppUAView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11UnorderedAccessView1** ppUAView1Ptr = &ppUAView1)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, int>)@this->LpVtbl[58])(@this, pResource, pDesc1, ppUAView1Ptr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView1(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc1 pDesc1, ID3D11UnorderedAccessView1** ppUAView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (UnorderedAccessViewDesc1* pDesc1Ptr = &pDesc1)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, int>)@this->LpVtbl[58])(@this, pResource, pDesc1Ptr, ppUAView1);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView1(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc1 pDesc1, ref ID3D11UnorderedAccessView1* ppUAView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (UnorderedAccessViewDesc1* pDesc1Ptr = &pDesc1)
            {
                fixed (ID3D11UnorderedAccessView1** ppUAView1Ptr = &ppUAView1)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, int>)@this->LpVtbl[58])(@this, pResource, pDesc1Ptr, ppUAView1Ptr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView1(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc1* pDesc1, ID3D11UnorderedAccessView1** ppUAView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, int>)@this->LpVtbl[58])(@this, pResourcePtr, pDesc1, ppUAView1);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView1(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc1* pDesc1, ref ID3D11UnorderedAccessView1* ppUAView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (ID3D11UnorderedAccessView1** ppUAView1Ptr = &ppUAView1)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, int>)@this->LpVtbl[58])(@this, pResourcePtr, pDesc1, ppUAView1Ptr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView1(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc1 pDesc1, ID3D11UnorderedAccessView1** ppUAView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (UnorderedAccessViewDesc1* pDesc1Ptr = &pDesc1)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, int>)@this->LpVtbl[58])(@this, pResourcePtr, pDesc1Ptr, ppUAView1);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView1(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc1 pDesc1, ref ID3D11UnorderedAccessView1* ppUAView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (UnorderedAccessViewDesc1* pDesc1Ptr = &pDesc1)
                {
                    fixed (ID3D11UnorderedAccessView1** ppUAView1Ptr = &ppUAView1)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, UnorderedAccessViewDesc1*, ID3D11UnorderedAccessView1**, int>)@this->LpVtbl[58])(@this, pResourcePtr, pDesc1Ptr, ppUAView1Ptr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView1(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc1* pDesc1, ID3D11RenderTargetView1** ppRTView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, int>)@this->LpVtbl[59])(@this, pResource, pDesc1, ppRTView1);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView1(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc1* pDesc1, ref ID3D11RenderTargetView1* ppRTView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11RenderTargetView1** ppRTView1Ptr = &ppRTView1)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, int>)@this->LpVtbl[59])(@this, pResource, pDesc1, ppRTView1Ptr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView1(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc1 pDesc1, ID3D11RenderTargetView1** ppRTView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (RenderTargetViewDesc1* pDesc1Ptr = &pDesc1)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, int>)@this->LpVtbl[59])(@this, pResource, pDesc1Ptr, ppRTView1);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView1(ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc1 pDesc1, ref ID3D11RenderTargetView1* ppRTView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (RenderTargetViewDesc1* pDesc1Ptr = &pDesc1)
            {
                fixed (ID3D11RenderTargetView1** ppRTView1Ptr = &ppRTView1)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, int>)@this->LpVtbl[59])(@this, pResource, pDesc1Ptr, ppRTView1Ptr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView1(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc1* pDesc1, ID3D11RenderTargetView1** ppRTView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, int>)@this->LpVtbl[59])(@this, pResourcePtr, pDesc1, ppRTView1);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView1(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc1* pDesc1, ref ID3D11RenderTargetView1* ppRTView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (ID3D11RenderTargetView1** ppRTView1Ptr = &ppRTView1)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, int>)@this->LpVtbl[59])(@this, pResourcePtr, pDesc1, ppRTView1Ptr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView1(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc1 pDesc1, ID3D11RenderTargetView1** ppRTView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (RenderTargetViewDesc1* pDesc1Ptr = &pDesc1)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, int>)@this->LpVtbl[59])(@this, pResourcePtr, pDesc1Ptr, ppRTView1);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView1(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc1 pDesc1, ref ID3D11RenderTargetView1* ppRTView1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Resource* pResourcePtr = &pResource)
            {
                fixed (RenderTargetViewDesc1* pDesc1Ptr = &pDesc1)
                {
                    fixed (ID3D11RenderTargetView1** ppRTView1Ptr = &ppRTView1)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, RenderTargetViewDesc1*, ID3D11RenderTargetView1**, int>)@this->LpVtbl[59])(@this, pResourcePtr, pDesc1Ptr, ppRTView1Ptr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateQuery1([Flow(Silk.NET.Core.Native.FlowDirection.In)] QueryDesc1* pQueryDesc1, ID3D11Query1** ppQuery1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc1*, ID3D11Query1**, int>)@this->LpVtbl[60])(@this, pQueryDesc1, ppQuery1);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateQuery1([Flow(Silk.NET.Core.Native.FlowDirection.In)] QueryDesc1* pQueryDesc1, ref ID3D11Query1* ppQuery1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11Query1** ppQuery1Ptr = &ppQuery1)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc1*, ID3D11Query1**, int>)@this->LpVtbl[60])(@this, pQueryDesc1, ppQuery1Ptr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateQuery1([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly QueryDesc1 pQueryDesc1, ID3D11Query1** ppQuery1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (QueryDesc1* pQueryDesc1Ptr = &pQueryDesc1)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc1*, ID3D11Query1**, int>)@this->LpVtbl[60])(@this, pQueryDesc1Ptr, ppQuery1);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateQuery1([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly QueryDesc1 pQueryDesc1, ref ID3D11Query1* ppQuery1)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (QueryDesc1* pQueryDesc1Ptr = &pQueryDesc1)
            {
                fixed (ID3D11Query1** ppQuery1Ptr = &ppQuery1)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, QueryDesc1*, ID3D11Query1**, int>)@this->LpVtbl[60])(@this, pQueryDesc1Ptr, ppQuery1Ptr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetImmediateContext3(ID3D11DeviceContext3** ppImmediateContext)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11DeviceContext3**, void>)@this->LpVtbl[61])(@this, ppImmediateContext);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetImmediateContext3(ref ID3D11DeviceContext3* ppImmediateContext)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11DeviceContext3** ppImmediateContextPtr = &ppImmediateContext)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11DeviceContext3**, void>)@this->LpVtbl[61])(@this, ppImmediateContextPtr);
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeferredContext3(uint ContextFlags, ID3D11DeviceContext3** ppDeferredContext)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, ID3D11DeviceContext3**, int>)@this->LpVtbl[62])(@this, ContextFlags, ppDeferredContext);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeferredContext3(uint ContextFlags, ref ID3D11DeviceContext3* ppDeferredContext)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (ID3D11DeviceContext3** ppDeferredContextPtr = &ppDeferredContext)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, ID3D11DeviceContext3**, int>)@this->LpVtbl[62])(@this, ContextFlags, ppDeferredContextPtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void WriteToSubresource(ID3D11Resource* pDstResource, uint DstSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Box* pDstBox, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pSrcData, uint SrcRowPitch, uint SrcDepthPitch)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint, Box*, void*, uint, uint, void>)@this->LpVtbl[63])(@this, pDstResource, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void WriteToSubresource<T0>(ID3D11Resource* pDstResource, uint DstSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Box* pDstBox, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pSrcData, uint SrcRowPitch, uint SrcDepthPitch) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (void* pSrcDataPtr = &pSrcData)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint, Box*, void*, uint, uint, void>)@this->LpVtbl[63])(@this, pDstResource, DstSubresource, pDstBox, pSrcDataPtr, SrcRowPitch, SrcDepthPitch);
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void WriteToSubresource(ID3D11Resource* pDstResource, uint DstSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Box pDstBox, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pSrcData, uint SrcRowPitch, uint SrcDepthPitch)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (Box* pDstBoxPtr = &pDstBox)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint, Box*, void*, uint, uint, void>)@this->LpVtbl[63])(@this, pDstResource, DstSubresource, pDstBoxPtr, pSrcData, SrcRowPitch, SrcDepthPitch);
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void WriteToSubresource<T0>(ID3D11Resource* pDstResource, uint DstSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Box pDstBox, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pSrcData, uint SrcRowPitch, uint SrcDepthPitch) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (Box* pDstBoxPtr = &pDstBox)
            {
                fixed (void* pSrcDataPtr = &pSrcData)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint, Box*, void*, uint, uint, void>)@this->LpVtbl[63])(@this, pDstResource, DstSubresource, pDstBoxPtr, pSrcDataPtr, SrcRowPitch, SrcDepthPitch);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void WriteToSubresource(ref ID3D11Resource pDstResource, uint DstSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Box* pDstBox, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pSrcData, uint SrcRowPitch, uint SrcDepthPitch)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pDstResourcePtr = &pDstResource)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint, Box*, void*, uint, uint, void>)@this->LpVtbl[63])(@this, pDstResourcePtr, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void WriteToSubresource<T0>(ref ID3D11Resource pDstResource, uint DstSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Box* pDstBox, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pSrcData, uint SrcRowPitch, uint SrcDepthPitch) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pDstResourcePtr = &pDstResource)
            {
                fixed (void* pSrcDataPtr = &pSrcData)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint, Box*, void*, uint, uint, void>)@this->LpVtbl[63])(@this, pDstResourcePtr, DstSubresource, pDstBox, pSrcDataPtr, SrcRowPitch, SrcDepthPitch);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void WriteToSubresource(ref ID3D11Resource pDstResource, uint DstSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Box pDstBox, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pSrcData, uint SrcRowPitch, uint SrcDepthPitch)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pDstResourcePtr = &pDstResource)
            {
                fixed (Box* pDstBoxPtr = &pDstBox)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint, Box*, void*, uint, uint, void>)@this->LpVtbl[63])(@this, pDstResourcePtr, DstSubresource, pDstBoxPtr, pSrcData, SrcRowPitch, SrcDepthPitch);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly void WriteToSubresource<T0>(ref ID3D11Resource pDstResource, uint DstSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Box pDstBox, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pSrcData, uint SrcRowPitch, uint SrcDepthPitch) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pDstResourcePtr = &pDstResource)
            {
                fixed (Box* pDstBoxPtr = &pDstBox)
                {
                    fixed (void* pSrcDataPtr = &pSrcData)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ID3D11Resource*, uint, Box*, void*, uint, uint, void>)@this->LpVtbl[63])(@this, pDstResourcePtr, DstSubresource, pDstBoxPtr, pSrcDataPtr, SrcRowPitch, SrcDepthPitch);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void ReadFromSubresource(void* pDstData, uint DstRowPitch, uint DstDepthPitch, ID3D11Resource* pSrcResource, uint SrcSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Box* pSrcBox)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)@this->LpVtbl[64])(@this, pDstData, DstRowPitch, DstDepthPitch, pSrcResource, SrcSubresource, pSrcBox);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void ReadFromSubresource(void* pDstData, uint DstRowPitch, uint DstDepthPitch, ID3D11Resource* pSrcResource, uint SrcSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Box pSrcBox)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (Box* pSrcBoxPtr = &pSrcBox)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)@this->LpVtbl[64])(@this, pDstData, DstRowPitch, DstDepthPitch, pSrcResource, SrcSubresource, pSrcBoxPtr);
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void ReadFromSubresource(void* pDstData, uint DstRowPitch, uint DstDepthPitch, ref ID3D11Resource pSrcResource, uint SrcSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Box* pSrcBox)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pSrcResourcePtr = &pSrcResource)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)@this->LpVtbl[64])(@this, pDstData, DstRowPitch, DstDepthPitch, pSrcResourcePtr, SrcSubresource, pSrcBox);
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void ReadFromSubresource(void* pDstData, uint DstRowPitch, uint DstDepthPitch, ref ID3D11Resource pSrcResource, uint SrcSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Box pSrcBox)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (ID3D11Resource* pSrcResourcePtr = &pSrcResource)
            {
                fixed (Box* pSrcBoxPtr = &pSrcBox)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)@this->LpVtbl[64])(@this, pDstData, DstRowPitch, DstDepthPitch, pSrcResourcePtr, SrcSubresource, pSrcBoxPtr);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void ReadFromSubresource<T0>(ref T0 pDstData, uint DstRowPitch, uint DstDepthPitch, ID3D11Resource* pSrcResource, uint SrcSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Box* pSrcBox) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (void* pDstDataPtr = &pDstData)
            {
                ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)@this->LpVtbl[64])(@this, pDstDataPtr, DstRowPitch, DstDepthPitch, pSrcResource, SrcSubresource, pSrcBox);
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void ReadFromSubresource<T0>(ref T0 pDstData, uint DstRowPitch, uint DstDepthPitch, ID3D11Resource* pSrcResource, uint SrcSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Box pSrcBox) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (void* pDstDataPtr = &pDstData)
            {
                fixed (Box* pSrcBoxPtr = &pSrcBox)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)@this->LpVtbl[64])(@this, pDstDataPtr, DstRowPitch, DstDepthPitch, pSrcResource, SrcSubresource, pSrcBoxPtr);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void ReadFromSubresource<T0>(ref T0 pDstData, uint DstRowPitch, uint DstDepthPitch, ref ID3D11Resource pSrcResource, uint SrcSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Box* pSrcBox) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (void* pDstDataPtr = &pDstData)
            {
                fixed (ID3D11Resource* pSrcResourcePtr = &pSrcResource)
                {
                    ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)@this->LpVtbl[64])(@this, pDstDataPtr, DstRowPitch, DstDepthPitch, pSrcResourcePtr, SrcSubresource, pSrcBox);
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly void ReadFromSubresource<T0>(ref T0 pDstData, uint DstRowPitch, uint DstDepthPitch, ref ID3D11Resource pSrcResource, uint SrcSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Box pSrcBox) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            fixed (void* pDstDataPtr = &pDstData)
            {
                fixed (ID3D11Resource* pSrcResourcePtr = &pSrcResource)
                {
                    fixed (Box* pSrcBoxPtr = &pSrcBox)
                    {
                        ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, uint, uint, ID3D11Resource*, uint, Box*, void>)@this->LpVtbl[64])(@this, pDstDataPtr, DstRowPitch, DstDepthPitch, pSrcResourcePtr, SrcSubresource, pSrcBoxPtr);
                    }
                }
            }
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int RegisterDeviceRemovedEvent(void* hEvent, uint* pdwCookie)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, uint*, int>)@this->LpVtbl[65])(@this, hEvent, pdwCookie);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int RegisterDeviceRemovedEvent(void* hEvent, ref uint pdwCookie)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (uint* pdwCookiePtr = &pdwCookie)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, uint*, int>)@this->LpVtbl[65])(@this, hEvent, pdwCookiePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int RegisterDeviceRemovedEvent<T0>(ref T0 hEvent, uint* pdwCookie) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* hEventPtr = &hEvent)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, uint*, int>)@this->LpVtbl[65])(@this, hEventPtr, pdwCookie);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int RegisterDeviceRemovedEvent<T0>(ref T0 hEvent, ref uint pdwCookie) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* hEventPtr = &hEvent)
            {
                fixed (uint* pdwCookiePtr = &pdwCookie)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, uint*, int>)@this->LpVtbl[65])(@this, hEventPtr, pdwCookiePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly void UnregisterDeviceRemoved(uint dwCookie)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            ((delegate* unmanaged[Stdcall]<ID3D11Device5*, uint, void>)@this->LpVtbl[66])(@this, dwCookie);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedFence(void* hFence, Guid* ReturnedInterface, void** ppFence)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[67])(@this, hFence, ReturnedInterface, ppFence);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedFence(void* hFence, Guid* ReturnedInterface, ref void* ppFence)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void** ppFencePtr = &ppFence)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[67])(@this, hFence, ReturnedInterface, ppFencePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedFence(void* hFence, ref Guid ReturnedInterface, void** ppFence)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[67])(@this, hFence, ReturnedInterfacePtr, ppFence);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedFence(void* hFence, ref Guid ReturnedInterface, ref void* ppFence)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
            {
                fixed (void** ppFencePtr = &ppFence)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[67])(@this, hFence, ReturnedInterfacePtr, ppFencePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedFence<T0>(ref T0 hFence, Guid* ReturnedInterface, void** ppFence) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* hFencePtr = &hFence)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[67])(@this, hFencePtr, ReturnedInterface, ppFence);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedFence<T0>(ref T0 hFence, Guid* ReturnedInterface, ref void* ppFence) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* hFencePtr = &hFence)
            {
                fixed (void** ppFencePtr = &ppFence)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[67])(@this, hFencePtr, ReturnedInterface, ppFencePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedFence<T0>(ref T0 hFence, ref Guid ReturnedInterface, void** ppFence) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* hFencePtr = &hFence)
            {
                fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[67])(@this, hFencePtr, ReturnedInterfacePtr, ppFence);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedFence<T0>(ref T0 hFence, ref Guid ReturnedInterface, ref void* ppFence) where T0 : unmanaged
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void* hFencePtr = &hFence)
            {
                fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
                {
                    fixed (void** ppFencePtr = &ppFence)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, void*, Guid*, void**, int>)@this->LpVtbl[67])(@this, hFencePtr, ReturnedInterfacePtr, ppFencePtr);
                    }
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateFence(ulong InitialValue, FenceFlag Flags, Guid* ReturnedInterface, void** ppFence)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ulong, FenceFlag, Guid*, void**, int>)@this->LpVtbl[68])(@this, InitialValue, Flags, ReturnedInterface, ppFence);
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateFence(ulong InitialValue, FenceFlag Flags, Guid* ReturnedInterface, ref void* ppFence)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (void** ppFencePtr = &ppFence)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ulong, FenceFlag, Guid*, void**, int>)@this->LpVtbl[68])(@this, InitialValue, Flags, ReturnedInterface, ppFencePtr);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateFence(ulong InitialValue, FenceFlag Flags, ref Guid ReturnedInterface, void** ppFence)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ulong, FenceFlag, Guid*, void**, int>)@this->LpVtbl[68])(@this, InitialValue, Flags, ReturnedInterfacePtr, ppFence);
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateFence(ulong InitialValue, FenceFlag Flags, ref Guid ReturnedInterface, ref void* ppFence)
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            int ret = default;
            fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
            {
                fixed (void** ppFencePtr = &ppFence)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device5*, ulong, FenceFlag, Guid*, void**, int>)@this->LpVtbl[68])(@this, InitialValue, Flags, ReturnedInterfacePtr, ppFencePtr);
                }
            }
            return ret;
        }

        /// <summary>To be documented.</summary>
        public readonly int QueryInterface<TI0>(out ComPtr<TI0> ppvObject) where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            ppvObject = default;
            return @this->QueryInterface(SilkMarshal.GuidPtrOf<TI0>(), (void**) ppvObject.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBuffer<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] BufferDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppBuffer) where TI0 : unmanaged, IComVtbl<ID3D11Buffer>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateBuffer(pDesc, pInitialData, (ID3D11Buffer**) ppBuffer.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBuffer<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] BufferDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppBuffer) where TI0 : unmanaged, IComVtbl<ID3D11Buffer>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateBuffer(pDesc, in pInitialData, (ID3D11Buffer**) ppBuffer.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBuffer<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BufferDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppBuffer) where TI0 : unmanaged, IComVtbl<ID3D11Buffer>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateBuffer(in pDesc, pInitialData, (ID3D11Buffer**) ppBuffer.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateBuffer<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BufferDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppBuffer) where TI0 : unmanaged, IComVtbl<ID3D11Buffer>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateBuffer(in pDesc, in pInitialData, (ID3D11Buffer**) ppBuffer.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture1D<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture1DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppTexture1D) where TI0 : unmanaged, IComVtbl<ID3D11Texture1D>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture1D(pDesc, pInitialData, (ID3D11Texture1D**) ppTexture1D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture1D<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture1DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppTexture1D) where TI0 : unmanaged, IComVtbl<ID3D11Texture1D>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture1D(pDesc, in pInitialData, (ID3D11Texture1D**) ppTexture1D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture1D<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture1DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppTexture1D) where TI0 : unmanaged, IComVtbl<ID3D11Texture1D>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture1D(in pDesc, pInitialData, (ID3D11Texture1D**) ppTexture1D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateTexture1D<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture1DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppTexture1D) where TI0 : unmanaged, IComVtbl<ID3D11Texture1D>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture1D(in pDesc, in pInitialData, (ID3D11Texture1D**) ppTexture1D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppTexture2D) where TI0 : unmanaged, IComVtbl<ID3D11Texture2D>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture2D(pDesc, pInitialData, (ID3D11Texture2D**) ppTexture2D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppTexture2D) where TI0 : unmanaged, IComVtbl<ID3D11Texture2D>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture2D(pDesc, in pInitialData, (ID3D11Texture2D**) ppTexture2D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppTexture2D) where TI0 : unmanaged, IComVtbl<ID3D11Texture2D>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture2D(in pDesc, pInitialData, (ID3D11Texture2D**) ppTexture2D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateTexture2D<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppTexture2D) where TI0 : unmanaged, IComVtbl<ID3D11Texture2D>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture2D(in pDesc, in pInitialData, (ID3D11Texture2D**) ppTexture2D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppTexture3D) where TI0 : unmanaged, IComVtbl<ID3D11Texture3D>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture3D(pDesc, pInitialData, (ID3D11Texture3D**) ppTexture3D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppTexture3D) where TI0 : unmanaged, IComVtbl<ID3D11Texture3D>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture3D(pDesc, in pInitialData, (ID3D11Texture3D**) ppTexture3D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppTexture3D) where TI0 : unmanaged, IComVtbl<ID3D11Texture3D>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture3D(in pDesc, pInitialData, (ID3D11Texture3D**) ppTexture3D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateTexture3D<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppTexture3D) where TI0 : unmanaged, IComVtbl<ID3D11Texture3D>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture3D(in pDesc, in pInitialData, (ID3D11Texture3D**) ppTexture3D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView<TI0, TI1>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc* pDesc, ref ComPtr<TI1> ppSRView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11ShaderResourceView>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateShaderResourceView((ID3D11Resource*) pResource.Handle, pDesc, (ID3D11ShaderResourceView**) ppSRView.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView<TI0>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc* pDesc, ref ID3D11ShaderResourceView* ppSRView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateShaderResourceView((ID3D11Resource*) pResource.Handle, pDesc, ref ppSRView);
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateShaderResourceView<TI0, TI1>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc pDesc, ref ComPtr<TI1> ppSRView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11ShaderResourceView>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateShaderResourceView((ID3D11Resource*) pResource.Handle, in pDesc, (ID3D11ShaderResourceView**) ppSRView.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView<TI0>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc pDesc, ref ID3D11ShaderResourceView* ppSRView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateShaderResourceView((ID3D11Resource*) pResource.Handle, in pDesc, ref ppSRView);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView<TI0>(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc* pDesc, ref ComPtr<TI0> ppSRView) where TI0 : unmanaged, IComVtbl<ID3D11ShaderResourceView>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateShaderResourceView(ref pResource, pDesc, (ID3D11ShaderResourceView**) ppSRView.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateShaderResourceView<TI0>(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc pDesc, ref ComPtr<TI0> ppSRView) where TI0 : unmanaged, IComVtbl<ID3D11ShaderResourceView>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateShaderResourceView(ref pResource, in pDesc, (ID3D11ShaderResourceView**) ppSRView.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView<TI0, TI1>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc* pDesc, ref ComPtr<TI1> ppUAView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11UnorderedAccessView>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateUnorderedAccessView((ID3D11Resource*) pResource.Handle, pDesc, (ID3D11UnorderedAccessView**) ppUAView.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView<TI0>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc* pDesc, ref ID3D11UnorderedAccessView* ppUAView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateUnorderedAccessView((ID3D11Resource*) pResource.Handle, pDesc, ref ppUAView);
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateUnorderedAccessView<TI0, TI1>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc pDesc, ref ComPtr<TI1> ppUAView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11UnorderedAccessView>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateUnorderedAccessView((ID3D11Resource*) pResource.Handle, in pDesc, (ID3D11UnorderedAccessView**) ppUAView.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView<TI0>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc pDesc, ref ID3D11UnorderedAccessView* ppUAView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateUnorderedAccessView((ID3D11Resource*) pResource.Handle, in pDesc, ref ppUAView);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView<TI0>(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc* pDesc, ref ComPtr<TI0> ppUAView) where TI0 : unmanaged, IComVtbl<ID3D11UnorderedAccessView>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateUnorderedAccessView(ref pResource, pDesc, (ID3D11UnorderedAccessView**) ppUAView.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateUnorderedAccessView<TI0>(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc pDesc, ref ComPtr<TI0> ppUAView) where TI0 : unmanaged, IComVtbl<ID3D11UnorderedAccessView>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateUnorderedAccessView(ref pResource, in pDesc, (ID3D11UnorderedAccessView**) ppUAView.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView<TI0, TI1>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc* pDesc, ref ComPtr<TI1> ppRTView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11RenderTargetView>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRenderTargetView((ID3D11Resource*) pResource.Handle, pDesc, (ID3D11RenderTargetView**) ppRTView.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView<TI0>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc* pDesc, ref ID3D11RenderTargetView* ppRTView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRenderTargetView((ID3D11Resource*) pResource.Handle, pDesc, ref ppRTView);
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateRenderTargetView<TI0, TI1>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc pDesc, ref ComPtr<TI1> ppRTView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11RenderTargetView>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRenderTargetView((ID3D11Resource*) pResource.Handle, in pDesc, (ID3D11RenderTargetView**) ppRTView.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView<TI0>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc pDesc, ref ID3D11RenderTargetView* ppRTView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRenderTargetView((ID3D11Resource*) pResource.Handle, in pDesc, ref ppRTView);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView<TI0>(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc* pDesc, ref ComPtr<TI0> ppRTView) where TI0 : unmanaged, IComVtbl<ID3D11RenderTargetView>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRenderTargetView(ref pResource, pDesc, (ID3D11RenderTargetView**) ppRTView.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateRenderTargetView<TI0>(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc pDesc, ref ComPtr<TI0> ppRTView) where TI0 : unmanaged, IComVtbl<ID3D11RenderTargetView>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRenderTargetView(ref pResource, in pDesc, (ID3D11RenderTargetView**) ppRTView.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDepthStencilView<TI0, TI1>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilViewDesc* pDesc, ref ComPtr<TI1> ppDepthStencilView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11DepthStencilView>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDepthStencilView((ID3D11Resource*) pResource.Handle, pDesc, (ID3D11DepthStencilView**) ppDepthStencilView.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDepthStencilView<TI0>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilViewDesc* pDesc, ref ID3D11DepthStencilView* ppDepthStencilView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDepthStencilView((ID3D11Resource*) pResource.Handle, pDesc, ref ppDepthStencilView);
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateDepthStencilView<TI0, TI1>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilViewDesc pDesc, ref ComPtr<TI1> ppDepthStencilView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11DepthStencilView>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDepthStencilView((ID3D11Resource*) pResource.Handle, in pDesc, (ID3D11DepthStencilView**) ppDepthStencilView.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDepthStencilView<TI0>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilViewDesc pDesc, ref ID3D11DepthStencilView* ppDepthStencilView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDepthStencilView((ID3D11Resource*) pResource.Handle, in pDesc, ref ppDepthStencilView);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDepthStencilView<TI0>(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilViewDesc* pDesc, ref ComPtr<TI0> ppDepthStencilView) where TI0 : unmanaged, IComVtbl<ID3D11DepthStencilView>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDepthStencilView(ref pResource, pDesc, (ID3D11DepthStencilView**) ppDepthStencilView.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateDepthStencilView<TI0>(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilViewDesc pDesc, ref ComPtr<TI0> ppDepthStencilView) where TI0 : unmanaged, IComVtbl<ID3D11DepthStencilView>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDepthStencilView(ref pResource, in pDesc, (ID3D11DepthStencilView**) ppDepthStencilView.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateInputLayout<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] InputElementDesc* pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ComPtr<TI0> ppInputLayout) where TI0 : unmanaged, IComVtbl<ID3D11InputLayout>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateInputLayout(pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, (ID3D11InputLayout**) ppInputLayout.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateInputLayout<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] InputElementDesc* pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ComPtr<TI0> ppInputLayout) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11InputLayout>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateInputLayout(pInputElementDescs, NumElements, in pShaderBytecodeWithInputSignature, BytecodeLength, (ID3D11InputLayout**) ppInputLayout.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateInputLayout<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly InputElementDesc pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ComPtr<TI0> ppInputLayout) where TI0 : unmanaged, IComVtbl<ID3D11InputLayout>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateInputLayout(in pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, (ID3D11InputLayout**) ppInputLayout.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateInputLayout<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly InputElementDesc pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ComPtr<TI0> ppInputLayout) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11InputLayout>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateInputLayout(in pInputElementDescs, NumElements, in pShaderBytecodeWithInputSignature, BytecodeLength, (ID3D11InputLayout**) ppInputLayout.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateVertexShader<TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppVertexShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11VertexShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateVertexShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11VertexShader**) ppVertexShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateVertexShader<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11VertexShader* ppVertexShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateVertexShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppVertexShader);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateVertexShader<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppVertexShader) where TI0 : unmanaged, IComVtbl<ID3D11VertexShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateVertexShader(pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11VertexShader**) ppVertexShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateVertexShader<T0, TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppVertexShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11VertexShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateVertexShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11VertexShader**) ppVertexShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateVertexShader<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11VertexShader* ppVertexShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateVertexShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppVertexShader);
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateVertexShader<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppVertexShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11VertexShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateVertexShader(in pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11VertexShader**) ppVertexShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShader<TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShader<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShader<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShader(pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateGeometryShader<T0, TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShader<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateGeometryShader<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShader(in pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateGeometryShaderWithStreamOutput<T0, TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateGeometryShaderWithStreamOutput<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreatePixelShader<TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppPixelShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11PixelShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreatePixelShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11PixelShader**) ppPixelShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreatePixelShader<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11PixelShader* ppPixelShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreatePixelShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppPixelShader);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreatePixelShader<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppPixelShader) where TI0 : unmanaged, IComVtbl<ID3D11PixelShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreatePixelShader(pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11PixelShader**) ppPixelShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreatePixelShader<T0, TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppPixelShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11PixelShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreatePixelShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11PixelShader**) ppPixelShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreatePixelShader<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11PixelShader* ppPixelShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreatePixelShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppPixelShader);
        }

        /// <summary>To be documented.</summary>
        public readonly int CreatePixelShader<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppPixelShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11PixelShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreatePixelShader(in pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11PixelShader**) ppPixelShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateHullShader<TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppHullShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11HullShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateHullShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11HullShader**) ppHullShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateHullShader<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11HullShader* ppHullShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateHullShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppHullShader);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateHullShader<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppHullShader) where TI0 : unmanaged, IComVtbl<ID3D11HullShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateHullShader(pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11HullShader**) ppHullShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateHullShader<T0, TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppHullShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11HullShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateHullShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11HullShader**) ppHullShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateHullShader<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11HullShader* ppHullShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateHullShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppHullShader);
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateHullShader<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppHullShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11HullShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateHullShader(in pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11HullShader**) ppHullShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDomainShader<TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppDomainShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11DomainShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDomainShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11DomainShader**) ppDomainShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDomainShader<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11DomainShader* ppDomainShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDomainShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppDomainShader);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDomainShader<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppDomainShader) where TI0 : unmanaged, IComVtbl<ID3D11DomainShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDomainShader(pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11DomainShader**) ppDomainShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateDomainShader<T0, TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppDomainShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11DomainShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDomainShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11DomainShader**) ppDomainShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDomainShader<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11DomainShader* ppDomainShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDomainShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppDomainShader);
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateDomainShader<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppDomainShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11DomainShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDomainShader(in pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11DomainShader**) ppDomainShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateComputeShader<TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppComputeShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11ComputeShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateComputeShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11ComputeShader**) ppComputeShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateComputeShader<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateComputeShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppComputeShader);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateComputeShader<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppComputeShader) where TI0 : unmanaged, IComVtbl<ID3D11ComputeShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateComputeShader(pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11ComputeShader**) ppComputeShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateComputeShader<T0, TI0, TI1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppComputeShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11ComputeShader>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateComputeShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11ComputeShader**) ppComputeShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateComputeShader<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateComputeShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppComputeShader);
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateComputeShader<T0, TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppComputeShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ComputeShader>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateComputeShader(in pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11ComputeShader**) ppComputeShader.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateClassLinkage<TI0>(ref ComPtr<TI0> ppLinkage) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateClassLinkage((ID3D11ClassLinkage**) ppLinkage.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBlendState<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] BlendDesc* pBlendStateDesc, ref ComPtr<TI0> ppBlendState) where TI0 : unmanaged, IComVtbl<ID3D11BlendState>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateBlendState(pBlendStateDesc, (ID3D11BlendState**) ppBlendState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateBlendState<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BlendDesc pBlendStateDesc, ref ComPtr<TI0> ppBlendState) where TI0 : unmanaged, IComVtbl<ID3D11BlendState>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateBlendState(in pBlendStateDesc, (ID3D11BlendState**) ppBlendState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDepthStencilState<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilDesc* pDepthStencilDesc, ref ComPtr<TI0> ppDepthStencilState) where TI0 : unmanaged, IComVtbl<ID3D11DepthStencilState>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDepthStencilState(pDepthStencilDesc, (ID3D11DepthStencilState**) ppDepthStencilState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateDepthStencilState<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilDesc pDepthStencilDesc, ref ComPtr<TI0> ppDepthStencilState) where TI0 : unmanaged, IComVtbl<ID3D11DepthStencilState>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDepthStencilState(in pDepthStencilDesc, (ID3D11DepthStencilState**) ppDepthStencilState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRasterizerState<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] RasterizerDesc* pRasterizerDesc, ref ComPtr<TI0> ppRasterizerState) where TI0 : unmanaged, IComVtbl<ID3D11RasterizerState>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRasterizerState(pRasterizerDesc, (ID3D11RasterizerState**) ppRasterizerState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateRasterizerState<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RasterizerDesc pRasterizerDesc, ref ComPtr<TI0> ppRasterizerState) where TI0 : unmanaged, IComVtbl<ID3D11RasterizerState>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRasterizerState(in pRasterizerDesc, (ID3D11RasterizerState**) ppRasterizerState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateSamplerState<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] SamplerDesc* pSamplerDesc, ref ComPtr<TI0> ppSamplerState) where TI0 : unmanaged, IComVtbl<ID3D11SamplerState>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateSamplerState(pSamplerDesc, (ID3D11SamplerState**) ppSamplerState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateSamplerState<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SamplerDesc pSamplerDesc, ref ComPtr<TI0> ppSamplerState) where TI0 : unmanaged, IComVtbl<ID3D11SamplerState>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateSamplerState(in pSamplerDesc, (ID3D11SamplerState**) ppSamplerState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateQuery<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] QueryDesc* pQueryDesc, ref ComPtr<TI0> ppQuery) where TI0 : unmanaged, IComVtbl<ID3D11Query>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateQuery(pQueryDesc, (ID3D11Query**) ppQuery.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateQuery<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly QueryDesc pQueryDesc, ref ComPtr<TI0> ppQuery) where TI0 : unmanaged, IComVtbl<ID3D11Query>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateQuery(in pQueryDesc, (ID3D11Query**) ppQuery.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreatePredicate<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] QueryDesc* pPredicateDesc, ref ComPtr<TI0> ppPredicate) where TI0 : unmanaged, IComVtbl<ID3D11Predicate>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreatePredicate(pPredicateDesc, (ID3D11Predicate**) ppPredicate.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreatePredicate<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly QueryDesc pPredicateDesc, ref ComPtr<TI0> ppPredicate) where TI0 : unmanaged, IComVtbl<ID3D11Predicate>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreatePredicate(in pPredicateDesc, (ID3D11Predicate**) ppPredicate.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateCounter<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pCounterDesc, ref ComPtr<TI0> ppCounter) where TI0 : unmanaged, IComVtbl<ID3D11Counter>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateCounter(pCounterDesc, (ID3D11Counter**) ppCounter.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateCounter<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pCounterDesc, ref ComPtr<TI0> ppCounter) where TI0 : unmanaged, IComVtbl<ID3D11Counter>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateCounter(in pCounterDesc, (ID3D11Counter**) ppCounter.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateDeferredContext<TI0>(uint ContextFlags, ref ComPtr<TI0> ppDeferredContext) where TI0 : unmanaged, IComVtbl<ID3D11DeviceContext>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDeferredContext(ContextFlags, (ID3D11DeviceContext**) ppDeferredContext.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource<TI0>(void* hResource, out ComPtr<TI0> ppResource) where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            ppResource = default;
            return @this->OpenSharedResource(hResource, SilkMarshal.GuidPtrOf<TI0>(), (void**) ppResource.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int OpenSharedResource<T0, TI0>(ref T0 hResource, out ComPtr<TI0> ppResource) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            ppResource = default;
            return @this->OpenSharedResource(ref hResource, SilkMarshal.GuidPtrOf<TI0>(), (void**) ppResource.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int SetPrivateDataInterface<TI0>(Guid* guid, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ComPtr<TI0> pData) where TI0 : unmanaged, IComVtbl<Silk.NET.Core.Native.IUnknown>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->SetPrivateDataInterface(guid, (Silk.NET.Core.Native.IUnknown*) pData.Handle);
        }

        /// <summary>To be documented.</summary>
        public readonly int SetPrivateDataInterface<TI0>(ref Guid guid, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ComPtr<TI0> pData) where TI0 : unmanaged, IComVtbl<Silk.NET.Core.Native.IUnknown>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->SetPrivateDataInterface(ref guid, (Silk.NET.Core.Native.IUnknown*) pData.Handle);
        }

        /// <summary>To be documented.</summary>
        public readonly void GetImmediateContext<TI0>(ref ComPtr<TI0> ppImmediateContext) where TI0 : unmanaged, IComVtbl<ID3D11DeviceContext>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetImmediateContext((ID3D11DeviceContext**) ppImmediateContext.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly void GetImmediateContext1<TI0>(ref ComPtr<TI0> ppImmediateContext) where TI0 : unmanaged, IComVtbl<ID3D11DeviceContext1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetImmediateContext1((ID3D11DeviceContext1**) ppImmediateContext.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateDeferredContext1<TI0>(uint ContextFlags, ref ComPtr<TI0> ppDeferredContext) where TI0 : unmanaged, IComVtbl<ID3D11DeviceContext1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDeferredContext1(ContextFlags, (ID3D11DeviceContext1**) ppDeferredContext.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateBlendState1<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] BlendDesc1* pBlendStateDesc, ref ComPtr<TI0> ppBlendState) where TI0 : unmanaged, IComVtbl<ID3D11BlendState1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateBlendState1(pBlendStateDesc, (ID3D11BlendState1**) ppBlendState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateBlendState1<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BlendDesc1 pBlendStateDesc, ref ComPtr<TI0> ppBlendState) where TI0 : unmanaged, IComVtbl<ID3D11BlendState1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateBlendState1(in pBlendStateDesc, (ID3D11BlendState1**) ppBlendState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRasterizerState1<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] RasterizerDesc1* pRasterizerDesc, ref ComPtr<TI0> ppRasterizerState) where TI0 : unmanaged, IComVtbl<ID3D11RasterizerState1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRasterizerState1(pRasterizerDesc, (ID3D11RasterizerState1**) ppRasterizerState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateRasterizerState1<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RasterizerDesc1 pRasterizerDesc, ref ComPtr<TI0> ppRasterizerState) where TI0 : unmanaged, IComVtbl<ID3D11RasterizerState1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRasterizerState1(in pRasterizerDesc, (ID3D11RasterizerState1**) ppRasterizerState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState<TI0>(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ComPtr<TI0> ppContextState) where TI0 : unmanaged, IComVtbl<ID3DDeviceContextState>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDeviceContextState(Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, (ID3DDeviceContextState**) ppContextState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState<TI0>(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ComPtr<TI0> ppContextState) where TI0 : unmanaged, IComVtbl<ID3DDeviceContextState>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDeviceContextState(Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, ref pChosenFeatureLevel, (ID3DDeviceContextState**) ppContextState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState<TI0>(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ComPtr<TI0> ppContextState) where TI0 : unmanaged, IComVtbl<ID3DDeviceContextState>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDeviceContextState(Flags, pFeatureLevels, FeatureLevels, SDKVersion, ref EmulatedInterface, pChosenFeatureLevel, (ID3DDeviceContextState**) ppContextState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState<TI0>(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ComPtr<TI0> ppContextState) where TI0 : unmanaged, IComVtbl<ID3DDeviceContextState>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDeviceContextState(Flags, pFeatureLevels, FeatureLevels, SDKVersion, ref EmulatedInterface, ref pChosenFeatureLevel, (ID3DDeviceContextState**) ppContextState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState<TI0>(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ComPtr<TI0> ppContextState) where TI0 : unmanaged, IComVtbl<ID3DDeviceContextState>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDeviceContextState(Flags, in pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, (ID3DDeviceContextState**) ppContextState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState<TI0>(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ComPtr<TI0> ppContextState) where TI0 : unmanaged, IComVtbl<ID3DDeviceContextState>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDeviceContextState(Flags, in pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, ref pChosenFeatureLevel, (ID3DDeviceContextState**) ppContextState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateDeviceContextState<TI0>(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ComPtr<TI0> ppContextState) where TI0 : unmanaged, IComVtbl<ID3DDeviceContextState>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDeviceContextState(Flags, in pFeatureLevels, FeatureLevels, SDKVersion, ref EmulatedInterface, pChosenFeatureLevel, (ID3DDeviceContextState**) ppContextState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateDeviceContextState<TI0>(uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ComPtr<TI0> ppContextState) where TI0 : unmanaged, IComVtbl<ID3DDeviceContextState>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDeviceContextState(Flags, in pFeatureLevels, FeatureLevels, SDKVersion, ref EmulatedInterface, ref pChosenFeatureLevel, (ID3DDeviceContextState**) ppContextState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResource1<TI0>(void* hResource, out ComPtr<TI0> ppResource) where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            ppResource = default;
            return @this->OpenSharedResource1(hResource, SilkMarshal.GuidPtrOf<TI0>(), (void**) ppResource.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int OpenSharedResource1<T0, TI0>(ref T0 hResource, out ComPtr<TI0> ppResource) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            ppResource = default;
            return @this->OpenSharedResource1(ref hResource, SilkMarshal.GuidPtrOf<TI0>(), (void**) ppResource.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedResourceByName<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] char* lpName, uint dwDesiredAccess, out ComPtr<TI0> ppResource) where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            ppResource = default;
            return @this->OpenSharedResourceByName(lpName, dwDesiredAccess, SilkMarshal.GuidPtrOf<TI0>(), (void**) ppResource.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int OpenSharedResourceByName<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly char lpName, uint dwDesiredAccess, out ComPtr<TI0> ppResource) where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            ppResource = default;
            return @this->OpenSharedResourceByName(in lpName, dwDesiredAccess, SilkMarshal.GuidPtrOf<TI0>(), (void**) ppResource.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int OpenSharedResourceByName<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess, out ComPtr<TI0> ppResource) where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            ppResource = default;
            return @this->OpenSharedResourceByName(lpName, dwDesiredAccess, SilkMarshal.GuidPtrOf<TI0>(), (void**) ppResource.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly void GetImmediateContext2<TI0>(ref ComPtr<TI0> ppImmediateContext) where TI0 : unmanaged, IComVtbl<ID3D11DeviceContext2>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetImmediateContext2((ID3D11DeviceContext2**) ppImmediateContext.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateDeferredContext2<TI0>(uint ContextFlags, ref ComPtr<TI0> ppDeferredContext) where TI0 : unmanaged, IComVtbl<ID3D11DeviceContext2>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDeferredContext2(ContextFlags, (ID3D11DeviceContext2**) ppDeferredContext.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, ref pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, ref pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, ref pNumSubresourceTilings, FirstSubresourceTilingToGet, ref pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, pNumTilesForEntireResource, pPackedMipDesc, ref pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, pNumTilesForEntireResource, pPackedMipDesc, ref pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, ref pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, pNumTilesForEntireResource, pPackedMipDesc, ref pStandardTileShapeForNonPackedMips, ref pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, uint* pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, pNumTilesForEntireResource, pPackedMipDesc, ref pStandardTileShapeForNonPackedMips, ref pNumSubresourceTilings, FirstSubresourceTilingToGet, ref pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, pNumTilesForEntireResource, ref pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, pNumTilesForEntireResource, ref pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, ref pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, pNumTilesForEntireResource, ref pPackedMipDesc, pStandardTileShapeForNonPackedMips, ref pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, pNumTilesForEntireResource, ref pPackedMipDesc, pStandardTileShapeForNonPackedMips, ref pNumSubresourceTilings, FirstSubresourceTilingToGet, ref pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, pNumTilesForEntireResource, ref pPackedMipDesc, ref pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, pNumTilesForEntireResource, ref pPackedMipDesc, ref pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, ref pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, pNumTilesForEntireResource, ref pPackedMipDesc, ref pStandardTileShapeForNonPackedMips, ref pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, uint* pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, pNumTilesForEntireResource, ref pPackedMipDesc, ref pStandardTileShapeForNonPackedMips, ref pNumSubresourceTilings, FirstSubresourceTilingToGet, ref pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, ref pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, ref pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, ref pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, ref pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, ref pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, ref pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, ref pNumSubresourceTilings, FirstSubresourceTilingToGet, ref pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, ref pNumTilesForEntireResource, pPackedMipDesc, ref pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, ref pNumTilesForEntireResource, pPackedMipDesc, ref pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, ref pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, ref pNumTilesForEntireResource, pPackedMipDesc, ref pStandardTileShapeForNonPackedMips, ref pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, ref uint pNumTilesForEntireResource, PackedMipDesc* pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, ref pNumTilesForEntireResource, pPackedMipDesc, ref pStandardTileShapeForNonPackedMips, ref pNumSubresourceTilings, FirstSubresourceTilingToGet, ref pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, ref pNumTilesForEntireResource, ref pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, ref pNumTilesForEntireResource, ref pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, ref pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, ref pNumTilesForEntireResource, ref pPackedMipDesc, pStandardTileShapeForNonPackedMips, ref pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, TileShape* pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, ref pNumTilesForEntireResource, ref pPackedMipDesc, pStandardTileShapeForNonPackedMips, ref pNumSubresourceTilings, FirstSubresourceTilingToGet, ref pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, ref pNumTilesForEntireResource, ref pPackedMipDesc, ref pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, uint* pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, ref pNumTilesForEntireResource, ref pPackedMipDesc, ref pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, ref pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, SubresourceTiling* pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, ref pNumTilesForEntireResource, ref pPackedMipDesc, ref pStandardTileShapeForNonPackedMips, ref pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly void GetResourceTiling<TI0>(ComPtr<TI0> pTiledResource, ref uint pNumTilesForEntireResource, ref PackedMipDesc pPackedMipDesc, ref TileShape pStandardTileShapeForNonPackedMips, ref uint pNumSubresourceTilings, uint FirstSubresourceTilingToGet, ref SubresourceTiling pSubresourceTilingsForNonPackedMips) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetResourceTiling((ID3D11Resource*) pTiledResource.Handle, ref pNumTilesForEntireResource, ref pPackedMipDesc, ref pStandardTileShapeForNonPackedMips, ref pNumSubresourceTilings, FirstSubresourceTilingToGet, ref pSubresourceTilingsForNonPackedMips);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D1<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc1* pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppTexture2D) where TI0 : unmanaged, IComVtbl<ID3D11Texture2D1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture2D1(pDesc1, pInitialData, (ID3D11Texture2D1**) ppTexture2D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D1<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc1* pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppTexture2D) where TI0 : unmanaged, IComVtbl<ID3D11Texture2D1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture2D1(pDesc1, in pInitialData, (ID3D11Texture2D1**) ppTexture2D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture2D1<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc1 pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppTexture2D) where TI0 : unmanaged, IComVtbl<ID3D11Texture2D1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture2D1(in pDesc1, pInitialData, (ID3D11Texture2D1**) ppTexture2D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateTexture2D1<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc1 pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppTexture2D) where TI0 : unmanaged, IComVtbl<ID3D11Texture2D1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture2D1(in pDesc1, in pInitialData, (ID3D11Texture2D1**) ppTexture2D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D1<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc1* pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppTexture3D) where TI0 : unmanaged, IComVtbl<ID3D11Texture3D1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture3D1(pDesc1, pInitialData, (ID3D11Texture3D1**) ppTexture3D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D1<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc1* pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppTexture3D) where TI0 : unmanaged, IComVtbl<ID3D11Texture3D1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture3D1(pDesc1, in pInitialData, (ID3D11Texture3D1**) ppTexture3D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateTexture3D1<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc1 pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppTexture3D) where TI0 : unmanaged, IComVtbl<ID3D11Texture3D1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture3D1(in pDesc1, pInitialData, (ID3D11Texture3D1**) ppTexture3D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateTexture3D1<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc1 pDesc1, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppTexture3D) where TI0 : unmanaged, IComVtbl<ID3D11Texture3D1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateTexture3D1(in pDesc1, in pInitialData, (ID3D11Texture3D1**) ppTexture3D.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRasterizerState2<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] RasterizerDesc2* pRasterizerDesc, ref ComPtr<TI0> ppRasterizerState) where TI0 : unmanaged, IComVtbl<ID3D11RasterizerState2>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRasterizerState2(pRasterizerDesc, (ID3D11RasterizerState2**) ppRasterizerState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateRasterizerState2<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RasterizerDesc2 pRasterizerDesc, ref ComPtr<TI0> ppRasterizerState) where TI0 : unmanaged, IComVtbl<ID3D11RasterizerState2>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRasterizerState2(in pRasterizerDesc, (ID3D11RasterizerState2**) ppRasterizerState.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView1<TI0, TI1>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc1* pDesc1, ref ComPtr<TI1> ppSRView1) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11ShaderResourceView1>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateShaderResourceView1((ID3D11Resource*) pResource.Handle, pDesc1, (ID3D11ShaderResourceView1**) ppSRView1.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView1<TI0>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc1* pDesc1, ref ID3D11ShaderResourceView1* ppSRView1) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateShaderResourceView1((ID3D11Resource*) pResource.Handle, pDesc1, ref ppSRView1);
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateShaderResourceView1<TI0, TI1>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc1 pDesc1, ref ComPtr<TI1> ppSRView1) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11ShaderResourceView1>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateShaderResourceView1((ID3D11Resource*) pResource.Handle, in pDesc1, (ID3D11ShaderResourceView1**) ppSRView1.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView1<TI0>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc1 pDesc1, ref ID3D11ShaderResourceView1* ppSRView1) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateShaderResourceView1((ID3D11Resource*) pResource.Handle, in pDesc1, ref ppSRView1);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateShaderResourceView1<TI0>(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc1* pDesc1, ref ComPtr<TI0> ppSRView1) where TI0 : unmanaged, IComVtbl<ID3D11ShaderResourceView1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateShaderResourceView1(ref pResource, pDesc1, (ID3D11ShaderResourceView1**) ppSRView1.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateShaderResourceView1<TI0>(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc1 pDesc1, ref ComPtr<TI0> ppSRView1) where TI0 : unmanaged, IComVtbl<ID3D11ShaderResourceView1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateShaderResourceView1(ref pResource, in pDesc1, (ID3D11ShaderResourceView1**) ppSRView1.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView1<TI0, TI1>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc1* pDesc1, ref ComPtr<TI1> ppUAView1) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11UnorderedAccessView1>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateUnorderedAccessView1((ID3D11Resource*) pResource.Handle, pDesc1, (ID3D11UnorderedAccessView1**) ppUAView1.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView1<TI0>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc1* pDesc1, ref ID3D11UnorderedAccessView1* ppUAView1) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateUnorderedAccessView1((ID3D11Resource*) pResource.Handle, pDesc1, ref ppUAView1);
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateUnorderedAccessView1<TI0, TI1>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc1 pDesc1, ref ComPtr<TI1> ppUAView1) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11UnorderedAccessView1>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateUnorderedAccessView1((ID3D11Resource*) pResource.Handle, in pDesc1, (ID3D11UnorderedAccessView1**) ppUAView1.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView1<TI0>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc1 pDesc1, ref ID3D11UnorderedAccessView1* ppUAView1) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateUnorderedAccessView1((ID3D11Resource*) pResource.Handle, in pDesc1, ref ppUAView1);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateUnorderedAccessView1<TI0>(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc1* pDesc1, ref ComPtr<TI0> ppUAView1) where TI0 : unmanaged, IComVtbl<ID3D11UnorderedAccessView1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateUnorderedAccessView1(ref pResource, pDesc1, (ID3D11UnorderedAccessView1**) ppUAView1.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateUnorderedAccessView1<TI0>(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc1 pDesc1, ref ComPtr<TI0> ppUAView1) where TI0 : unmanaged, IComVtbl<ID3D11UnorderedAccessView1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateUnorderedAccessView1(ref pResource, in pDesc1, (ID3D11UnorderedAccessView1**) ppUAView1.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView1<TI0, TI1>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc1* pDesc1, ref ComPtr<TI1> ppRTView1) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11RenderTargetView1>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRenderTargetView1((ID3D11Resource*) pResource.Handle, pDesc1, (ID3D11RenderTargetView1**) ppRTView1.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView1<TI0>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc1* pDesc1, ref ID3D11RenderTargetView1* ppRTView1) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRenderTargetView1((ID3D11Resource*) pResource.Handle, pDesc1, ref ppRTView1);
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateRenderTargetView1<TI0, TI1>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc1 pDesc1, ref ComPtr<TI1> ppRTView1) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11RenderTargetView1>, IComVtbl<TI1>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRenderTargetView1((ID3D11Resource*) pResource.Handle, in pDesc1, (ID3D11RenderTargetView1**) ppRTView1.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView1<TI0>(ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc1 pDesc1, ref ID3D11RenderTargetView1* ppRTView1) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRenderTargetView1((ID3D11Resource*) pResource.Handle, in pDesc1, ref ppRTView1);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateRenderTargetView1<TI0>(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc1* pDesc1, ref ComPtr<TI0> ppRTView1) where TI0 : unmanaged, IComVtbl<ID3D11RenderTargetView1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRenderTargetView1(ref pResource, pDesc1, (ID3D11RenderTargetView1**) ppRTView1.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateRenderTargetView1<TI0>(ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc1 pDesc1, ref ComPtr<TI0> ppRTView1) where TI0 : unmanaged, IComVtbl<ID3D11RenderTargetView1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateRenderTargetView1(ref pResource, in pDesc1, (ID3D11RenderTargetView1**) ppRTView1.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int CreateQuery1<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] QueryDesc1* pQueryDesc1, ref ComPtr<TI0> ppQuery1) where TI0 : unmanaged, IComVtbl<ID3D11Query1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateQuery1(pQueryDesc1, (ID3D11Query1**) ppQuery1.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateQuery1<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly QueryDesc1 pQueryDesc1, ref ComPtr<TI0> ppQuery1) where TI0 : unmanaged, IComVtbl<ID3D11Query1>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateQuery1(in pQueryDesc1, (ID3D11Query1**) ppQuery1.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly void GetImmediateContext3<TI0>(ref ComPtr<TI0> ppImmediateContext) where TI0 : unmanaged, IComVtbl<ID3D11DeviceContext3>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->GetImmediateContext3((ID3D11DeviceContext3**) ppImmediateContext.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateDeferredContext3<TI0>(uint ContextFlags, ref ComPtr<TI0> ppDeferredContext) where TI0 : unmanaged, IComVtbl<ID3D11DeviceContext3>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            return @this->CreateDeferredContext3(ContextFlags, (ID3D11DeviceContext3**) ppDeferredContext.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void WriteToSubresource<TI0>(ComPtr<TI0> pDstResource, uint DstSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Box* pDstBox, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pSrcData, uint SrcRowPitch, uint SrcDepthPitch) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->WriteToSubresource((ID3D11Resource*) pDstResource.Handle, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void WriteToSubresource<T0, TI0>(ComPtr<TI0> pDstResource, uint DstSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Box* pDstBox, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pSrcData, uint SrcRowPitch, uint SrcDepthPitch) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->WriteToSubresource((ID3D11Resource*) pDstResource.Handle, DstSubresource, pDstBox, in pSrcData, SrcRowPitch, SrcDepthPitch);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void WriteToSubresource<TI0>(ComPtr<TI0> pDstResource, uint DstSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Box pDstBox, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pSrcData, uint SrcRowPitch, uint SrcDepthPitch) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->WriteToSubresource((ID3D11Resource*) pDstResource.Handle, DstSubresource, in pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
        }

        /// <summary>To be documented.</summary>
        public readonly void WriteToSubresource<T0, TI0>(ComPtr<TI0> pDstResource, uint DstSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Box pDstBox, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pSrcData, uint SrcRowPitch, uint SrcDepthPitch) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->WriteToSubresource((ID3D11Resource*) pDstResource.Handle, DstSubresource, in pDstBox, in pSrcData, SrcRowPitch, SrcDepthPitch);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void ReadFromSubresource<TI0>(void* pDstData, uint DstRowPitch, uint DstDepthPitch, ComPtr<TI0> pSrcResource, uint SrcSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Box* pSrcBox) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->ReadFromSubresource(pDstData, DstRowPitch, DstDepthPitch, (ID3D11Resource*) pSrcResource.Handle, SrcSubresource, pSrcBox);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void ReadFromSubresource<TI0>(void* pDstData, uint DstRowPitch, uint DstDepthPitch, ComPtr<TI0> pSrcResource, uint SrcSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Box pSrcBox) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->ReadFromSubresource(pDstData, DstRowPitch, DstDepthPitch, (ID3D11Resource*) pSrcResource.Handle, SrcSubresource, in pSrcBox);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe void ReadFromSubresource<T0, TI0>(ref T0 pDstData, uint DstRowPitch, uint DstDepthPitch, ComPtr<TI0> pSrcResource, uint SrcSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Box* pSrcBox) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->ReadFromSubresource(ref pDstData, DstRowPitch, DstDepthPitch, (ID3D11Resource*) pSrcResource.Handle, SrcSubresource, pSrcBox);
        }

        /// <summary>To be documented.</summary>
        public readonly void ReadFromSubresource<T0, TI0>(ref T0 pDstData, uint DstRowPitch, uint DstDepthPitch, ComPtr<TI0> pSrcResource, uint SrcSubresource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Box pSrcBox) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            @this->ReadFromSubresource(ref pDstData, DstRowPitch, DstDepthPitch, (ID3D11Resource*) pSrcResource.Handle, SrcSubresource, in pSrcBox);
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe int OpenSharedFence<TI0>(void* hFence, out ComPtr<TI0> ppFence) where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            ppFence = default;
            return @this->OpenSharedFence(hFence, SilkMarshal.GuidPtrOf<TI0>(), (void**) ppFence.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int OpenSharedFence<T0, TI0>(ref T0 hFence, out ComPtr<TI0> ppFence) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            ppFence = default;
            return @this->OpenSharedFence(ref hFence, SilkMarshal.GuidPtrOf<TI0>(), (void**) ppFence.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly int CreateFence<TI0>(ulong InitialValue, FenceFlag Flags, out ComPtr<TI0> ppFence) where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // ComPtrOverloader
            ppFence = default;
            return @this->CreateFence(InitialValue, Flags, SilkMarshal.GuidPtrOf<TI0>(), (void**) ppFence.GetAddressOf());
        }

        /// <summary>To be documented.</summary>
        public readonly ComPtr<TI0> QueryInterface<TI0>() where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // NonKhrReturnTypeOverloader
            SilkMarshal.ThrowHResult(@this->QueryInterface(out ComPtr<TI0> silkRet));
            return silkRet;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe ComPtr<TI0> OpenSharedResource<TI0>(void* hResource) where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // NonKhrReturnTypeOverloader
            SilkMarshal.ThrowHResult(@this->OpenSharedResource(hResource, out ComPtr<TI0> silkRet));
            return silkRet;
        }

        /// <summary>To be documented.</summary>
        public readonly ComPtr<TI0> OpenSharedResource<T0, TI0>(ref T0 hResource) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // NonKhrReturnTypeOverloader
            SilkMarshal.ThrowHResult(@this->OpenSharedResource(ref hResource, out ComPtr<TI0> silkRet));
            return silkRet;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe ComPtr<TI0> OpenSharedResource1<TI0>(void* hResource) where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // NonKhrReturnTypeOverloader
            SilkMarshal.ThrowHResult(@this->OpenSharedResource1(hResource, out ComPtr<TI0> silkRet));
            return silkRet;
        }

        /// <summary>To be documented.</summary>
        public readonly ComPtr<TI0> OpenSharedResource1<T0, TI0>(ref T0 hResource) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // NonKhrReturnTypeOverloader
            SilkMarshal.ThrowHResult(@this->OpenSharedResource1(ref hResource, out ComPtr<TI0> silkRet));
            return silkRet;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe ComPtr<TI0> OpenSharedResourceByName<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] char* lpName, uint dwDesiredAccess) where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // NonKhrReturnTypeOverloader
            SilkMarshal.ThrowHResult(@this->OpenSharedResourceByName(lpName, dwDesiredAccess, out ComPtr<TI0> silkRet));
            return silkRet;
        }

        /// <summary>To be documented.</summary>
        public readonly ComPtr<TI0> OpenSharedResourceByName<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly char lpName, uint dwDesiredAccess) where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // NonKhrReturnTypeOverloader
            SilkMarshal.ThrowHResult(@this->OpenSharedResourceByName(in lpName, dwDesiredAccess, out ComPtr<TI0> silkRet));
            return silkRet;
        }

        /// <summary>To be documented.</summary>
        public readonly ComPtr<TI0> OpenSharedResourceByName<TI0>([Flow(Silk.NET.Core.Native.FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess) where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // NonKhrReturnTypeOverloader
            SilkMarshal.ThrowHResult(@this->OpenSharedResourceByName(lpName, dwDesiredAccess, out ComPtr<TI0> silkRet));
            return silkRet;
        }

        /// <summary>To be documented.</summary>
        public readonly unsafe ComPtr<TI0> OpenSharedFence<TI0>(void* hFence) where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // NonKhrReturnTypeOverloader
            SilkMarshal.ThrowHResult(@this->OpenSharedFence(hFence, out ComPtr<TI0> silkRet));
            return silkRet;
        }

        /// <summary>To be documented.</summary>
        public readonly ComPtr<TI0> OpenSharedFence<T0, TI0>(ref T0 hFence) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // NonKhrReturnTypeOverloader
            SilkMarshal.ThrowHResult(@this->OpenSharedFence(ref hFence, out ComPtr<TI0> silkRet));
            return silkRet;
        }

        /// <summary>To be documented.</summary>
        public readonly ComPtr<TI0> CreateFence<TI0>(ulong InitialValue, FenceFlag Flags) where TI0 : unmanaged, IComVtbl<TI0>
        {
            var @this = (ID3D11Device5*) Unsafe.AsPointer(ref Unsafe.AsRef(in this));
            // NonKhrReturnTypeOverloader
            SilkMarshal.ThrowHResult(@this->CreateFence(InitialValue, Flags, out ComPtr<TI0> silkRet));
            return silkRet;
        }

    }
}
