// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.


using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Text;
using Silk.NET.Core;
using Silk.NET.Core.Native;
using Silk.NET.Core.Attributes;
using Silk.NET.Core.Contexts;
using Silk.NET.Core.Loader;

#pragma warning disable 1591

namespace Silk.NET.Direct3D11;

public unsafe static class D3D11Device1VtblExtensions
{
    /// <summary>To be documented.</summary>
    public static unsafe int QueryInterface(this ComPtr<ID3D11Device1> thisVtbl, Guid* riid, void** ppvObject)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, void**, int>)@this->LpVtbl[0])(@this, riid, ppvObject);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int QueryInterface(this ComPtr<ID3D11Device1> thisVtbl, Guid* riid, ref void* ppvObject)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void** ppvObjectPtr = &ppvObject)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, void**, int>)@this->LpVtbl[0])(@this, riid, ppvObjectPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int QueryInterface(this ComPtr<ID3D11Device1> thisVtbl, ref Guid riid, void** ppvObject)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* riidPtr = &riid)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, void**, int>)@this->LpVtbl[0])(@this, riidPtr, ppvObject);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int QueryInterface(this ComPtr<ID3D11Device1> thisVtbl, ref Guid riid, ref void* ppvObject)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* riidPtr = &riid)
        {
            fixed (void** ppvObjectPtr = &ppvObject)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, void**, int>)@this->LpVtbl[0])(@this, riidPtr, ppvObjectPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static uint AddRef(this ComPtr<ID3D11Device1> thisVtbl)
    {
        var @this = thisVtbl.Handle;
        uint ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint>)@this->LpVtbl[1])(@this);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static uint Release(this ComPtr<ID3D11Device1> thisVtbl)
    {
        var @this = thisVtbl.Handle;
        uint ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint>)@this->LpVtbl[2])(@this);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] BufferDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Buffer** ppBuffer)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDesc, pInitialData, ppBuffer);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] BufferDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Buffer* ppBuffer)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Buffer** ppBufferPtr = &ppBuffer)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDesc, pInitialData, ppBufferPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] BufferDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Buffer** ppBuffer)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SubresourceData* pInitialDataPtr = &pInitialData)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDesc, pInitialDataPtr, ppBuffer);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] BufferDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Buffer* ppBuffer)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SubresourceData* pInitialDataPtr = &pInitialData)
        {
            fixed (ID3D11Buffer** ppBufferPtr = &ppBuffer)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDesc, pInitialDataPtr, ppBufferPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BufferDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Buffer** ppBuffer)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (BufferDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDescPtr, pInitialData, ppBuffer);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BufferDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Buffer* ppBuffer)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (BufferDesc* pDescPtr = &pDesc)
        {
            fixed (ID3D11Buffer** ppBufferPtr = &ppBuffer)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDescPtr, pInitialData, ppBufferPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BufferDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Buffer** ppBuffer)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (BufferDesc* pDescPtr = &pDesc)
        {
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDescPtr, pInitialDataPtr, ppBuffer);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BufferDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Buffer* ppBuffer)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (BufferDesc* pDescPtr = &pDesc)
        {
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                fixed (ID3D11Buffer** ppBufferPtr = &ppBuffer)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, BufferDesc*, SubresourceData*, ID3D11Buffer**, int>)@this->LpVtbl[3])(@this, pDescPtr, pInitialDataPtr, ppBufferPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture1DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture1D** ppTexture1D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDesc, pInitialData, ppTexture1D);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture1DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture1D* ppTexture1D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Texture1D** ppTexture1DPtr = &ppTexture1D)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDesc, pInitialData, ppTexture1DPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture1DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Texture1D** ppTexture1D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SubresourceData* pInitialDataPtr = &pInitialData)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDesc, pInitialDataPtr, ppTexture1D);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture1DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Texture1D* ppTexture1D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SubresourceData* pInitialDataPtr = &pInitialData)
        {
            fixed (ID3D11Texture1D** ppTexture1DPtr = &ppTexture1D)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDesc, pInitialDataPtr, ppTexture1DPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture1DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture1D** ppTexture1D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Texture1DDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDescPtr, pInitialData, ppTexture1D);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture1DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture1D* ppTexture1D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Texture1DDesc* pDescPtr = &pDesc)
        {
            fixed (ID3D11Texture1D** ppTexture1DPtr = &ppTexture1D)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDescPtr, pInitialData, ppTexture1DPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture1DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Texture1D** ppTexture1D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Texture1DDesc* pDescPtr = &pDesc)
        {
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDescPtr, pInitialDataPtr, ppTexture1D);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture1DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Texture1D* ppTexture1D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Texture1DDesc* pDescPtr = &pDesc)
        {
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                fixed (ID3D11Texture1D** ppTexture1DPtr = &ppTexture1D)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture1DDesc*, SubresourceData*, ID3D11Texture1D**, int>)@this->LpVtbl[4])(@this, pDescPtr, pInitialDataPtr, ppTexture1DPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture2D** ppTexture2D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDesc, pInitialData, ppTexture2D);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture2D* ppTexture2D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Texture2D** ppTexture2DPtr = &ppTexture2D)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDesc, pInitialData, ppTexture2DPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Texture2D** ppTexture2D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SubresourceData* pInitialDataPtr = &pInitialData)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDesc, pInitialDataPtr, ppTexture2D);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Texture2D* ppTexture2D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SubresourceData* pInitialDataPtr = &pInitialData)
        {
            fixed (ID3D11Texture2D** ppTexture2DPtr = &ppTexture2D)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDesc, pInitialDataPtr, ppTexture2DPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture2D** ppTexture2D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Texture2DDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDescPtr, pInitialData, ppTexture2D);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture2D* ppTexture2D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Texture2DDesc* pDescPtr = &pDesc)
        {
            fixed (ID3D11Texture2D** ppTexture2DPtr = &ppTexture2D)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDescPtr, pInitialData, ppTexture2DPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Texture2D** ppTexture2D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Texture2DDesc* pDescPtr = &pDesc)
        {
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDescPtr, pInitialDataPtr, ppTexture2D);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Texture2D* ppTexture2D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Texture2DDesc* pDescPtr = &pDesc)
        {
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                fixed (ID3D11Texture2D** ppTexture2DPtr = &ppTexture2D)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture2DDesc*, SubresourceData*, ID3D11Texture2D**, int>)@this->LpVtbl[5])(@this, pDescPtr, pInitialDataPtr, ppTexture2DPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture3D** ppTexture3D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDesc, pInitialData, ppTexture3D);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture3D* ppTexture3D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Texture3D** ppTexture3DPtr = &ppTexture3D)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDesc, pInitialData, ppTexture3DPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Texture3D** ppTexture3D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SubresourceData* pInitialDataPtr = &pInitialData)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDesc, pInitialDataPtr, ppTexture3D);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Texture3D* ppTexture3D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SubresourceData* pInitialDataPtr = &pInitialData)
        {
            fixed (ID3D11Texture3D** ppTexture3DPtr = &ppTexture3D)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDesc, pInitialDataPtr, ppTexture3DPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture3D** ppTexture3D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Texture3DDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDescPtr, pInitialData, ppTexture3D);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture3D* ppTexture3D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Texture3DDesc* pDescPtr = &pDesc)
        {
            fixed (ID3D11Texture3D** ppTexture3DPtr = &ppTexture3D)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDescPtr, pInitialData, ppTexture3DPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ID3D11Texture3D** ppTexture3D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Texture3DDesc* pDescPtr = &pDesc)
        {
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDescPtr, pInitialDataPtr, ppTexture3D);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ID3D11Texture3D* ppTexture3D)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Texture3DDesc* pDescPtr = &pDesc)
        {
            fixed (SubresourceData* pInitialDataPtr = &pInitialData)
            {
                fixed (ID3D11Texture3D** ppTexture3DPtr = &ppTexture3D)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Texture3DDesc*, SubresourceData*, ID3D11Texture3D**, int>)@this->LpVtbl[6])(@this, pDescPtr, pInitialDataPtr, ppTexture3DPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc* pDesc, ID3D11ShaderResourceView** ppSRView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResource, pDesc, ppSRView);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc* pDesc, ref ID3D11ShaderResourceView* ppSRView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11ShaderResourceView** ppSRViewPtr = &ppSRView)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResource, pDesc, ppSRViewPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc pDesc, ID3D11ShaderResourceView** ppSRView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ShaderResourceViewDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResource, pDescPtr, ppSRView);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc pDesc, ref ID3D11ShaderResourceView* ppSRView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ShaderResourceViewDesc* pDescPtr = &pDesc)
        {
            fixed (ID3D11ShaderResourceView** ppSRViewPtr = &ppSRView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResource, pDescPtr, ppSRViewPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc* pDesc, ID3D11ShaderResourceView** ppSRView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResourcePtr, pDesc, ppSRView);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc* pDesc, ref ID3D11ShaderResourceView* ppSRView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (ID3D11ShaderResourceView** ppSRViewPtr = &ppSRView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResourcePtr, pDesc, ppSRViewPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc pDesc, ID3D11ShaderResourceView** ppSRView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (ShaderResourceViewDesc* pDescPtr = &pDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResourcePtr, pDescPtr, ppSRView);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc pDesc, ref ID3D11ShaderResourceView* ppSRView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (ShaderResourceViewDesc* pDescPtr = &pDesc)
            {
                fixed (ID3D11ShaderResourceView** ppSRViewPtr = &ppSRView)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, ShaderResourceViewDesc*, ID3D11ShaderResourceView**, int>)@this->LpVtbl[7])(@this, pResourcePtr, pDescPtr, ppSRViewPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc* pDesc, ID3D11UnorderedAccessView** ppUAView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResource, pDesc, ppUAView);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc* pDesc, ref ID3D11UnorderedAccessView* ppUAView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11UnorderedAccessView** ppUAViewPtr = &ppUAView)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResource, pDesc, ppUAViewPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc pDesc, ID3D11UnorderedAccessView** ppUAView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (UnorderedAccessViewDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResource, pDescPtr, ppUAView);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc pDesc, ref ID3D11UnorderedAccessView* ppUAView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (UnorderedAccessViewDesc* pDescPtr = &pDesc)
        {
            fixed (ID3D11UnorderedAccessView** ppUAViewPtr = &ppUAView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResource, pDescPtr, ppUAViewPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc* pDesc, ID3D11UnorderedAccessView** ppUAView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResourcePtr, pDesc, ppUAView);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc* pDesc, ref ID3D11UnorderedAccessView* ppUAView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (ID3D11UnorderedAccessView** ppUAViewPtr = &ppUAView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResourcePtr, pDesc, ppUAViewPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc pDesc, ID3D11UnorderedAccessView** ppUAView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (UnorderedAccessViewDesc* pDescPtr = &pDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResourcePtr, pDescPtr, ppUAView);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc pDesc, ref ID3D11UnorderedAccessView* ppUAView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (UnorderedAccessViewDesc* pDescPtr = &pDesc)
            {
                fixed (ID3D11UnorderedAccessView** ppUAViewPtr = &ppUAView)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, UnorderedAccessViewDesc*, ID3D11UnorderedAccessView**, int>)@this->LpVtbl[8])(@this, pResourcePtr, pDescPtr, ppUAViewPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc* pDesc, ID3D11RenderTargetView** ppRTView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResource, pDesc, ppRTView);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc* pDesc, ref ID3D11RenderTargetView* ppRTView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11RenderTargetView** ppRTViewPtr = &ppRTView)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResource, pDesc, ppRTViewPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc pDesc, ID3D11RenderTargetView** ppRTView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (RenderTargetViewDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResource, pDescPtr, ppRTView);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc pDesc, ref ID3D11RenderTargetView* ppRTView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (RenderTargetViewDesc* pDescPtr = &pDesc)
        {
            fixed (ID3D11RenderTargetView** ppRTViewPtr = &ppRTView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResource, pDescPtr, ppRTViewPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc* pDesc, ID3D11RenderTargetView** ppRTView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResourcePtr, pDesc, ppRTView);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc* pDesc, ref ID3D11RenderTargetView* ppRTView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (ID3D11RenderTargetView** ppRTViewPtr = &ppRTView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResourcePtr, pDesc, ppRTViewPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc pDesc, ID3D11RenderTargetView** ppRTView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (RenderTargetViewDesc* pDescPtr = &pDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResourcePtr, pDescPtr, ppRTView);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc pDesc, ref ID3D11RenderTargetView* ppRTView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (RenderTargetViewDesc* pDescPtr = &pDesc)
            {
                fixed (ID3D11RenderTargetView** ppRTViewPtr = &ppRTView)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, RenderTargetViewDesc*, ID3D11RenderTargetView**, int>)@this->LpVtbl[9])(@this, pResourcePtr, pDescPtr, ppRTViewPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilViewDesc* pDesc, ID3D11DepthStencilView** ppDepthStencilView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResource, pDesc, ppDepthStencilView);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilViewDesc* pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11DepthStencilView** ppDepthStencilViewPtr = &ppDepthStencilView)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResource, pDesc, ppDepthStencilViewPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilViewDesc pDesc, ID3D11DepthStencilView** ppDepthStencilView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (DepthStencilViewDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResource, pDescPtr, ppDepthStencilView);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilViewDesc pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (DepthStencilViewDesc* pDescPtr = &pDesc)
        {
            fixed (ID3D11DepthStencilView** ppDepthStencilViewPtr = &ppDepthStencilView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResource, pDescPtr, ppDepthStencilViewPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilViewDesc* pDesc, ID3D11DepthStencilView** ppDepthStencilView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResourcePtr, pDesc, ppDepthStencilView);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilViewDesc* pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (ID3D11DepthStencilView** ppDepthStencilViewPtr = &ppDepthStencilView)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResourcePtr, pDesc, ppDepthStencilViewPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilViewDesc pDesc, ID3D11DepthStencilView** ppDepthStencilView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (DepthStencilViewDesc* pDescPtr = &pDesc)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResourcePtr, pDescPtr, ppDepthStencilView);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilViewDesc pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Resource* pResourcePtr = &pResource)
        {
            fixed (DepthStencilViewDesc* pDescPtr = &pDesc)
            {
                fixed (ID3D11DepthStencilView** ppDepthStencilViewPtr = &ppDepthStencilView)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11Resource*, DepthStencilViewDesc*, ID3D11DepthStencilView**, int>)@this->LpVtbl[10])(@this, pResourcePtr, pDescPtr, ppDepthStencilViewPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] InputElementDesc* pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ID3D11InputLayout** ppInputLayout)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] InputElementDesc* pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ID3D11InputLayout* ppInputLayout)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11InputLayout** ppInputLayoutPtr = &ppInputLayout)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayoutPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] InputElementDesc* pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecodeWithInputSignature, nuint BytecodeLength, ID3D11InputLayout** ppInputLayout) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodeWithInputSignaturePtr = &pShaderBytecodeWithInputSignature)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignaturePtr, BytecodeLength, ppInputLayout);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] InputElementDesc* pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ID3D11InputLayout* ppInputLayout) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodeWithInputSignaturePtr = &pShaderBytecodeWithInputSignature)
        {
            fixed (ID3D11InputLayout** ppInputLayoutPtr = &ppInputLayout)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescs, NumElements, pShaderBytecodeWithInputSignaturePtr, BytecodeLength, ppInputLayoutPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly InputElementDesc pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ID3D11InputLayout** ppInputLayout)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (InputElementDesc* pInputElementDescsPtr = &pInputElementDescs)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescsPtr, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly InputElementDesc pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ID3D11InputLayout* ppInputLayout)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (InputElementDesc* pInputElementDescsPtr = &pInputElementDescs)
        {
            fixed (ID3D11InputLayout** ppInputLayoutPtr = &ppInputLayout)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescsPtr, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayoutPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly InputElementDesc pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecodeWithInputSignature, nuint BytecodeLength, ID3D11InputLayout** ppInputLayout) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (InputElementDesc* pInputElementDescsPtr = &pInputElementDescs)
        {
            fixed (void* pShaderBytecodeWithInputSignaturePtr = &pShaderBytecodeWithInputSignature)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescsPtr, NumElements, pShaderBytecodeWithInputSignaturePtr, BytecodeLength, ppInputLayout);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly InputElementDesc pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ID3D11InputLayout* ppInputLayout) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (InputElementDesc* pInputElementDescsPtr = &pInputElementDescs)
        {
            fixed (void* pShaderBytecodeWithInputSignaturePtr = &pShaderBytecodeWithInputSignature)
            {
                fixed (ID3D11InputLayout** ppInputLayoutPtr = &ppInputLayout)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, InputElementDesc*, uint, void*, nuint, ID3D11InputLayout**, int>)@this->LpVtbl[11])(@this, pInputElementDescsPtr, NumElements, pShaderBytecodeWithInputSignaturePtr, BytecodeLength, ppInputLayoutPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11VertexShader** ppVertexShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppVertexShader);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11VertexShader* ppVertexShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11VertexShader** ppVertexShaderPtr = &ppVertexShader)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppVertexShaderPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11VertexShader** ppVertexShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppVertexShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11VertexShader* ppVertexShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            fixed (ID3D11VertexShader** ppVertexShaderPtr = &ppVertexShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppVertexShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11VertexShader** ppVertexShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppVertexShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11VertexShader* ppVertexShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11VertexShader** ppVertexShaderPtr = &ppVertexShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppVertexShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11VertexShader** ppVertexShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppVertexShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11VertexShader* ppVertexShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11VertexShader** ppVertexShaderPtr = &ppVertexShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11VertexShader**, int>)@this->LpVtbl[12])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppVertexShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppGeometryShader);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppGeometryShaderPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppGeometryShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppGeometryShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppGeometryShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppGeometryShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppGeometryShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[13])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppGeometryShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pBufferStridesPtr = &pBufferStrides)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pBufferStridesPtr = &pBufferStrides)
        {
            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pBufferStridesPtr = &pBufferStrides)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pBufferStridesPtr = &pBufferStrides)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
        {
            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
        {
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
        {
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
        {
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
        {
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecode, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (uint* pBufferStridesPtr = &pBufferStrides)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclaration, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShaderPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShader);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (SODeclarationEntry* pSODeclarationPtr = &pSODeclaration)
            {
                fixed (uint* pBufferStridesPtr = &pBufferStrides)
                {
                    fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
                    {
                        fixed (ID3D11GeometryShader** ppGeometryShaderPtr = &ppGeometryShader)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, SODeclarationEntry*, uint, uint*, uint, uint, ID3D11ClassLinkage*, ID3D11GeometryShader**, int>)@this->LpVtbl[14])(@this, pShaderBytecodePtr, BytecodeLength, pSODeclarationPtr, NumEntries, pBufferStridesPtr, NumStrides, RasterizedStream, pClassLinkagePtr, ppGeometryShaderPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11PixelShader** ppPixelShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppPixelShader);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11PixelShader* ppPixelShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11PixelShader** ppPixelShaderPtr = &ppPixelShader)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppPixelShaderPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11PixelShader** ppPixelShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppPixelShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11PixelShader* ppPixelShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            fixed (ID3D11PixelShader** ppPixelShaderPtr = &ppPixelShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppPixelShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11PixelShader** ppPixelShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppPixelShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11PixelShader* ppPixelShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11PixelShader** ppPixelShaderPtr = &ppPixelShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppPixelShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11PixelShader** ppPixelShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppPixelShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11PixelShader* ppPixelShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11PixelShader** ppPixelShaderPtr = &ppPixelShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11PixelShader**, int>)@this->LpVtbl[15])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppPixelShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11HullShader** ppHullShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppHullShader);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11HullShader* ppHullShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11HullShader** ppHullShaderPtr = &ppHullShader)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppHullShaderPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11HullShader** ppHullShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppHullShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11HullShader* ppHullShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            fixed (ID3D11HullShader** ppHullShaderPtr = &ppHullShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppHullShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11HullShader** ppHullShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppHullShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11HullShader* ppHullShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11HullShader** ppHullShaderPtr = &ppHullShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppHullShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11HullShader** ppHullShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppHullShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11HullShader* ppHullShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11HullShader** ppHullShaderPtr = &ppHullShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11HullShader**, int>)@this->LpVtbl[16])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppHullShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11DomainShader** ppDomainShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppDomainShader);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11DomainShader* ppDomainShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11DomainShader** ppDomainShaderPtr = &ppDomainShader)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppDomainShaderPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11DomainShader** ppDomainShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppDomainShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11DomainShader* ppDomainShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            fixed (ID3D11DomainShader** ppDomainShaderPtr = &ppDomainShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppDomainShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11DomainShader** ppDomainShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppDomainShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11DomainShader* ppDomainShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11DomainShader** ppDomainShaderPtr = &ppDomainShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppDomainShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11DomainShader** ppDomainShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppDomainShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11DomainShader* ppDomainShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11DomainShader** ppDomainShaderPtr = &ppDomainShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11DomainShader**, int>)@this->LpVtbl[17])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppDomainShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11ComputeShader** ppComputeShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppComputeShader);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11ComputeShader* ppComputeShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11ComputeShader** ppComputeShaderPtr = &ppComputeShader)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecode, BytecodeLength, pClassLinkage, ppComputeShaderPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11ComputeShader** ppComputeShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppComputeShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11ComputeShader* ppComputeShader)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
        {
            fixed (ID3D11ComputeShader** ppComputeShaderPtr = &ppComputeShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecode, BytecodeLength, pClassLinkagePtr, ppComputeShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11ComputeShader** ppComputeShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppComputeShader);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ComputeShader** ppComputeShaderPtr = &ppComputeShader)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkage, ppComputeShaderPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ID3D11ComputeShader** ppComputeShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppComputeShader);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pShaderBytecodePtr = &pShaderBytecode)
        {
            fixed (ID3D11ClassLinkage* pClassLinkagePtr = &pClassLinkage)
            {
                fixed (ID3D11ComputeShader** ppComputeShaderPtr = &ppComputeShader)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, nuint, ID3D11ClassLinkage*, ID3D11ComputeShader**, int>)@this->LpVtbl[18])(@this, pShaderBytecodePtr, BytecodeLength, pClassLinkagePtr, ppComputeShaderPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateClassLinkage(this ComPtr<ID3D11Device1> thisVtbl, ID3D11ClassLinkage** ppLinkage)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11ClassLinkage**, int>)@this->LpVtbl[19])(@this, ppLinkage);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateClassLinkage(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11ClassLinkage* ppLinkage)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11ClassLinkage** ppLinkagePtr = &ppLinkage)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11ClassLinkage**, int>)@this->LpVtbl[19])(@this, ppLinkagePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] BlendDesc* pBlendStateDesc, ID3D11BlendState** ppBlendState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, BlendDesc*, ID3D11BlendState**, int>)@this->LpVtbl[20])(@this, pBlendStateDesc, ppBlendState);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] BlendDesc* pBlendStateDesc, ref ID3D11BlendState* ppBlendState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11BlendState** ppBlendStatePtr = &ppBlendState)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, BlendDesc*, ID3D11BlendState**, int>)@this->LpVtbl[20])(@this, pBlendStateDesc, ppBlendStatePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BlendDesc pBlendStateDesc, ID3D11BlendState** ppBlendState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (BlendDesc* pBlendStateDescPtr = &pBlendStateDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, BlendDesc*, ID3D11BlendState**, int>)@this->LpVtbl[20])(@this, pBlendStateDescPtr, ppBlendState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BlendDesc pBlendStateDesc, ref ID3D11BlendState* ppBlendState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (BlendDesc* pBlendStateDescPtr = &pBlendStateDesc)
        {
            fixed (ID3D11BlendState** ppBlendStatePtr = &ppBlendState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, BlendDesc*, ID3D11BlendState**, int>)@this->LpVtbl[20])(@this, pBlendStateDescPtr, ppBlendStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilDesc* pDepthStencilDesc, ID3D11DepthStencilState** ppDepthStencilState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, DepthStencilDesc*, ID3D11DepthStencilState**, int>)@this->LpVtbl[21])(@this, pDepthStencilDesc, ppDepthStencilState);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilDesc* pDepthStencilDesc, ref ID3D11DepthStencilState* ppDepthStencilState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11DepthStencilState** ppDepthStencilStatePtr = &ppDepthStencilState)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, DepthStencilDesc*, ID3D11DepthStencilState**, int>)@this->LpVtbl[21])(@this, pDepthStencilDesc, ppDepthStencilStatePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilDesc pDepthStencilDesc, ID3D11DepthStencilState** ppDepthStencilState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (DepthStencilDesc* pDepthStencilDescPtr = &pDepthStencilDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, DepthStencilDesc*, ID3D11DepthStencilState**, int>)@this->LpVtbl[21])(@this, pDepthStencilDescPtr, ppDepthStencilState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilDesc pDepthStencilDesc, ref ID3D11DepthStencilState* ppDepthStencilState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (DepthStencilDesc* pDepthStencilDescPtr = &pDepthStencilDesc)
        {
            fixed (ID3D11DepthStencilState** ppDepthStencilStatePtr = &ppDepthStencilState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, DepthStencilDesc*, ID3D11DepthStencilState**, int>)@this->LpVtbl[21])(@this, pDepthStencilDescPtr, ppDepthStencilStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RasterizerDesc* pRasterizerDesc, ID3D11RasterizerState** ppRasterizerState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, RasterizerDesc*, ID3D11RasterizerState**, int>)@this->LpVtbl[22])(@this, pRasterizerDesc, ppRasterizerState);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RasterizerDesc* pRasterizerDesc, ref ID3D11RasterizerState* ppRasterizerState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11RasterizerState** ppRasterizerStatePtr = &ppRasterizerState)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, RasterizerDesc*, ID3D11RasterizerState**, int>)@this->LpVtbl[22])(@this, pRasterizerDesc, ppRasterizerStatePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RasterizerDesc pRasterizerDesc, ID3D11RasterizerState** ppRasterizerState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (RasterizerDesc* pRasterizerDescPtr = &pRasterizerDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, RasterizerDesc*, ID3D11RasterizerState**, int>)@this->LpVtbl[22])(@this, pRasterizerDescPtr, ppRasterizerState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RasterizerDesc pRasterizerDesc, ref ID3D11RasterizerState* ppRasterizerState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (RasterizerDesc* pRasterizerDescPtr = &pRasterizerDesc)
        {
            fixed (ID3D11RasterizerState** ppRasterizerStatePtr = &ppRasterizerState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, RasterizerDesc*, ID3D11RasterizerState**, int>)@this->LpVtbl[22])(@this, pRasterizerDescPtr, ppRasterizerStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateSamplerState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SamplerDesc* pSamplerDesc, ID3D11SamplerState** ppSamplerState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, SamplerDesc*, ID3D11SamplerState**, int>)@this->LpVtbl[23])(@this, pSamplerDesc, ppSamplerState);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateSamplerState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SamplerDesc* pSamplerDesc, ref ID3D11SamplerState* ppSamplerState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11SamplerState** ppSamplerStatePtr = &ppSamplerState)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, SamplerDesc*, ID3D11SamplerState**, int>)@this->LpVtbl[23])(@this, pSamplerDesc, ppSamplerStatePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateSamplerState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SamplerDesc pSamplerDesc, ID3D11SamplerState** ppSamplerState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SamplerDesc* pSamplerDescPtr = &pSamplerDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, SamplerDesc*, ID3D11SamplerState**, int>)@this->LpVtbl[23])(@this, pSamplerDescPtr, ppSamplerState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateSamplerState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SamplerDesc pSamplerDesc, ref ID3D11SamplerState* ppSamplerState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (SamplerDesc* pSamplerDescPtr = &pSamplerDesc)
        {
            fixed (ID3D11SamplerState** ppSamplerStatePtr = &ppSamplerState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, SamplerDesc*, ID3D11SamplerState**, int>)@this->LpVtbl[23])(@this, pSamplerDescPtr, ppSamplerStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateQuery(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] QueryDesc* pQueryDesc, ID3D11Query** ppQuery)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, QueryDesc*, ID3D11Query**, int>)@this->LpVtbl[24])(@this, pQueryDesc, ppQuery);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateQuery(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] QueryDesc* pQueryDesc, ref ID3D11Query* ppQuery)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Query** ppQueryPtr = &ppQuery)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, QueryDesc*, ID3D11Query**, int>)@this->LpVtbl[24])(@this, pQueryDesc, ppQueryPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateQuery(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly QueryDesc pQueryDesc, ID3D11Query** ppQuery)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (QueryDesc* pQueryDescPtr = &pQueryDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, QueryDesc*, ID3D11Query**, int>)@this->LpVtbl[24])(@this, pQueryDescPtr, ppQuery);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateQuery(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly QueryDesc pQueryDesc, ref ID3D11Query* ppQuery)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (QueryDesc* pQueryDescPtr = &pQueryDesc)
        {
            fixed (ID3D11Query** ppQueryPtr = &ppQuery)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, QueryDesc*, ID3D11Query**, int>)@this->LpVtbl[24])(@this, pQueryDescPtr, ppQueryPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePredicate(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] QueryDesc* pPredicateDesc, ID3D11Predicate** ppPredicate)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, QueryDesc*, ID3D11Predicate**, int>)@this->LpVtbl[25])(@this, pPredicateDesc, ppPredicate);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePredicate(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] QueryDesc* pPredicateDesc, ref ID3D11Predicate* ppPredicate)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Predicate** ppPredicatePtr = &ppPredicate)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, QueryDesc*, ID3D11Predicate**, int>)@this->LpVtbl[25])(@this, pPredicateDesc, ppPredicatePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePredicate(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly QueryDesc pPredicateDesc, ID3D11Predicate** ppPredicate)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (QueryDesc* pPredicateDescPtr = &pPredicateDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, QueryDesc*, ID3D11Predicate**, int>)@this->LpVtbl[25])(@this, pPredicateDescPtr, ppPredicate);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePredicate(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly QueryDesc pPredicateDesc, ref ID3D11Predicate* ppPredicate)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (QueryDesc* pPredicateDescPtr = &pPredicateDesc)
        {
            fixed (ID3D11Predicate** ppPredicatePtr = &ppPredicate)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, QueryDesc*, ID3D11Predicate**, int>)@this->LpVtbl[25])(@this, pPredicateDescPtr, ppPredicatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pCounterDesc, ID3D11Counter** ppCounter)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, ID3D11Counter**, int>)@this->LpVtbl[26])(@this, pCounterDesc, ppCounter);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pCounterDesc, ref ID3D11Counter* ppCounter)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11Counter** ppCounterPtr = &ppCounter)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, ID3D11Counter**, int>)@this->LpVtbl[26])(@this, pCounterDesc, ppCounterPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pCounterDesc, ID3D11Counter** ppCounter)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pCounterDescPtr = &pCounterDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, ID3D11Counter**, int>)@this->LpVtbl[26])(@this, pCounterDescPtr, ppCounter);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pCounterDesc, ref ID3D11Counter* ppCounter)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pCounterDescPtr = &pCounterDesc)
        {
            fixed (ID3D11Counter** ppCounterPtr = &ppCounter)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, ID3D11Counter**, int>)@this->LpVtbl[26])(@this, pCounterDescPtr, ppCounterPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeferredContext(this ComPtr<ID3D11Device1> thisVtbl, uint ContextFlags, ID3D11DeviceContext** ppDeferredContext)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, ID3D11DeviceContext**, int>)@this->LpVtbl[27])(@this, ContextFlags, ppDeferredContext);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeferredContext(this ComPtr<ID3D11Device1> thisVtbl, uint ContextFlags, ref ID3D11DeviceContext* ppDeferredContext)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11DeviceContext** ppDeferredContextPtr = &ppDeferredContext)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, ID3D11DeviceContext**, int>)@this->LpVtbl[27])(@this, ContextFlags, ppDeferredContextPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource(this ComPtr<ID3D11Device1> thisVtbl, void* hResource, Guid* ReturnedInterface, void** ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResource, ReturnedInterface, ppResource);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource(this ComPtr<ID3D11Device1> thisVtbl, void* hResource, Guid* ReturnedInterface, ref void* ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void** ppResourcePtr = &ppResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResource, ReturnedInterface, ppResourcePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource(this ComPtr<ID3D11Device1> thisVtbl, void* hResource, ref Guid ReturnedInterface, void** ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResource, ReturnedInterfacePtr, ppResource);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource(this ComPtr<ID3D11Device1> thisVtbl, void* hResource, ref Guid ReturnedInterface, ref void* ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
        {
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResource, ReturnedInterfacePtr, ppResourcePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource<T0>(this ComPtr<ID3D11Device1> thisVtbl, ref T0 hResource, Guid* ReturnedInterface, void** ppResource) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* hResourcePtr = &hResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResourcePtr, ReturnedInterface, ppResource);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource<T0>(this ComPtr<ID3D11Device1> thisVtbl, ref T0 hResource, Guid* ReturnedInterface, ref void* ppResource) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* hResourcePtr = &hResource)
        {
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResourcePtr, ReturnedInterface, ppResourcePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource<T0>(this ComPtr<ID3D11Device1> thisVtbl, ref T0 hResource, ref Guid ReturnedInterface, void** ppResource) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* hResourcePtr = &hResource)
        {
            fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResourcePtr, ReturnedInterfacePtr, ppResource);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource<T0>(this ComPtr<ID3D11Device1> thisVtbl, ref T0 hResource, ref Guid ReturnedInterface, ref void* ppResource) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* hResourcePtr = &hResource)
        {
            fixed (Guid* ReturnedInterfacePtr = &ReturnedInterface)
            {
                fixed (void** ppResourcePtr = &ppResource)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, Guid*, void**, int>)@this->LpVtbl[28])(@this, hResourcePtr, ReturnedInterfacePtr, ppResourcePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckFormatSupport(this ComPtr<ID3D11Device1> thisVtbl, Silk.NET.DXGI.Format Format, uint* pFormatSupport)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Silk.NET.DXGI.Format, uint*, int>)@this->LpVtbl[29])(@this, Format, pFormatSupport);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckFormatSupport(this ComPtr<ID3D11Device1> thisVtbl, Silk.NET.DXGI.Format Format, ref uint pFormatSupport)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pFormatSupportPtr = &pFormatSupport)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Silk.NET.DXGI.Format, uint*, int>)@this->LpVtbl[29])(@this, Format, pFormatSupportPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckMultisampleQualityLevels(this ComPtr<ID3D11Device1> thisVtbl, Silk.NET.DXGI.Format Format, uint SampleCount, uint* pNumQualityLevels)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Silk.NET.DXGI.Format, uint, uint*, int>)@this->LpVtbl[30])(@this, Format, SampleCount, pNumQualityLevels);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckMultisampleQualityLevels(this ComPtr<ID3D11Device1> thisVtbl, Silk.NET.DXGI.Format Format, uint SampleCount, ref uint pNumQualityLevels)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNumQualityLevelsPtr = &pNumQualityLevels)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Silk.NET.DXGI.Format, uint, uint*, int>)@this->LpVtbl[30])(@this, Format, SampleCount, pNumQualityLevelsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe void CheckCounterInfo(this ComPtr<ID3D11Device1> thisVtbl, CounterInfo* pCounterInfo)
    {
        var @this = thisVtbl.Handle;
        ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterInfo*, void>)@this->LpVtbl[31])(@this, pCounterInfo);
    }

    /// <summary>To be documented.</summary>
    public static void CheckCounterInfo(this ComPtr<ID3D11Device1> thisVtbl, ref CounterInfo pCounterInfo)
    {
        var @this = thisVtbl.Handle;
        fixed (CounterInfo* pCounterInfoPtr = &pCounterInfo)
        {
            ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterInfo*, void>)@this->LpVtbl[31])(@this, pCounterInfoPtr);
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szDescriptionPtr = &szDescription)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szDescriptionPtr = &szDescription)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (byte* szDescriptionPtr = &szDescription)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (byte* szDescriptionPtr = &szDescription)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
            }
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            }
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (byte* szNamePtr = &szName)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szDescriptionPtr = &szDescription)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szDescriptionPtr = &szDescription)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (byte* szUnitsPtr = &szUnits)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (byte* szDescriptionPtr = &szDescription)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (byte* szDescriptionPtr = &szDescription)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
            }
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
            }
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        fixed (uint* pNameLengthPtr = &pNameLength)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        SilkMarshal.Free((nint)szNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pActiveCountersPtr = &pActiveCounters)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterType* pTypePtr = &pType)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDesc, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (byte* szNamePtr = &szName)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (byte* szUnitsPtr = &szUnits)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (byte* szDescriptionPtr = &szDescription)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
            fixed (uint* pNameLengthPtr = &pNameLength)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        SilkMarshal.Free((nint)szNamePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, CounterType* pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (uint* pActiveCountersPtr = &pActiveCounters)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pType, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (byte* szNamePtr = &szName)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (byte* szUnitsPtr = &szUnits)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (byte* szDescriptionPtr = &szDescription)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                fixed (uint* pNameLengthPtr = &pNameLength)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCounters, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
        SilkMarshal.Free((nint)szNamePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, byte* szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szName, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
                                    fixed (byte* szDescriptionPtr = &szDescription)
                                    {
                                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                        {
                                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
                            fixed (byte* szUnitsPtr = &szUnits)
                            {
                                fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                                {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, ref byte szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
                    fixed (byte* szNamePtr = &szName)
                    {
                        fixed (uint* pNameLengthPtr = &pNameLength)
                        {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
        SilkMarshal.Free((nint)szUnitsPtr);
                        }
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (byte* szUnitsPtr = &szUnits)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (byte* szDescriptionPtr = &szDescription)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                    }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                    fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLength, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szUnitsPtr);
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLength);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, byte* szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnits, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                                }
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                                }
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
                                fixed (byte* szDescriptionPtr = &szDescription)
                                {
                                    fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                    {
                                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                    }
                                }
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, ref byte szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
                        fixed (byte* szUnitsPtr = &szUnits)
                        {
                            fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                            {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
        SilkMarshal.Free((nint)szDescriptionPtr);
                            }
                        }
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLength);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescription, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (byte* szDescriptionPtr = &szDescription)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                        fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLength, szDescriptionPtr, pDescriptionLengthPtr);
                        }
        SilkMarshal.Free((nint)szDescriptionPtr);
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLength);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, byte* szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescription, pDescriptionLengthPtr);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, ref byte szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
                            fixed (byte* szDescriptionPtr = &szDescription)
                            {
                                fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                                {
                                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                                }
                            }
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLength);
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pDesc, ref CounterType pType, ref uint pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, ref uint pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, ref uint pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, ref uint pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (CounterDesc* pDescPtr = &pDesc)
        {
            fixed (CounterType* pTypePtr = &pType)
            {
                fixed (uint* pActiveCountersPtr = &pActiveCounters)
                {
        var szNamePtr = (byte*) SilkMarshal.StringToPtr(szName, NativeStringEncoding.LPStr);
                    fixed (uint* pNameLengthPtr = &pNameLength)
                    {
        var szUnitsPtr = (byte*) SilkMarshal.StringToPtr(szUnits, NativeStringEncoding.LPStr);
                        fixed (uint* pUnitsLengthPtr = &pUnitsLength)
                        {
        var szDescriptionPtr = (byte*) SilkMarshal.StringToPtr(szDescription, NativeStringEncoding.LPStr);
                            fixed (uint* pDescriptionLengthPtr = &pDescriptionLength)
                            {
                                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, CounterDesc*, CounterType*, uint*, byte*, uint*, byte*, uint*, byte*, uint*, int>)@this->LpVtbl[32])(@this, pDescPtr, pTypePtr, pActiveCountersPtr, szNamePtr, pNameLengthPtr, szUnitsPtr, pUnitsLengthPtr, szDescriptionPtr, pDescriptionLengthPtr);
                            }
        SilkMarshal.Free((nint)szDescriptionPtr);
                        }
        SilkMarshal.Free((nint)szUnitsPtr);
                    }
        SilkMarshal.Free((nint)szNamePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckFeatureSupport(this ComPtr<ID3D11Device1> thisVtbl, Feature Feature, void* pFeatureSupportData, uint FeatureSupportDataSize)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Feature, void*, uint, int>)@this->LpVtbl[33])(@this, Feature, pFeatureSupportData, FeatureSupportDataSize);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int CheckFeatureSupport<T0>(this ComPtr<ID3D11Device1> thisVtbl, Feature Feature, ref T0 pFeatureSupportData, uint FeatureSupportDataSize) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pFeatureSupportDataPtr = &pFeatureSupportData)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Feature, void*, uint, int>)@this->LpVtbl[33])(@this, Feature, pFeatureSupportDataPtr, FeatureSupportDataSize);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData(this ComPtr<ID3D11Device1> thisVtbl, Guid* guid, uint* pDataSize, void* pData)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guid, pDataSize, pData);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData<T0>(this ComPtr<ID3D11Device1> thisVtbl, Guid* guid, uint* pDataSize, ref T0 pData) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pDataPtr = &pData)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guid, pDataSize, pDataPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData(this ComPtr<ID3D11Device1> thisVtbl, Guid* guid, ref uint pDataSize, void* pData)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pDataSizePtr = &pDataSize)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guid, pDataSizePtr, pData);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData<T0>(this ComPtr<ID3D11Device1> thisVtbl, Guid* guid, ref uint pDataSize, ref T0 pData) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (uint* pDataSizePtr = &pDataSize)
        {
            fixed (void* pDataPtr = &pData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guid, pDataSizePtr, pDataPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData(this ComPtr<ID3D11Device1> thisVtbl, ref Guid guid, uint* pDataSize, void* pData)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* guidPtr = &guid)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guidPtr, pDataSize, pData);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData<T0>(this ComPtr<ID3D11Device1> thisVtbl, ref Guid guid, uint* pDataSize, ref T0 pData) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* guidPtr = &guid)
        {
            fixed (void* pDataPtr = &pData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guidPtr, pDataSize, pDataPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData(this ComPtr<ID3D11Device1> thisVtbl, ref Guid guid, ref uint pDataSize, void* pData)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* guidPtr = &guid)
        {
            fixed (uint* pDataSizePtr = &pDataSize)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guidPtr, pDataSizePtr, pData);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int GetPrivateData<T0>(this ComPtr<ID3D11Device1> thisVtbl, ref Guid guid, ref uint pDataSize, ref T0 pData) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* guidPtr = &guid)
        {
            fixed (uint* pDataSizePtr = &pDataSize)
            {
                fixed (void* pDataPtr = &pData)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, uint*, void*, int>)@this->LpVtbl[34])(@this, guidPtr, pDataSizePtr, pDataPtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int SetPrivateData(this ComPtr<ID3D11Device1> thisVtbl, Guid* guid, uint DataSize, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pData)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, uint, void*, int>)@this->LpVtbl[35])(@this, guid, DataSize, pData);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int SetPrivateData<T0>(this ComPtr<ID3D11Device1> thisVtbl, Guid* guid, uint DataSize, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pData) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* pDataPtr = &pData)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, uint, void*, int>)@this->LpVtbl[35])(@this, guid, DataSize, pDataPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int SetPrivateData(this ComPtr<ID3D11Device1> thisVtbl, ref Guid guid, uint DataSize, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pData)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* guidPtr = &guid)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, uint, void*, int>)@this->LpVtbl[35])(@this, guidPtr, DataSize, pData);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int SetPrivateData<T0>(this ComPtr<ID3D11Device1> thisVtbl, ref Guid guid, uint DataSize, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pData) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* guidPtr = &guid)
        {
            fixed (void* pDataPtr = &pData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, uint, void*, int>)@this->LpVtbl[35])(@this, guidPtr, DataSize, pDataPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int SetPrivateDataInterface(this ComPtr<ID3D11Device1> thisVtbl, Guid* guid, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.IUnknown* pData)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, Silk.NET.Core.Native.IUnknown*, int>)@this->LpVtbl[36])(@this, guid, pData);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int SetPrivateDataInterface(this ComPtr<ID3D11Device1> thisVtbl, Guid* guid, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.IUnknown pData)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Silk.NET.Core.Native.IUnknown* pDataPtr = &pData)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, Silk.NET.Core.Native.IUnknown*, int>)@this->LpVtbl[36])(@this, guid, pDataPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int SetPrivateDataInterface(this ComPtr<ID3D11Device1> thisVtbl, ref Guid guid, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.IUnknown* pData)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* guidPtr = &guid)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, Silk.NET.Core.Native.IUnknown*, int>)@this->LpVtbl[36])(@this, guidPtr, pData);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int SetPrivateDataInterface(this ComPtr<ID3D11Device1> thisVtbl, ref Guid guid, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.IUnknown pData)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* guidPtr = &guid)
        {
            fixed (Silk.NET.Core.Native.IUnknown* pDataPtr = &pData)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Guid*, Silk.NET.Core.Native.IUnknown*, int>)@this->LpVtbl[36])(@this, guidPtr, pDataPtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static Silk.NET.Core.Native.D3DFeatureLevel GetFeatureLevel(this ComPtr<ID3D11Device1> thisVtbl)
    {
        var @this = thisVtbl.Handle;
        Silk.NET.Core.Native.D3DFeatureLevel ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, Silk.NET.Core.Native.D3DFeatureLevel>)@this->LpVtbl[37])(@this);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static uint GetCreationFlags(this ComPtr<ID3D11Device1> thisVtbl)
    {
        var @this = thisVtbl.Handle;
        uint ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint>)@this->LpVtbl[38])(@this);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int GetDeviceRemovedReason(this ComPtr<ID3D11Device1> thisVtbl)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, int>)@this->LpVtbl[39])(@this);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetImmediateContext(this ComPtr<ID3D11Device1> thisVtbl, ID3D11DeviceContext** ppImmediateContext)
    {
        var @this = thisVtbl.Handle;
        ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11DeviceContext**, void>)@this->LpVtbl[40])(@this, ppImmediateContext);
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetImmediateContext(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11DeviceContext* ppImmediateContext)
    {
        var @this = thisVtbl.Handle;
        fixed (ID3D11DeviceContext** ppImmediateContextPtr = &ppImmediateContext)
        {
            ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11DeviceContext**, void>)@this->LpVtbl[40])(@this, ppImmediateContextPtr);
        }
    }

    /// <summary>To be documented.</summary>
    public static int SetExceptionMode(this ComPtr<ID3D11Device1> thisVtbl, uint RaiseFlags)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, int>)@this->LpVtbl[41])(@this, RaiseFlags);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static uint GetExceptionMode(this ComPtr<ID3D11Device1> thisVtbl)
    {
        var @this = thisVtbl.Handle;
        uint ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint>)@this->LpVtbl[42])(@this);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetImmediateContext1(this ComPtr<ID3D11Device1> thisVtbl, ID3D11DeviceContext1** ppImmediateContext)
    {
        var @this = thisVtbl.Handle;
        ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11DeviceContext1**, void>)@this->LpVtbl[43])(@this, ppImmediateContext);
    }

    /// <summary>To be documented.</summary>
    public static unsafe void GetImmediateContext1(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11DeviceContext1* ppImmediateContext)
    {
        var @this = thisVtbl.Handle;
        fixed (ID3D11DeviceContext1** ppImmediateContextPtr = &ppImmediateContext)
        {
            ((delegate* unmanaged[Stdcall]<ID3D11Device1*, ID3D11DeviceContext1**, void>)@this->LpVtbl[43])(@this, ppImmediateContextPtr);
        }
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeferredContext1(this ComPtr<ID3D11Device1> thisVtbl, uint ContextFlags, ID3D11DeviceContext1** ppDeferredContext)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, ID3D11DeviceContext1**, int>)@this->LpVtbl[44])(@this, ContextFlags, ppDeferredContext);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeferredContext1(this ComPtr<ID3D11Device1> thisVtbl, uint ContextFlags, ref ID3D11DeviceContext1* ppDeferredContext)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11DeviceContext1** ppDeferredContextPtr = &ppDeferredContext)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, ID3D11DeviceContext1**, int>)@this->LpVtbl[44])(@this, ContextFlags, ppDeferredContextPtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState1(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] BlendDesc1* pBlendStateDesc, ID3D11BlendState1** ppBlendState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, BlendDesc1*, ID3D11BlendState1**, int>)@this->LpVtbl[45])(@this, pBlendStateDesc, ppBlendState);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState1(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] BlendDesc1* pBlendStateDesc, ref ID3D11BlendState1* ppBlendState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11BlendState1** ppBlendStatePtr = &ppBlendState)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, BlendDesc1*, ID3D11BlendState1**, int>)@this->LpVtbl[45])(@this, pBlendStateDesc, ppBlendStatePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState1(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BlendDesc1 pBlendStateDesc, ID3D11BlendState1** ppBlendState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (BlendDesc1* pBlendStateDescPtr = &pBlendStateDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, BlendDesc1*, ID3D11BlendState1**, int>)@this->LpVtbl[45])(@this, pBlendStateDescPtr, ppBlendState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState1(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BlendDesc1 pBlendStateDesc, ref ID3D11BlendState1* ppBlendState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (BlendDesc1* pBlendStateDescPtr = &pBlendStateDesc)
        {
            fixed (ID3D11BlendState1** ppBlendStatePtr = &ppBlendState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, BlendDesc1*, ID3D11BlendState1**, int>)@this->LpVtbl[45])(@this, pBlendStateDescPtr, ppBlendStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState1(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RasterizerDesc1* pRasterizerDesc, ID3D11RasterizerState1** ppRasterizerState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, RasterizerDesc1*, ID3D11RasterizerState1**, int>)@this->LpVtbl[46])(@this, pRasterizerDesc, ppRasterizerState);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState1(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RasterizerDesc1* pRasterizerDesc, ref ID3D11RasterizerState1* ppRasterizerState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3D11RasterizerState1** ppRasterizerStatePtr = &ppRasterizerState)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, RasterizerDesc1*, ID3D11RasterizerState1**, int>)@this->LpVtbl[46])(@this, pRasterizerDesc, ppRasterizerStatePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState1(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RasterizerDesc1 pRasterizerDesc, ID3D11RasterizerState1** ppRasterizerState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (RasterizerDesc1* pRasterizerDescPtr = &pRasterizerDesc)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, RasterizerDesc1*, ID3D11RasterizerState1**, int>)@this->LpVtbl[46])(@this, pRasterizerDescPtr, ppRasterizerState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState1(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RasterizerDesc1 pRasterizerDesc, ref ID3D11RasterizerState1* ppRasterizerState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (RasterizerDesc1* pRasterizerDescPtr = &pRasterizerDesc)
        {
            fixed (ID3D11RasterizerState1** ppRasterizerStatePtr = &ppRasterizerState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, RasterizerDesc1*, ID3D11RasterizerState1**, int>)@this->LpVtbl[46])(@this, pRasterizerDescPtr, ppRasterizerStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextState);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextStatePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevelPtr, ppContextState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
        {
            fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevelPtr, ppContextStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevel, ppContextState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
        {
            fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevel, ppContextStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
        {
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevelPtr, ppContextState);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
        {
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
            {
                fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevelPtr, ppContextStatePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextState);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
        {
            fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextStatePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
        {
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevelPtr, ppContextState);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
        {
            fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
            {
                fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevelPtr, ppContextStatePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
        {
            fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevel, ppContextState);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
        {
            fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
            {
                fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevel, ppContextStatePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
        {
            fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
            {
                fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevelPtr, ppContextState);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevelsPtr = &pFeatureLevels)
        {
            fixed (Guid* EmulatedInterfacePtr = &EmulatedInterface)
            {
                fixed (Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevelPtr = &pChosenFeatureLevel)
                {
                    fixed (ID3DDeviceContextState** ppContextStatePtr = &ppContextState)
                    {
                        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, uint, Silk.NET.Core.Native.D3DFeatureLevel*, uint, uint, Guid*, Silk.NET.Core.Native.D3DFeatureLevel*, ID3DDeviceContextState**, int>)@this->LpVtbl[47])(@this, Flags, pFeatureLevelsPtr, FeatureLevels, SDKVersion, EmulatedInterfacePtr, pChosenFeatureLevelPtr, ppContextStatePtr);
                    }
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1(this ComPtr<ID3D11Device1> thisVtbl, void* hResource, Guid* returnedInterface, void** ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResource, returnedInterface, ppResource);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1(this ComPtr<ID3D11Device1> thisVtbl, void* hResource, Guid* returnedInterface, ref void* ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void** ppResourcePtr = &ppResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResource, returnedInterface, ppResourcePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1(this ComPtr<ID3D11Device1> thisVtbl, void* hResource, ref Guid returnedInterface, void** ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* returnedInterfacePtr = &returnedInterface)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResource, returnedInterfacePtr, ppResource);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1(this ComPtr<ID3D11Device1> thisVtbl, void* hResource, ref Guid returnedInterface, ref void* ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* returnedInterfacePtr = &returnedInterface)
        {
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResource, returnedInterfacePtr, ppResourcePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1<T0>(this ComPtr<ID3D11Device1> thisVtbl, ref T0 hResource, Guid* returnedInterface, void** ppResource) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* hResourcePtr = &hResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResourcePtr, returnedInterface, ppResource);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1<T0>(this ComPtr<ID3D11Device1> thisVtbl, ref T0 hResource, Guid* returnedInterface, ref void* ppResource) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* hResourcePtr = &hResource)
        {
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResourcePtr, returnedInterface, ppResourcePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1<T0>(this ComPtr<ID3D11Device1> thisVtbl, ref T0 hResource, ref Guid returnedInterface, void** ppResource) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* hResourcePtr = &hResource)
        {
            fixed (Guid* returnedInterfacePtr = &returnedInterface)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResourcePtr, returnedInterfacePtr, ppResource);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1<T0>(this ComPtr<ID3D11Device1> thisVtbl, ref T0 hResource, ref Guid returnedInterface, ref void* ppResource) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void* hResourcePtr = &hResource)
        {
            fixed (Guid* returnedInterfacePtr = &returnedInterface)
            {
                fixed (void** ppResourcePtr = &ppResource)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, void*, Guid*, void**, int>)@this->LpVtbl[48])(@this, hResourcePtr, returnedInterfacePtr, ppResourcePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] char* lpName, uint dwDesiredAccess, Guid* returnedInterface, void** ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpName, dwDesiredAccess, returnedInterface, ppResource);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] char* lpName, uint dwDesiredAccess, Guid* returnedInterface, ref void* ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (void** ppResourcePtr = &ppResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpName, dwDesiredAccess, returnedInterface, ppResourcePtr);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] char* lpName, uint dwDesiredAccess, ref Guid returnedInterface, void** ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* returnedInterfacePtr = &returnedInterface)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpName, dwDesiredAccess, returnedInterfacePtr, ppResource);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] char* lpName, uint dwDesiredAccess, ref Guid returnedInterface, ref void* ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (Guid* returnedInterfacePtr = &returnedInterface)
        {
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpName, dwDesiredAccess, returnedInterfacePtr, ppResourcePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly char lpName, uint dwDesiredAccess, Guid* returnedInterface, void** ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (char* lpNamePtr = &lpName)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterface, ppResource);
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly char lpName, uint dwDesiredAccess, Guid* returnedInterface, ref void* ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (char* lpNamePtr = &lpName)
        {
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterface, ppResourcePtr);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly char lpName, uint dwDesiredAccess, ref Guid returnedInterface, void** ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (char* lpNamePtr = &lpName)
        {
            fixed (Guid* returnedInterfacePtr = &returnedInterface)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterfacePtr, ppResource);
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly char lpName, uint dwDesiredAccess, ref Guid returnedInterface, ref void* ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        fixed (char* lpNamePtr = &lpName)
        {
            fixed (Guid* returnedInterfacePtr = &returnedInterface)
            {
                fixed (void** ppResourcePtr = &ppResource)
                {
                    ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, char*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterfacePtr, ppResourcePtr);
                }
            }
        }
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess, Guid* returnedInterface, void** ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var lpNamePtr = (byte*) SilkMarshal.StringToPtr(lpName, NativeStringEncoding.LPWStr);
        ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, byte*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterface, ppResource);
        SilkMarshal.Free((nint)lpNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess, Guid* returnedInterface, ref void* ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var lpNamePtr = (byte*) SilkMarshal.StringToPtr(lpName, NativeStringEncoding.LPWStr);
        fixed (void** ppResourcePtr = &ppResource)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, byte*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterface, ppResourcePtr);
        }
        SilkMarshal.Free((nint)lpNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess, ref Guid returnedInterface, void** ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var lpNamePtr = (byte*) SilkMarshal.StringToPtr(lpName, NativeStringEncoding.LPWStr);
        fixed (Guid* returnedInterfacePtr = &returnedInterface)
        {
            ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, byte*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterfacePtr, ppResource);
        }
        SilkMarshal.Free((nint)lpNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess, ref Guid returnedInterface, ref void* ppResource)
    {
        var @this = thisVtbl.Handle;
        int ret = default;
        var lpNamePtr = (byte*) SilkMarshal.StringToPtr(lpName, NativeStringEncoding.LPWStr);
        fixed (Guid* returnedInterfacePtr = &returnedInterface)
        {
            fixed (void** ppResourcePtr = &ppResource)
            {
                ret = ((delegate* unmanaged[Stdcall]<ID3D11Device1*, byte*, uint, Guid*, void**, int>)@this->LpVtbl[49])(@this, lpNamePtr, dwDesiredAccess, returnedInterfacePtr, ppResourcePtr);
            }
        }
        SilkMarshal.Free((nint)lpNamePtr);
        return ret;
    }

    /// <summary>To be documented.</summary>
    public static int QueryInterface<TI0>(this ComPtr<ID3D11Device1> thisVtbl, out ComPtr<TI0> ppvObject) where TI0 : unmanaged, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        ppvObject = default;
        return @this->QueryInterface(SilkMarshal.GuidPtrOf<TI0>(), (void**) ppvObject.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int QueryInterface(this ComPtr<ID3D11Device1> thisVtbl, Span<Guid> riid, void** ppvObject)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->QueryInterface(ref riid.GetPinnableReference(), ppvObject);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int QueryInterface(this ComPtr<ID3D11Device1> thisVtbl, Span<Guid> riid, ref void* ppvObject)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->QueryInterface(ref riid.GetPinnableReference(), ref ppvObject);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] BufferDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppBuffer) where TI0 : unmanaged, IComVtbl<ID3D11Buffer>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateBuffer(pDesc, pInitialData, (ID3D11Buffer**) ppBuffer.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] BufferDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SubresourceData> pInitialData, ID3D11Buffer** ppBuffer)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateBuffer(pDesc, in pInitialData.GetPinnableReference(), ppBuffer);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] BufferDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppBuffer) where TI0 : unmanaged, IComVtbl<ID3D11Buffer>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateBuffer(pDesc, in pInitialData, (ID3D11Buffer**) ppBuffer.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] BufferDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SubresourceData> pInitialData, ref ID3D11Buffer* ppBuffer)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateBuffer(pDesc, in pInitialData.GetPinnableReference(), ref ppBuffer);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<BufferDesc> pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Buffer** ppBuffer)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateBuffer(in pDesc.GetPinnableReference(), pInitialData, ppBuffer);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BufferDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppBuffer) where TI0 : unmanaged, IComVtbl<ID3D11Buffer>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateBuffer(in pDesc, pInitialData, (ID3D11Buffer**) ppBuffer.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<BufferDesc> pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Buffer* ppBuffer)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateBuffer(in pDesc.GetPinnableReference(), pInitialData, ref ppBuffer);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<BufferDesc> pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SubresourceData> pInitialData, ID3D11Buffer** ppBuffer)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateBuffer(in pDesc.GetPinnableReference(), in pInitialData.GetPinnableReference(), ppBuffer);
    }

    /// <summary>To be documented.</summary>
    public static int CreateBuffer<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BufferDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppBuffer) where TI0 : unmanaged, IComVtbl<ID3D11Buffer>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateBuffer(in pDesc, in pInitialData, (ID3D11Buffer**) ppBuffer.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBuffer(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<BufferDesc> pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SubresourceData> pInitialData, ref ID3D11Buffer* ppBuffer)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateBuffer(in pDesc.GetPinnableReference(), in pInitialData.GetPinnableReference(), ref ppBuffer);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture1DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppTexture1D) where TI0 : unmanaged, IComVtbl<ID3D11Texture1D>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateTexture1D(pDesc, pInitialData, (ID3D11Texture1D**) ppTexture1D.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture1DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SubresourceData> pInitialData, ID3D11Texture1D** ppTexture1D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture1D(pDesc, in pInitialData.GetPinnableReference(), ppTexture1D);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture1DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppTexture1D) where TI0 : unmanaged, IComVtbl<ID3D11Texture1D>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateTexture1D(pDesc, in pInitialData, (ID3D11Texture1D**) ppTexture1D.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture1DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SubresourceData> pInitialData, ref ID3D11Texture1D* ppTexture1D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture1D(pDesc, in pInitialData.GetPinnableReference(), ref ppTexture1D);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Texture1DDesc> pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture1D** ppTexture1D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture1D(in pDesc.GetPinnableReference(), pInitialData, ppTexture1D);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture1DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppTexture1D) where TI0 : unmanaged, IComVtbl<ID3D11Texture1D>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateTexture1D(in pDesc, pInitialData, (ID3D11Texture1D**) ppTexture1D.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Texture1DDesc> pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture1D* ppTexture1D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture1D(in pDesc.GetPinnableReference(), pInitialData, ref ppTexture1D);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Texture1DDesc> pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SubresourceData> pInitialData, ID3D11Texture1D** ppTexture1D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture1D(in pDesc.GetPinnableReference(), in pInitialData.GetPinnableReference(), ppTexture1D);
    }

    /// <summary>To be documented.</summary>
    public static int CreateTexture1D<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture1DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppTexture1D) where TI0 : unmanaged, IComVtbl<ID3D11Texture1D>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateTexture1D(in pDesc, in pInitialData, (ID3D11Texture1D**) ppTexture1D.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture1D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Texture1DDesc> pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SubresourceData> pInitialData, ref ID3D11Texture1D* ppTexture1D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture1D(in pDesc.GetPinnableReference(), in pInitialData.GetPinnableReference(), ref ppTexture1D);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppTexture2D) where TI0 : unmanaged, IComVtbl<ID3D11Texture2D>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateTexture2D(pDesc, pInitialData, (ID3D11Texture2D**) ppTexture2D.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SubresourceData> pInitialData, ID3D11Texture2D** ppTexture2D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture2D(pDesc, in pInitialData.GetPinnableReference(), ppTexture2D);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppTexture2D) where TI0 : unmanaged, IComVtbl<ID3D11Texture2D>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateTexture2D(pDesc, in pInitialData, (ID3D11Texture2D**) ppTexture2D.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture2DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SubresourceData> pInitialData, ref ID3D11Texture2D* ppTexture2D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture2D(pDesc, in pInitialData.GetPinnableReference(), ref ppTexture2D);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Texture2DDesc> pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture2D** ppTexture2D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture2D(in pDesc.GetPinnableReference(), pInitialData, ppTexture2D);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppTexture2D) where TI0 : unmanaged, IComVtbl<ID3D11Texture2D>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateTexture2D(in pDesc, pInitialData, (ID3D11Texture2D**) ppTexture2D.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Texture2DDesc> pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture2D* ppTexture2D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture2D(in pDesc.GetPinnableReference(), pInitialData, ref ppTexture2D);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Texture2DDesc> pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SubresourceData> pInitialData, ID3D11Texture2D** ppTexture2D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture2D(in pDesc.GetPinnableReference(), in pInitialData.GetPinnableReference(), ppTexture2D);
    }

    /// <summary>To be documented.</summary>
    public static int CreateTexture2D<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture2DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppTexture2D) where TI0 : unmanaged, IComVtbl<ID3D11Texture2D>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateTexture2D(in pDesc, in pInitialData, (ID3D11Texture2D**) ppTexture2D.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture2D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Texture2DDesc> pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SubresourceData> pInitialData, ref ID3D11Texture2D* ppTexture2D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture2D(in pDesc.GetPinnableReference(), in pInitialData.GetPinnableReference(), ref ppTexture2D);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppTexture3D) where TI0 : unmanaged, IComVtbl<ID3D11Texture3D>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateTexture3D(pDesc, pInitialData, (ID3D11Texture3D**) ppTexture3D.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SubresourceData> pInitialData, ID3D11Texture3D** ppTexture3D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture3D(pDesc, in pInitialData.GetPinnableReference(), ppTexture3D);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppTexture3D) where TI0 : unmanaged, IComVtbl<ID3D11Texture3D>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateTexture3D(pDesc, in pInitialData, (ID3D11Texture3D**) ppTexture3D.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Texture3DDesc* pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SubresourceData> pInitialData, ref ID3D11Texture3D* ppTexture3D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture3D(pDesc, in pInitialData.GetPinnableReference(), ref ppTexture3D);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Texture3DDesc> pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ID3D11Texture3D** ppTexture3D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture3D(in pDesc.GetPinnableReference(), pInitialData, ppTexture3D);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ComPtr<TI0> ppTexture3D) where TI0 : unmanaged, IComVtbl<ID3D11Texture3D>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateTexture3D(in pDesc, pInitialData, (ID3D11Texture3D**) ppTexture3D.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Texture3DDesc> pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SubresourceData* pInitialData, ref ID3D11Texture3D* ppTexture3D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture3D(in pDesc.GetPinnableReference(), pInitialData, ref ppTexture3D);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Texture3DDesc> pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SubresourceData> pInitialData, ID3D11Texture3D** ppTexture3D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture3D(in pDesc.GetPinnableReference(), in pInitialData.GetPinnableReference(), ppTexture3D);
    }

    /// <summary>To be documented.</summary>
    public static int CreateTexture3D<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Texture3DDesc pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SubresourceData pInitialData, ref ComPtr<TI0> ppTexture3D) where TI0 : unmanaged, IComVtbl<ID3D11Texture3D>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateTexture3D(in pDesc, in pInitialData, (ID3D11Texture3D**) ppTexture3D.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateTexture3D(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Texture3DDesc> pDesc, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SubresourceData> pInitialData, ref ID3D11Texture3D* ppTexture3D)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateTexture3D(in pDesc.GetPinnableReference(), in pInitialData.GetPinnableReference(), ref ppTexture3D);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc* pDesc, ref ComPtr<TI1> ppSRView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11ShaderResourceView>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateShaderResourceView((ID3D11Resource*) pResource.Handle, pDesc, (ID3D11ShaderResourceView**) ppSRView.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc* pDesc, ref ID3D11ShaderResourceView* ppSRView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateShaderResourceView((ID3D11Resource*) pResource.Handle, pDesc, ref ppSRView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<ShaderResourceViewDesc> pDesc, ID3D11ShaderResourceView** ppSRView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateShaderResourceView(pResource, in pDesc.GetPinnableReference(), ppSRView);
    }

    /// <summary>To be documented.</summary>
    public static int CreateShaderResourceView<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc pDesc, ref ComPtr<TI1> ppSRView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11ShaderResourceView>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateShaderResourceView((ID3D11Resource*) pResource.Handle, in pDesc, (ID3D11ShaderResourceView**) ppSRView.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<ShaderResourceViewDesc> pDesc, ref ID3D11ShaderResourceView* ppSRView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateShaderResourceView(pResource, in pDesc.GetPinnableReference(), ref ppSRView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc pDesc, ref ID3D11ShaderResourceView* ppSRView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateShaderResourceView((ID3D11Resource*) pResource.Handle, in pDesc, ref ppSRView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView(this ComPtr<ID3D11Device1> thisVtbl, Span<ID3D11Resource> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc* pDesc, ID3D11ShaderResourceView** ppSRView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateShaderResourceView(ref pResource.GetPinnableReference(), pDesc, ppSRView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc* pDesc, ref ComPtr<TI0> ppSRView) where TI0 : unmanaged, IComVtbl<ID3D11ShaderResourceView>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateShaderResourceView(ref pResource, pDesc, (ID3D11ShaderResourceView**) ppSRView.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView(this ComPtr<ID3D11Device1> thisVtbl, Span<ID3D11Resource> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ShaderResourceViewDesc* pDesc, ref ID3D11ShaderResourceView* ppSRView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateShaderResourceView(ref pResource.GetPinnableReference(), pDesc, ref ppSRView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView(this ComPtr<ID3D11Device1> thisVtbl, Span<ID3D11Resource> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<ShaderResourceViewDesc> pDesc, ID3D11ShaderResourceView** ppSRView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateShaderResourceView(ref pResource.GetPinnableReference(), in pDesc.GetPinnableReference(), ppSRView);
    }

    /// <summary>To be documented.</summary>
    public static int CreateShaderResourceView<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly ShaderResourceViewDesc pDesc, ref ComPtr<TI0> ppSRView) where TI0 : unmanaged, IComVtbl<ID3D11ShaderResourceView>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateShaderResourceView(ref pResource, in pDesc, (ID3D11ShaderResourceView**) ppSRView.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateShaderResourceView(this ComPtr<ID3D11Device1> thisVtbl, Span<ID3D11Resource> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<ShaderResourceViewDesc> pDesc, ref ID3D11ShaderResourceView* ppSRView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateShaderResourceView(ref pResource.GetPinnableReference(), in pDesc.GetPinnableReference(), ref ppSRView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc* pDesc, ref ComPtr<TI1> ppUAView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11UnorderedAccessView>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateUnorderedAccessView((ID3D11Resource*) pResource.Handle, pDesc, (ID3D11UnorderedAccessView**) ppUAView.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc* pDesc, ref ID3D11UnorderedAccessView* ppUAView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateUnorderedAccessView((ID3D11Resource*) pResource.Handle, pDesc, ref ppUAView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<UnorderedAccessViewDesc> pDesc, ID3D11UnorderedAccessView** ppUAView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateUnorderedAccessView(pResource, in pDesc.GetPinnableReference(), ppUAView);
    }

    /// <summary>To be documented.</summary>
    public static int CreateUnorderedAccessView<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc pDesc, ref ComPtr<TI1> ppUAView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11UnorderedAccessView>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateUnorderedAccessView((ID3D11Resource*) pResource.Handle, in pDesc, (ID3D11UnorderedAccessView**) ppUAView.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<UnorderedAccessViewDesc> pDesc, ref ID3D11UnorderedAccessView* ppUAView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateUnorderedAccessView(pResource, in pDesc.GetPinnableReference(), ref ppUAView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc pDesc, ref ID3D11UnorderedAccessView* ppUAView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateUnorderedAccessView((ID3D11Resource*) pResource.Handle, in pDesc, ref ppUAView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView(this ComPtr<ID3D11Device1> thisVtbl, Span<ID3D11Resource> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc* pDesc, ID3D11UnorderedAccessView** ppUAView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateUnorderedAccessView(ref pResource.GetPinnableReference(), pDesc, ppUAView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc* pDesc, ref ComPtr<TI0> ppUAView) where TI0 : unmanaged, IComVtbl<ID3D11UnorderedAccessView>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateUnorderedAccessView(ref pResource, pDesc, (ID3D11UnorderedAccessView**) ppUAView.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView(this ComPtr<ID3D11Device1> thisVtbl, Span<ID3D11Resource> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] UnorderedAccessViewDesc* pDesc, ref ID3D11UnorderedAccessView* ppUAView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateUnorderedAccessView(ref pResource.GetPinnableReference(), pDesc, ref ppUAView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView(this ComPtr<ID3D11Device1> thisVtbl, Span<ID3D11Resource> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<UnorderedAccessViewDesc> pDesc, ID3D11UnorderedAccessView** ppUAView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateUnorderedAccessView(ref pResource.GetPinnableReference(), in pDesc.GetPinnableReference(), ppUAView);
    }

    /// <summary>To be documented.</summary>
    public static int CreateUnorderedAccessView<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly UnorderedAccessViewDesc pDesc, ref ComPtr<TI0> ppUAView) where TI0 : unmanaged, IComVtbl<ID3D11UnorderedAccessView>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateUnorderedAccessView(ref pResource, in pDesc, (ID3D11UnorderedAccessView**) ppUAView.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateUnorderedAccessView(this ComPtr<ID3D11Device1> thisVtbl, Span<ID3D11Resource> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<UnorderedAccessViewDesc> pDesc, ref ID3D11UnorderedAccessView* ppUAView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateUnorderedAccessView(ref pResource.GetPinnableReference(), in pDesc.GetPinnableReference(), ref ppUAView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc* pDesc, ref ComPtr<TI1> ppRTView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11RenderTargetView>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateRenderTargetView((ID3D11Resource*) pResource.Handle, pDesc, (ID3D11RenderTargetView**) ppRTView.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc* pDesc, ref ID3D11RenderTargetView* ppRTView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateRenderTargetView((ID3D11Resource*) pResource.Handle, pDesc, ref ppRTView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<RenderTargetViewDesc> pDesc, ID3D11RenderTargetView** ppRTView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateRenderTargetView(pResource, in pDesc.GetPinnableReference(), ppRTView);
    }

    /// <summary>To be documented.</summary>
    public static int CreateRenderTargetView<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc pDesc, ref ComPtr<TI1> ppRTView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11RenderTargetView>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateRenderTargetView((ID3D11Resource*) pResource.Handle, in pDesc, (ID3D11RenderTargetView**) ppRTView.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<RenderTargetViewDesc> pDesc, ref ID3D11RenderTargetView* ppRTView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateRenderTargetView(pResource, in pDesc.GetPinnableReference(), ref ppRTView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc pDesc, ref ID3D11RenderTargetView* ppRTView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateRenderTargetView((ID3D11Resource*) pResource.Handle, in pDesc, ref ppRTView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView(this ComPtr<ID3D11Device1> thisVtbl, Span<ID3D11Resource> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc* pDesc, ID3D11RenderTargetView** ppRTView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateRenderTargetView(ref pResource.GetPinnableReference(), pDesc, ppRTView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc* pDesc, ref ComPtr<TI0> ppRTView) where TI0 : unmanaged, IComVtbl<ID3D11RenderTargetView>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateRenderTargetView(ref pResource, pDesc, (ID3D11RenderTargetView**) ppRTView.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView(this ComPtr<ID3D11Device1> thisVtbl, Span<ID3D11Resource> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RenderTargetViewDesc* pDesc, ref ID3D11RenderTargetView* ppRTView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateRenderTargetView(ref pResource.GetPinnableReference(), pDesc, ref ppRTView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView(this ComPtr<ID3D11Device1> thisVtbl, Span<ID3D11Resource> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<RenderTargetViewDesc> pDesc, ID3D11RenderTargetView** ppRTView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateRenderTargetView(ref pResource.GetPinnableReference(), in pDesc.GetPinnableReference(), ppRTView);
    }

    /// <summary>To be documented.</summary>
    public static int CreateRenderTargetView<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RenderTargetViewDesc pDesc, ref ComPtr<TI0> ppRTView) where TI0 : unmanaged, IComVtbl<ID3D11RenderTargetView>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateRenderTargetView(ref pResource, in pDesc, (ID3D11RenderTargetView**) ppRTView.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRenderTargetView(this ComPtr<ID3D11Device1> thisVtbl, Span<ID3D11Resource> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<RenderTargetViewDesc> pDesc, ref ID3D11RenderTargetView* ppRTView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateRenderTargetView(ref pResource.GetPinnableReference(), in pDesc.GetPinnableReference(), ref ppRTView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilViewDesc* pDesc, ref ComPtr<TI1> ppDepthStencilView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11DepthStencilView>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDepthStencilView((ID3D11Resource*) pResource.Handle, pDesc, (ID3D11DepthStencilView**) ppDepthStencilView.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilViewDesc* pDesc, ref ID3D11DepthStencilView* ppDepthStencilView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDepthStencilView((ID3D11Resource*) pResource.Handle, pDesc, ref ppDepthStencilView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<DepthStencilViewDesc> pDesc, ID3D11DepthStencilView** ppDepthStencilView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDepthStencilView(pResource, in pDesc.GetPinnableReference(), ppDepthStencilView);
    }

    /// <summary>To be documented.</summary>
    public static int CreateDepthStencilView<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilViewDesc pDesc, ref ComPtr<TI1> ppDepthStencilView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11DepthStencilView>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDepthStencilView((ID3D11Resource*) pResource.Handle, in pDesc, (ID3D11DepthStencilView**) ppDepthStencilView.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView(this ComPtr<ID3D11Device1> thisVtbl, ID3D11Resource* pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<DepthStencilViewDesc> pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDepthStencilView(pResource, in pDesc.GetPinnableReference(), ref ppDepthStencilView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ComPtr<TI0> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilViewDesc pDesc, ref ID3D11DepthStencilView* ppDepthStencilView) where TI0 : unmanaged, IComVtbl<ID3D11Resource>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDepthStencilView((ID3D11Resource*) pResource.Handle, in pDesc, ref ppDepthStencilView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView(this ComPtr<ID3D11Device1> thisVtbl, Span<ID3D11Resource> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilViewDesc* pDesc, ID3D11DepthStencilView** ppDepthStencilView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDepthStencilView(ref pResource.GetPinnableReference(), pDesc, ppDepthStencilView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilViewDesc* pDesc, ref ComPtr<TI0> ppDepthStencilView) where TI0 : unmanaged, IComVtbl<ID3D11DepthStencilView>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDepthStencilView(ref pResource, pDesc, (ID3D11DepthStencilView**) ppDepthStencilView.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView(this ComPtr<ID3D11Device1> thisVtbl, Span<ID3D11Resource> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilViewDesc* pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDepthStencilView(ref pResource.GetPinnableReference(), pDesc, ref ppDepthStencilView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView(this ComPtr<ID3D11Device1> thisVtbl, Span<ID3D11Resource> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<DepthStencilViewDesc> pDesc, ID3D11DepthStencilView** ppDepthStencilView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDepthStencilView(ref pResource.GetPinnableReference(), in pDesc.GetPinnableReference(), ppDepthStencilView);
    }

    /// <summary>To be documented.</summary>
    public static int CreateDepthStencilView<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ref ID3D11Resource pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilViewDesc pDesc, ref ComPtr<TI0> ppDepthStencilView) where TI0 : unmanaged, IComVtbl<ID3D11DepthStencilView>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDepthStencilView(ref pResource, in pDesc, (ID3D11DepthStencilView**) ppDepthStencilView.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilView(this ComPtr<ID3D11Device1> thisVtbl, Span<ID3D11Resource> pResource, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<DepthStencilViewDesc> pDesc, ref ID3D11DepthStencilView* ppDepthStencilView)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDepthStencilView(ref pResource.GetPinnableReference(), in pDesc.GetPinnableReference(), ref ppDepthStencilView);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] InputElementDesc* pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ComPtr<TI0> ppInputLayout) where TI0 : unmanaged, IComVtbl<ID3D11InputLayout>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateInputLayout(pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, (ID3D11InputLayout**) ppInputLayout.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] InputElementDesc* pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecodeWithInputSignature, nuint BytecodeLength, ID3D11InputLayout** ppInputLayout) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateInputLayout(pInputElementDescs, NumElements, in pShaderBytecodeWithInputSignature.GetPinnableReference(), BytecodeLength, ppInputLayout);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] InputElementDesc* pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ComPtr<TI0> ppInputLayout) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11InputLayout>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateInputLayout(pInputElementDescs, NumElements, in pShaderBytecodeWithInputSignature, BytecodeLength, (ID3D11InputLayout**) ppInputLayout.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] InputElementDesc* pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ID3D11InputLayout* ppInputLayout) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateInputLayout(pInputElementDescs, NumElements, in pShaderBytecodeWithInputSignature.GetPinnableReference(), BytecodeLength, ref ppInputLayout);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<InputElementDesc> pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ID3D11InputLayout** ppInputLayout)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateInputLayout(in pInputElementDescs.GetPinnableReference(), NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly InputElementDesc pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ComPtr<TI0> ppInputLayout) where TI0 : unmanaged, IComVtbl<ID3D11InputLayout>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateInputLayout(in pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, (ID3D11InputLayout**) ppInputLayout.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<InputElementDesc> pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ID3D11InputLayout* ppInputLayout)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateInputLayout(in pInputElementDescs.GetPinnableReference(), NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ref ppInputLayout);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<InputElementDesc> pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecodeWithInputSignature, nuint BytecodeLength, ID3D11InputLayout** ppInputLayout) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateInputLayout(in pInputElementDescs.GetPinnableReference(), NumElements, in pShaderBytecodeWithInputSignature.GetPinnableReference(), BytecodeLength, ppInputLayout);
    }

    /// <summary>To be documented.</summary>
    public static int CreateInputLayout<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly InputElementDesc pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ComPtr<TI0> ppInputLayout) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11InputLayout>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateInputLayout(in pInputElementDescs, NumElements, in pShaderBytecodeWithInputSignature, BytecodeLength, (ID3D11InputLayout**) ppInputLayout.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateInputLayout<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<InputElementDesc> pInputElementDescs, uint NumElements, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecodeWithInputSignature, nuint BytecodeLength, ref ID3D11InputLayout* ppInputLayout) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateInputLayout(in pInputElementDescs.GetPinnableReference(), NumElements, in pShaderBytecodeWithInputSignature.GetPinnableReference(), BytecodeLength, ref ppInputLayout);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppVertexShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11VertexShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateVertexShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11VertexShader**) ppVertexShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11VertexShader* ppVertexShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateVertexShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppVertexShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11VertexShader** ppVertexShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateVertexShader(pShaderBytecode, BytecodeLength, ref pClassLinkage.GetPinnableReference(), ppVertexShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppVertexShader) where TI0 : unmanaged, IComVtbl<ID3D11VertexShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateVertexShader(pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11VertexShader**) ppVertexShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11VertexShader* ppVertexShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateVertexShader(pShaderBytecode, BytecodeLength, ref pClassLinkage.GetPinnableReference(), ref ppVertexShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11VertexShader** ppVertexShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateVertexShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pClassLinkage, ppVertexShader);
    }

    /// <summary>To be documented.</summary>
    public static int CreateVertexShader<T0, TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppVertexShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11VertexShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateVertexShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11VertexShader**) ppVertexShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11VertexShader* ppVertexShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateVertexShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pClassLinkage, ref ppVertexShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11VertexShader* ppVertexShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateVertexShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppVertexShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11VertexShader** ppVertexShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateVertexShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, ref pClassLinkage.GetPinnableReference(), ppVertexShader);
    }

    /// <summary>To be documented.</summary>
    public static int CreateVertexShader<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppVertexShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11VertexShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateVertexShader(in pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11VertexShader**) ppVertexShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateVertexShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11VertexShader* ppVertexShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateVertexShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, ref pClassLinkage.GetPinnableReference(), ref ppVertexShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShader(pShaderBytecode, BytecodeLength, ref pClassLinkage.GetPinnableReference(), ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShader(pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShader(pShaderBytecode, BytecodeLength, ref pClassLinkage.GetPinnableReference(), ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pClassLinkage, ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static int CreateGeometryShader<T0, TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pClassLinkage, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, ref pClassLinkage.GetPinnableReference(), ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static int CreateGeometryShader<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShader(in pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, ref pClassLinkage.GetPinnableReference(), ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage.GetPinnableReference(), ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage.GetPinnableReference(), ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<uint> pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides.GetPinnableReference(), NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<uint> pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides.GetPinnableReference(), NumStrides, RasterizedStream, pClassLinkage, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<uint> pBufferStrides, uint NumStrides, uint RasterizedStream, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides.GetPinnableReference(), NumStrides, RasterizedStream, ref pClassLinkage.GetPinnableReference(), ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<uint> pBufferStrides, uint NumStrides, uint RasterizedStream, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides.GetPinnableReference(), NumStrides, RasterizedStream, ref pClassLinkage.GetPinnableReference(), ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SODeclarationEntry> pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration.GetPinnableReference(), NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SODeclarationEntry> pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration.GetPinnableReference(), NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SODeclarationEntry> pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration.GetPinnableReference(), NumEntries, pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage.GetPinnableReference(), ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SODeclarationEntry> pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration.GetPinnableReference(), NumEntries, pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage.GetPinnableReference(), ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SODeclarationEntry> pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<uint> pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration.GetPinnableReference(), NumEntries, in pBufferStrides.GetPinnableReference(), NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SODeclarationEntry> pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<uint> pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration.GetPinnableReference(), NumEntries, in pBufferStrides.GetPinnableReference(), NumStrides, RasterizedStream, pClassLinkage, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SODeclarationEntry> pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<uint> pBufferStrides, uint NumStrides, uint RasterizedStream, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration.GetPinnableReference(), NumEntries, in pBufferStrides.GetPinnableReference(), NumStrides, RasterizedStream, ref pClassLinkage.GetPinnableReference(), ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SODeclarationEntry> pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<uint> pBufferStrides, uint NumStrides, uint RasterizedStream, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(pShaderBytecode, BytecodeLength, in pSODeclaration.GetPinnableReference(), NumEntries, in pBufferStrides.GetPinnableReference(), NumStrides, RasterizedStream, ref pClassLinkage.GetPinnableReference(), ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage.GetPinnableReference(), ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage.GetPinnableReference(), ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<uint> pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides.GetPinnableReference(), NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<uint> pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides.GetPinnableReference(), NumStrides, RasterizedStream, pClassLinkage, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<uint> pBufferStrides, uint NumStrides, uint RasterizedStream, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides.GetPinnableReference(), NumStrides, RasterizedStream, ref pClassLinkage.GetPinnableReference(), ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SODeclarationEntry* pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<uint> pBufferStrides, uint NumStrides, uint RasterizedStream, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pSODeclaration, NumEntries, in pBufferStrides.GetPinnableReference(), NumStrides, RasterizedStream, ref pClassLinkage.GetPinnableReference(), ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SODeclarationEntry> pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode.GetPinnableReference(), BytecodeLength, in pSODeclaration.GetPinnableReference(), NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SODeclarationEntry> pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode.GetPinnableReference(), BytecodeLength, in pSODeclaration.GetPinnableReference(), NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SODeclarationEntry> pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode.GetPinnableReference(), BytecodeLength, in pSODeclaration.GetPinnableReference(), NumEntries, pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage.GetPinnableReference(), ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SODeclarationEntry> pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* pBufferStrides, uint NumStrides, uint RasterizedStream, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode.GetPinnableReference(), BytecodeLength, in pSODeclaration.GetPinnableReference(), NumEntries, pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage.GetPinnableReference(), ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SODeclarationEntry> pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<uint> pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode.GetPinnableReference(), BytecodeLength, in pSODeclaration.GetPinnableReference(), NumEntries, in pBufferStrides.GetPinnableReference(), NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static int CreateGeometryShaderWithStreamOutput<T0, TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SODeclarationEntry> pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<uint> pBufferStrides, uint NumStrides, uint RasterizedStream, ID3D11ClassLinkage* pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode.GetPinnableReference(), BytecodeLength, in pSODeclaration.GetPinnableReference(), NumEntries, in pBufferStrides.GetPinnableReference(), NumStrides, RasterizedStream, pClassLinkage, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ComPtr<TI0> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SODeclarationEntry> pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<uint> pBufferStrides, uint NumStrides, uint RasterizedStream, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11GeometryShader** ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode.GetPinnableReference(), BytecodeLength, in pSODeclaration.GetPinnableReference(), NumEntries, in pBufferStrides.GetPinnableReference(), NumStrides, RasterizedStream, ref pClassLinkage.GetPinnableReference(), ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static int CreateGeometryShaderWithStreamOutput<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SODeclarationEntry pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly uint pBufferStrides, uint NumStrides, uint RasterizedStream, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppGeometryShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11GeometryShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode, BytecodeLength, in pSODeclaration, NumEntries, in pBufferStrides, NumStrides, RasterizedStream, ref pClassLinkage, (ID3D11GeometryShader**) ppGeometryShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateGeometryShaderWithStreamOutput<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SODeclarationEntry> pSODeclaration, uint NumEntries, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<uint> pBufferStrides, uint NumStrides, uint RasterizedStream, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11GeometryShader* ppGeometryShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateGeometryShaderWithStreamOutput(in pShaderBytecode.GetPinnableReference(), BytecodeLength, in pSODeclaration.GetPinnableReference(), NumEntries, in pBufferStrides.GetPinnableReference(), NumStrides, RasterizedStream, ref pClassLinkage.GetPinnableReference(), ref ppGeometryShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppPixelShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11PixelShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreatePixelShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11PixelShader**) ppPixelShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11PixelShader* ppPixelShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreatePixelShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppPixelShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11PixelShader** ppPixelShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreatePixelShader(pShaderBytecode, BytecodeLength, ref pClassLinkage.GetPinnableReference(), ppPixelShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppPixelShader) where TI0 : unmanaged, IComVtbl<ID3D11PixelShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreatePixelShader(pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11PixelShader**) ppPixelShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11PixelShader* ppPixelShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreatePixelShader(pShaderBytecode, BytecodeLength, ref pClassLinkage.GetPinnableReference(), ref ppPixelShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11PixelShader** ppPixelShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreatePixelShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pClassLinkage, ppPixelShader);
    }

    /// <summary>To be documented.</summary>
    public static int CreatePixelShader<T0, TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppPixelShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11PixelShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreatePixelShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11PixelShader**) ppPixelShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11PixelShader* ppPixelShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreatePixelShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pClassLinkage, ref ppPixelShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11PixelShader* ppPixelShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreatePixelShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppPixelShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11PixelShader** ppPixelShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreatePixelShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, ref pClassLinkage.GetPinnableReference(), ppPixelShader);
    }

    /// <summary>To be documented.</summary>
    public static int CreatePixelShader<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppPixelShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11PixelShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreatePixelShader(in pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11PixelShader**) ppPixelShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePixelShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11PixelShader* ppPixelShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreatePixelShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, ref pClassLinkage.GetPinnableReference(), ref ppPixelShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppHullShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11HullShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateHullShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11HullShader**) ppHullShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11HullShader* ppHullShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateHullShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppHullShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11HullShader** ppHullShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateHullShader(pShaderBytecode, BytecodeLength, ref pClassLinkage.GetPinnableReference(), ppHullShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppHullShader) where TI0 : unmanaged, IComVtbl<ID3D11HullShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateHullShader(pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11HullShader**) ppHullShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11HullShader* ppHullShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateHullShader(pShaderBytecode, BytecodeLength, ref pClassLinkage.GetPinnableReference(), ref ppHullShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11HullShader** ppHullShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateHullShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pClassLinkage, ppHullShader);
    }

    /// <summary>To be documented.</summary>
    public static int CreateHullShader<T0, TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppHullShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11HullShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateHullShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11HullShader**) ppHullShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11HullShader* ppHullShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateHullShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pClassLinkage, ref ppHullShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11HullShader* ppHullShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateHullShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppHullShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11HullShader** ppHullShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateHullShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, ref pClassLinkage.GetPinnableReference(), ppHullShader);
    }

    /// <summary>To be documented.</summary>
    public static int CreateHullShader<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppHullShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11HullShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateHullShader(in pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11HullShader**) ppHullShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateHullShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11HullShader* ppHullShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateHullShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, ref pClassLinkage.GetPinnableReference(), ref ppHullShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppDomainShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11DomainShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDomainShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11DomainShader**) ppDomainShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11DomainShader* ppDomainShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDomainShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppDomainShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11DomainShader** ppDomainShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDomainShader(pShaderBytecode, BytecodeLength, ref pClassLinkage.GetPinnableReference(), ppDomainShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppDomainShader) where TI0 : unmanaged, IComVtbl<ID3D11DomainShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDomainShader(pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11DomainShader**) ppDomainShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11DomainShader* ppDomainShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDomainShader(pShaderBytecode, BytecodeLength, ref pClassLinkage.GetPinnableReference(), ref ppDomainShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11DomainShader** ppDomainShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDomainShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pClassLinkage, ppDomainShader);
    }

    /// <summary>To be documented.</summary>
    public static int CreateDomainShader<T0, TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppDomainShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11DomainShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDomainShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11DomainShader**) ppDomainShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11DomainShader* ppDomainShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDomainShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pClassLinkage, ref ppDomainShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11DomainShader* ppDomainShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDomainShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppDomainShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11DomainShader** ppDomainShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDomainShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, ref pClassLinkage.GetPinnableReference(), ppDomainShader);
    }

    /// <summary>To be documented.</summary>
    public static int CreateDomainShader<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppDomainShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11DomainShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDomainShader(in pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11DomainShader**) ppDomainShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDomainShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11DomainShader* ppDomainShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDomainShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, ref pClassLinkage.GetPinnableReference(), ref ppDomainShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppComputeShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11ComputeShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateComputeShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11ComputeShader**) ppComputeShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateComputeShader(pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppComputeShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11ComputeShader** ppComputeShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateComputeShader(pShaderBytecode, BytecodeLength, ref pClassLinkage.GetPinnableReference(), ppComputeShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppComputeShader) where TI0 : unmanaged, IComVtbl<ID3D11ComputeShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateComputeShader(pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11ComputeShader**) ppComputeShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11ComputeShader* ppComputeShader)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateComputeShader(pShaderBytecode, BytecodeLength, ref pClassLinkage.GetPinnableReference(), ref ppComputeShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ID3D11ComputeShader** ppComputeShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateComputeShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pClassLinkage, ppComputeShader);
    }

    /// <summary>To be documented.</summary>
    public static int CreateComputeShader<T0, TI0, TI1>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ComPtr<TI1> ppComputeShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0> where TI1 : unmanaged, IComVtbl<ID3D11ComputeShader>, IComVtbl<TI1>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateComputeShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, (ID3D11ComputeShader**) ppComputeShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, ID3D11ClassLinkage* pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateComputeShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, pClassLinkage, ref ppComputeShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ComPtr<TI0> pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateComputeShader(in pShaderBytecode, BytecodeLength, (ID3D11ClassLinkage*) pClassLinkage.Handle, ref ppComputeShader);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ID3D11ComputeShader** ppComputeShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateComputeShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, ref pClassLinkage.GetPinnableReference(), ppComputeShader);
    }

    /// <summary>To be documented.</summary>
    public static int CreateComputeShader<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly T0 pShaderBytecode, nuint BytecodeLength, ref ID3D11ClassLinkage pClassLinkage, ref ComPtr<TI0> ppComputeShader) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<ID3D11ComputeShader>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateComputeShader(in pShaderBytecode, BytecodeLength, ref pClassLinkage, (ID3D11ComputeShader**) ppComputeShader.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateComputeShader<T0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pShaderBytecode, nuint BytecodeLength, Span<ID3D11ClassLinkage> pClassLinkage, ref ID3D11ComputeShader* ppComputeShader) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateComputeShader(in pShaderBytecode.GetPinnableReference(), BytecodeLength, ref pClassLinkage.GetPinnableReference(), ref ppComputeShader);
    }

    /// <summary>To be documented.</summary>
    public static int CreateClassLinkage<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ref ComPtr<TI0> ppLinkage) where TI0 : unmanaged, IComVtbl<ID3D11ClassLinkage>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateClassLinkage((ID3D11ClassLinkage**) ppLinkage.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] BlendDesc* pBlendStateDesc, ref ComPtr<TI0> ppBlendState) where TI0 : unmanaged, IComVtbl<ID3D11BlendState>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateBlendState(pBlendStateDesc, (ID3D11BlendState**) ppBlendState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<BlendDesc> pBlendStateDesc, ID3D11BlendState** ppBlendState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateBlendState(in pBlendStateDesc.GetPinnableReference(), ppBlendState);
    }

    /// <summary>To be documented.</summary>
    public static int CreateBlendState<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BlendDesc pBlendStateDesc, ref ComPtr<TI0> ppBlendState) where TI0 : unmanaged, IComVtbl<ID3D11BlendState>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateBlendState(in pBlendStateDesc, (ID3D11BlendState**) ppBlendState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<BlendDesc> pBlendStateDesc, ref ID3D11BlendState* ppBlendState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateBlendState(in pBlendStateDesc.GetPinnableReference(), ref ppBlendState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilState<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] DepthStencilDesc* pDepthStencilDesc, ref ComPtr<TI0> ppDepthStencilState) where TI0 : unmanaged, IComVtbl<ID3D11DepthStencilState>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDepthStencilState(pDepthStencilDesc, (ID3D11DepthStencilState**) ppDepthStencilState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<DepthStencilDesc> pDepthStencilDesc, ID3D11DepthStencilState** ppDepthStencilState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDepthStencilState(in pDepthStencilDesc.GetPinnableReference(), ppDepthStencilState);
    }

    /// <summary>To be documented.</summary>
    public static int CreateDepthStencilState<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly DepthStencilDesc pDepthStencilDesc, ref ComPtr<TI0> ppDepthStencilState) where TI0 : unmanaged, IComVtbl<ID3D11DepthStencilState>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDepthStencilState(in pDepthStencilDesc, (ID3D11DepthStencilState**) ppDepthStencilState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDepthStencilState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<DepthStencilDesc> pDepthStencilDesc, ref ID3D11DepthStencilState* ppDepthStencilState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDepthStencilState(in pDepthStencilDesc.GetPinnableReference(), ref ppDepthStencilState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RasterizerDesc* pRasterizerDesc, ref ComPtr<TI0> ppRasterizerState) where TI0 : unmanaged, IComVtbl<ID3D11RasterizerState>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateRasterizerState(pRasterizerDesc, (ID3D11RasterizerState**) ppRasterizerState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<RasterizerDesc> pRasterizerDesc, ID3D11RasterizerState** ppRasterizerState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateRasterizerState(in pRasterizerDesc.GetPinnableReference(), ppRasterizerState);
    }

    /// <summary>To be documented.</summary>
    public static int CreateRasterizerState<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RasterizerDesc pRasterizerDesc, ref ComPtr<TI0> ppRasterizerState) where TI0 : unmanaged, IComVtbl<ID3D11RasterizerState>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateRasterizerState(in pRasterizerDesc, (ID3D11RasterizerState**) ppRasterizerState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<RasterizerDesc> pRasterizerDesc, ref ID3D11RasterizerState* ppRasterizerState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateRasterizerState(in pRasterizerDesc.GetPinnableReference(), ref ppRasterizerState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateSamplerState<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SamplerDesc* pSamplerDesc, ref ComPtr<TI0> ppSamplerState) where TI0 : unmanaged, IComVtbl<ID3D11SamplerState>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateSamplerState(pSamplerDesc, (ID3D11SamplerState**) ppSamplerState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateSamplerState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SamplerDesc> pSamplerDesc, ID3D11SamplerState** ppSamplerState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateSamplerState(in pSamplerDesc.GetPinnableReference(), ppSamplerState);
    }

    /// <summary>To be documented.</summary>
    public static int CreateSamplerState<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly SamplerDesc pSamplerDesc, ref ComPtr<TI0> ppSamplerState) where TI0 : unmanaged, IComVtbl<ID3D11SamplerState>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateSamplerState(in pSamplerDesc, (ID3D11SamplerState**) ppSamplerState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateSamplerState(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<SamplerDesc> pSamplerDesc, ref ID3D11SamplerState* ppSamplerState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateSamplerState(in pSamplerDesc.GetPinnableReference(), ref ppSamplerState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateQuery<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] QueryDesc* pQueryDesc, ref ComPtr<TI0> ppQuery) where TI0 : unmanaged, IComVtbl<ID3D11Query>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateQuery(pQueryDesc, (ID3D11Query**) ppQuery.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateQuery(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<QueryDesc> pQueryDesc, ID3D11Query** ppQuery)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateQuery(in pQueryDesc.GetPinnableReference(), ppQuery);
    }

    /// <summary>To be documented.</summary>
    public static int CreateQuery<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly QueryDesc pQueryDesc, ref ComPtr<TI0> ppQuery) where TI0 : unmanaged, IComVtbl<ID3D11Query>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateQuery(in pQueryDesc, (ID3D11Query**) ppQuery.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateQuery(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<QueryDesc> pQueryDesc, ref ID3D11Query* ppQuery)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateQuery(in pQueryDesc.GetPinnableReference(), ref ppQuery);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePredicate<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] QueryDesc* pPredicateDesc, ref ComPtr<TI0> ppPredicate) where TI0 : unmanaged, IComVtbl<ID3D11Predicate>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreatePredicate(pPredicateDesc, (ID3D11Predicate**) ppPredicate.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePredicate(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<QueryDesc> pPredicateDesc, ID3D11Predicate** ppPredicate)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreatePredicate(in pPredicateDesc.GetPinnableReference(), ppPredicate);
    }

    /// <summary>To be documented.</summary>
    public static int CreatePredicate<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly QueryDesc pPredicateDesc, ref ComPtr<TI0> ppPredicate) where TI0 : unmanaged, IComVtbl<ID3D11Predicate>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreatePredicate(in pPredicateDesc, (ID3D11Predicate**) ppPredicate.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreatePredicate(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<QueryDesc> pPredicateDesc, ref ID3D11Predicate* ppPredicate)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreatePredicate(in pPredicateDesc.GetPinnableReference(), ref ppPredicate);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateCounter<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pCounterDesc, ref ComPtr<TI0> ppCounter) where TI0 : unmanaged, IComVtbl<ID3D11Counter>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateCounter(pCounterDesc, (ID3D11Counter**) ppCounter.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pCounterDesc, ID3D11Counter** ppCounter)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateCounter(in pCounterDesc.GetPinnableReference(), ppCounter);
    }

    /// <summary>To be documented.</summary>
    public static int CreateCounter<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly CounterDesc pCounterDesc, ref ComPtr<TI0> ppCounter) where TI0 : unmanaged, IComVtbl<ID3D11Counter>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateCounter(in pCounterDesc, (ID3D11Counter**) ppCounter.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pCounterDesc, ref ID3D11Counter* ppCounter)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateCounter(in pCounterDesc.GetPinnableReference(), ref ppCounter);
    }

    /// <summary>To be documented.</summary>
    public static int CreateDeferredContext<TI0>(this ComPtr<ID3D11Device1> thisVtbl, uint ContextFlags, ref ComPtr<TI0> ppDeferredContext) where TI0 : unmanaged, IComVtbl<ID3D11DeviceContext>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDeferredContext(ContextFlags, (ID3D11DeviceContext**) ppDeferredContext.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource<TI0>(this ComPtr<ID3D11Device1> thisVtbl, void* hResource, out ComPtr<TI0> ppResource) where TI0 : unmanaged, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        ppResource = default;
        return @this->OpenSharedResource(hResource, SilkMarshal.GuidPtrOf<TI0>(), (void**) ppResource.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource(this ComPtr<ID3D11Device1> thisVtbl, void* hResource, Span<Guid> ReturnedInterface, void** ppResource)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResource(hResource, ref ReturnedInterface.GetPinnableReference(), ppResource);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource(this ComPtr<ID3D11Device1> thisVtbl, void* hResource, Span<Guid> ReturnedInterface, ref void* ppResource)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResource(hResource, ref ReturnedInterface.GetPinnableReference(), ref ppResource);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource<T0>(this ComPtr<ID3D11Device1> thisVtbl, Span<T0> hResource, Guid* ReturnedInterface, void** ppResource) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResource(ref hResource.GetPinnableReference(), ReturnedInterface, ppResource);
    }

    /// <summary>To be documented.</summary>
    public static int OpenSharedResource<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, ref T0 hResource, out ComPtr<TI0> ppResource) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        ppResource = default;
        return @this->OpenSharedResource(ref hResource, SilkMarshal.GuidPtrOf<TI0>(), (void**) ppResource.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource<T0>(this ComPtr<ID3D11Device1> thisVtbl, Span<T0> hResource, Guid* ReturnedInterface, ref void* ppResource) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResource(ref hResource.GetPinnableReference(), ReturnedInterface, ref ppResource);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource<T0>(this ComPtr<ID3D11Device1> thisVtbl, Span<T0> hResource, Span<Guid> ReturnedInterface, void** ppResource) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResource(ref hResource.GetPinnableReference(), ref ReturnedInterface.GetPinnableReference(), ppResource);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource<T0>(this ComPtr<ID3D11Device1> thisVtbl, Span<T0> hResource, Span<Guid> ReturnedInterface, ref void* ppResource) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResource(ref hResource.GetPinnableReference(), ref ReturnedInterface.GetPinnableReference(), ref ppResource);
    }

    /// <summary>To be documented.</summary>
    public static int CheckFormatSupport(this ComPtr<ID3D11Device1> thisVtbl, Silk.NET.DXGI.Format Format, Span<uint> pFormatSupport)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckFormatSupport(Format, ref pFormatSupport.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static int CheckMultisampleQualityLevels(this ComPtr<ID3D11Device1> thisVtbl, Silk.NET.DXGI.Format Format, uint SampleCount, Span<uint> pNumQualityLevels)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckMultisampleQualityLevels(Format, SampleCount, ref pNumQualityLevels.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static void CheckCounterInfo(this ComPtr<ID3D11Device1> thisVtbl, Span<CounterInfo> pCounterInfo)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        @this->CheckCounterInfo(ref pCounterInfo.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CounterDesc* pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(pDesc, ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, CounterType* pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), pType, ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, uint* pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), pActiveCounters, szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, byte* szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, Span<byte> szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), ref szName.GetPinnableReference(), ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, uint* pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, pNameLength, szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, byte* szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, Span<byte> szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), ref szUnits.GetPinnableReference(), ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, uint* pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, pUnitsLength, szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, byte* szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, Span<byte> szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), ref szDescription.GetPinnableReference(), ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, uint* pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, pDescriptionLength);
    }

    /// <summary>To be documented.</summary>
    public static int CheckCounter(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<CounterDesc> pDesc, Span<CounterType> pType, Span<uint> pActiveCounters, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szName, Span<uint> pNameLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szUnits, Span<uint> pUnitsLength, [UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPStr)] string szDescription, Span<uint> pDescriptionLength)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckCounter(in pDesc.GetPinnableReference(), ref pType.GetPinnableReference(), ref pActiveCounters.GetPinnableReference(), szName, ref pNameLength.GetPinnableReference(), szUnits, ref pUnitsLength.GetPinnableReference(), szDescription, ref pDescriptionLength.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static int CheckFeatureSupport<T0>(this ComPtr<ID3D11Device1> thisVtbl, Feature Feature, Span<T0> pFeatureSupportData, uint FeatureSupportDataSize) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CheckFeatureSupport(Feature, ref pFeatureSupportData.GetPinnableReference(), FeatureSupportDataSize);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData<T0>(this ComPtr<ID3D11Device1> thisVtbl, Guid* guid, uint* pDataSize, Span<T0> pData) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->GetPrivateData(guid, pDataSize, ref pData.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData(this ComPtr<ID3D11Device1> thisVtbl, Guid* guid, Span<uint> pDataSize, void* pData)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->GetPrivateData(guid, ref pDataSize.GetPinnableReference(), pData);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData<T0>(this ComPtr<ID3D11Device1> thisVtbl, Guid* guid, Span<uint> pDataSize, Span<T0> pData) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->GetPrivateData(guid, ref pDataSize.GetPinnableReference(), ref pData.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData(this ComPtr<ID3D11Device1> thisVtbl, Span<Guid> guid, uint* pDataSize, void* pData)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->GetPrivateData(ref guid.GetPinnableReference(), pDataSize, pData);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData<T0>(this ComPtr<ID3D11Device1> thisVtbl, Span<Guid> guid, uint* pDataSize, Span<T0> pData) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->GetPrivateData(ref guid.GetPinnableReference(), pDataSize, ref pData.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int GetPrivateData(this ComPtr<ID3D11Device1> thisVtbl, Span<Guid> guid, Span<uint> pDataSize, void* pData)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->GetPrivateData(ref guid.GetPinnableReference(), ref pDataSize.GetPinnableReference(), pData);
    }

    /// <summary>To be documented.</summary>
    public static int GetPrivateData<T0>(this ComPtr<ID3D11Device1> thisVtbl, Span<Guid> guid, Span<uint> pDataSize, Span<T0> pData) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->GetPrivateData(ref guid.GetPinnableReference(), ref pDataSize.GetPinnableReference(), ref pData.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int SetPrivateData<T0>(this ComPtr<ID3D11Device1> thisVtbl, Guid* guid, uint DataSize, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pData) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->SetPrivateData(guid, DataSize, in pData.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int SetPrivateData(this ComPtr<ID3D11Device1> thisVtbl, Span<Guid> guid, uint DataSize, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pData)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->SetPrivateData(ref guid.GetPinnableReference(), DataSize, pData);
    }

    /// <summary>To be documented.</summary>
    public static int SetPrivateData<T0>(this ComPtr<ID3D11Device1> thisVtbl, Span<Guid> guid, uint DataSize, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<T0> pData) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->SetPrivateData(ref guid.GetPinnableReference(), DataSize, in pData.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int SetPrivateDataInterface<TI0>(this ComPtr<ID3D11Device1> thisVtbl, Guid* guid, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ComPtr<TI0> pData) where TI0 : unmanaged, IComVtbl<Silk.NET.Core.Native.IUnknown>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->SetPrivateDataInterface(guid, (Silk.NET.Core.Native.IUnknown*) pData.Handle);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int SetPrivateDataInterface(this ComPtr<ID3D11Device1> thisVtbl, Guid* guid, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.IUnknown> pData)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->SetPrivateDataInterface(guid, in pData.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int SetPrivateDataInterface(this ComPtr<ID3D11Device1> thisVtbl, Span<Guid> guid, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.IUnknown* pData)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->SetPrivateDataInterface(ref guid.GetPinnableReference(), pData);
    }

    /// <summary>To be documented.</summary>
    public static int SetPrivateDataInterface<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ref Guid guid, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ComPtr<TI0> pData) where TI0 : unmanaged, IComVtbl<Silk.NET.Core.Native.IUnknown>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->SetPrivateDataInterface(ref guid, (Silk.NET.Core.Native.IUnknown*) pData.Handle);
    }

    /// <summary>To be documented.</summary>
    public static int SetPrivateDataInterface(this ComPtr<ID3D11Device1> thisVtbl, Span<Guid> guid, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.IUnknown> pData)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->SetPrivateDataInterface(ref guid.GetPinnableReference(), in pData.GetPinnableReference());
    }

    /// <summary>To be documented.</summary>
    public static void GetImmediateContext<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ref ComPtr<TI0> ppImmediateContext) where TI0 : unmanaged, IComVtbl<ID3D11DeviceContext>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        @this->GetImmediateContext((ID3D11DeviceContext**) ppImmediateContext.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static void GetImmediateContext1<TI0>(this ComPtr<ID3D11Device1> thisVtbl, ref ComPtr<TI0> ppImmediateContext) where TI0 : unmanaged, IComVtbl<ID3D11DeviceContext1>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        @this->GetImmediateContext1((ID3D11DeviceContext1**) ppImmediateContext.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static int CreateDeferredContext1<TI0>(this ComPtr<ID3D11Device1> thisVtbl, uint ContextFlags, ref ComPtr<TI0> ppDeferredContext) where TI0 : unmanaged, IComVtbl<ID3D11DeviceContext1>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDeferredContext1(ContextFlags, (ID3D11DeviceContext1**) ppDeferredContext.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState1<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] BlendDesc1* pBlendStateDesc, ref ComPtr<TI0> ppBlendState) where TI0 : unmanaged, IComVtbl<ID3D11BlendState1>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateBlendState1(pBlendStateDesc, (ID3D11BlendState1**) ppBlendState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState1(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<BlendDesc1> pBlendStateDesc, ID3D11BlendState1** ppBlendState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateBlendState1(in pBlendStateDesc.GetPinnableReference(), ppBlendState);
    }

    /// <summary>To be documented.</summary>
    public static int CreateBlendState1<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly BlendDesc1 pBlendStateDesc, ref ComPtr<TI0> ppBlendState) where TI0 : unmanaged, IComVtbl<ID3D11BlendState1>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateBlendState1(in pBlendStateDesc, (ID3D11BlendState1**) ppBlendState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateBlendState1(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<BlendDesc1> pBlendStateDesc, ref ID3D11BlendState1* ppBlendState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateBlendState1(in pBlendStateDesc.GetPinnableReference(), ref ppBlendState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState1<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] RasterizerDesc1* pRasterizerDesc, ref ComPtr<TI0> ppRasterizerState) where TI0 : unmanaged, IComVtbl<ID3D11RasterizerState1>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateRasterizerState1(pRasterizerDesc, (ID3D11RasterizerState1**) ppRasterizerState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState1(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<RasterizerDesc1> pRasterizerDesc, ID3D11RasterizerState1** ppRasterizerState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateRasterizerState1(in pRasterizerDesc.GetPinnableReference(), ppRasterizerState);
    }

    /// <summary>To be documented.</summary>
    public static int CreateRasterizerState1<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly RasterizerDesc1 pRasterizerDesc, ref ComPtr<TI0> ppRasterizerState) where TI0 : unmanaged, IComVtbl<ID3D11RasterizerState1>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateRasterizerState1(in pRasterizerDesc, (ID3D11RasterizerState1**) ppRasterizerState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateRasterizerState1(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<RasterizerDesc1> pRasterizerDesc, ref ID3D11RasterizerState1* ppRasterizerState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateRasterizerState1(in pRasterizerDesc.GetPinnableReference(), ref ppRasterizerState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TI0>(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ComPtr<TI0> ppContextState) where TI0 : unmanaged, IComVtbl<ID3DDeviceContextState>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDeviceContextState(Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, (ID3DDeviceContextState**) ppContextState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Span<Silk.NET.Core.Native.D3DFeatureLevel> pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDeviceContextState(Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, ref pChosenFeatureLevel.GetPinnableReference(), ppContextState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TI0>(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ComPtr<TI0> ppContextState) where TI0 : unmanaged, IComVtbl<ID3DDeviceContextState>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDeviceContextState(Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, ref pChosenFeatureLevel, (ID3DDeviceContextState**) ppContextState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Span<Silk.NET.Core.Native.D3DFeatureLevel> pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDeviceContextState(Flags, pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, ref pChosenFeatureLevel.GetPinnableReference(), ref ppContextState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Span<Guid> EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDeviceContextState(Flags, pFeatureLevels, FeatureLevels, SDKVersion, ref EmulatedInterface.GetPinnableReference(), pChosenFeatureLevel, ppContextState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TI0>(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ComPtr<TI0> ppContextState) where TI0 : unmanaged, IComVtbl<ID3DDeviceContextState>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDeviceContextState(Flags, pFeatureLevels, FeatureLevels, SDKVersion, ref EmulatedInterface, pChosenFeatureLevel, (ID3DDeviceContextState**) ppContextState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Span<Guid> EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDeviceContextState(Flags, pFeatureLevels, FeatureLevels, SDKVersion, ref EmulatedInterface.GetPinnableReference(), pChosenFeatureLevel, ref ppContextState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Span<Guid> EmulatedInterface, Span<Silk.NET.Core.Native.D3DFeatureLevel> pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDeviceContextState(Flags, pFeatureLevels, FeatureLevels, SDKVersion, ref EmulatedInterface.GetPinnableReference(), ref pChosenFeatureLevel.GetPinnableReference(), ppContextState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TI0>(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ComPtr<TI0> ppContextState) where TI0 : unmanaged, IComVtbl<ID3DDeviceContextState>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDeviceContextState(Flags, pFeatureLevels, FeatureLevels, SDKVersion, ref EmulatedInterface, ref pChosenFeatureLevel, (ID3DDeviceContextState**) ppContextState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] Silk.NET.Core.Native.D3DFeatureLevel* pFeatureLevels, uint FeatureLevels, uint SDKVersion, Span<Guid> EmulatedInterface, Span<Silk.NET.Core.Native.D3DFeatureLevel> pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDeviceContextState(Flags, pFeatureLevels, FeatureLevels, SDKVersion, ref EmulatedInterface.GetPinnableReference(), ref pChosenFeatureLevel.GetPinnableReference(), ref ppContextState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DFeatureLevel> pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDeviceContextState(Flags, in pFeatureLevels.GetPinnableReference(), FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ppContextState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TI0>(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ComPtr<TI0> ppContextState) where TI0 : unmanaged, IComVtbl<ID3DDeviceContextState>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDeviceContextState(Flags, in pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, (ID3DDeviceContextState**) ppContextState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DFeatureLevel> pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDeviceContextState(Flags, in pFeatureLevels.GetPinnableReference(), FeatureLevels, SDKVersion, EmulatedInterface, pChosenFeatureLevel, ref ppContextState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DFeatureLevel> pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Span<Silk.NET.Core.Native.D3DFeatureLevel> pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDeviceContextState(Flags, in pFeatureLevels.GetPinnableReference(), FeatureLevels, SDKVersion, EmulatedInterface, ref pChosenFeatureLevel.GetPinnableReference(), ppContextState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TI0>(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ComPtr<TI0> ppContextState) where TI0 : unmanaged, IComVtbl<ID3DDeviceContextState>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDeviceContextState(Flags, in pFeatureLevels, FeatureLevels, SDKVersion, EmulatedInterface, ref pChosenFeatureLevel, (ID3DDeviceContextState**) ppContextState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DFeatureLevel> pFeatureLevels, uint FeatureLevels, uint SDKVersion, Guid* EmulatedInterface, Span<Silk.NET.Core.Native.D3DFeatureLevel> pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDeviceContextState(Flags, in pFeatureLevels.GetPinnableReference(), FeatureLevels, SDKVersion, EmulatedInterface, ref pChosenFeatureLevel.GetPinnableReference(), ref ppContextState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DFeatureLevel> pFeatureLevels, uint FeatureLevels, uint SDKVersion, Span<Guid> EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDeviceContextState(Flags, in pFeatureLevels.GetPinnableReference(), FeatureLevels, SDKVersion, ref EmulatedInterface.GetPinnableReference(), pChosenFeatureLevel, ppContextState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState<TI0>(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ComPtr<TI0> ppContextState) where TI0 : unmanaged, IComVtbl<ID3DDeviceContextState>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDeviceContextState(Flags, in pFeatureLevels, FeatureLevels, SDKVersion, ref EmulatedInterface, pChosenFeatureLevel, (ID3DDeviceContextState**) ppContextState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DFeatureLevel> pFeatureLevels, uint FeatureLevels, uint SDKVersion, Span<Guid> EmulatedInterface, Silk.NET.Core.Native.D3DFeatureLevel* pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDeviceContextState(Flags, in pFeatureLevels.GetPinnableReference(), FeatureLevels, SDKVersion, ref EmulatedInterface.GetPinnableReference(), pChosenFeatureLevel, ref ppContextState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DFeatureLevel> pFeatureLevels, uint FeatureLevels, uint SDKVersion, Span<Guid> EmulatedInterface, Span<Silk.NET.Core.Native.D3DFeatureLevel> pChosenFeatureLevel, ID3DDeviceContextState** ppContextState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDeviceContextState(Flags, in pFeatureLevels.GetPinnableReference(), FeatureLevels, SDKVersion, ref EmulatedInterface.GetPinnableReference(), ref pChosenFeatureLevel.GetPinnableReference(), ppContextState);
    }

    /// <summary>To be documented.</summary>
    public static int CreateDeviceContextState<TI0>(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly Silk.NET.Core.Native.D3DFeatureLevel pFeatureLevels, uint FeatureLevels, uint SDKVersion, ref Guid EmulatedInterface, ref Silk.NET.Core.Native.D3DFeatureLevel pChosenFeatureLevel, ref ComPtr<TI0> ppContextState) where TI0 : unmanaged, IComVtbl<ID3DDeviceContextState>, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        return @this->CreateDeviceContextState(Flags, in pFeatureLevels, FeatureLevels, SDKVersion, ref EmulatedInterface, ref pChosenFeatureLevel, (ID3DDeviceContextState**) ppContextState.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int CreateDeviceContextState(this ComPtr<ID3D11Device1> thisVtbl, uint Flags, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<Silk.NET.Core.Native.D3DFeatureLevel> pFeatureLevels, uint FeatureLevels, uint SDKVersion, Span<Guid> EmulatedInterface, Span<Silk.NET.Core.Native.D3DFeatureLevel> pChosenFeatureLevel, ref ID3DDeviceContextState* ppContextState)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->CreateDeviceContextState(Flags, in pFeatureLevels.GetPinnableReference(), FeatureLevels, SDKVersion, ref EmulatedInterface.GetPinnableReference(), ref pChosenFeatureLevel.GetPinnableReference(), ref ppContextState);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1<TI0>(this ComPtr<ID3D11Device1> thisVtbl, void* hResource, out ComPtr<TI0> ppResource) where TI0 : unmanaged, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        ppResource = default;
        return @this->OpenSharedResource1(hResource, SilkMarshal.GuidPtrOf<TI0>(), (void**) ppResource.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1(this ComPtr<ID3D11Device1> thisVtbl, void* hResource, Span<Guid> returnedInterface, void** ppResource)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResource1(hResource, ref returnedInterface.GetPinnableReference(), ppResource);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1(this ComPtr<ID3D11Device1> thisVtbl, void* hResource, Span<Guid> returnedInterface, ref void* ppResource)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResource1(hResource, ref returnedInterface.GetPinnableReference(), ref ppResource);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1<T0>(this ComPtr<ID3D11Device1> thisVtbl, Span<T0> hResource, Guid* returnedInterface, void** ppResource) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResource1(ref hResource.GetPinnableReference(), returnedInterface, ppResource);
    }

    /// <summary>To be documented.</summary>
    public static int OpenSharedResource1<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, ref T0 hResource, out ComPtr<TI0> ppResource) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        ppResource = default;
        return @this->OpenSharedResource1(ref hResource, SilkMarshal.GuidPtrOf<TI0>(), (void**) ppResource.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1<T0>(this ComPtr<ID3D11Device1> thisVtbl, Span<T0> hResource, Guid* returnedInterface, ref void* ppResource) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResource1(ref hResource.GetPinnableReference(), returnedInterface, ref ppResource);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1<T0>(this ComPtr<ID3D11Device1> thisVtbl, Span<T0> hResource, Span<Guid> returnedInterface, void** ppResource) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResource1(ref hResource.GetPinnableReference(), ref returnedInterface.GetPinnableReference(), ppResource);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResource1<T0>(this ComPtr<ID3D11Device1> thisVtbl, Span<T0> hResource, Span<Guid> returnedInterface, ref void* ppResource) where T0 : unmanaged
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResource1(ref hResource.GetPinnableReference(), ref returnedInterface.GetPinnableReference(), ref ppResource);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] char* lpName, uint dwDesiredAccess, out ComPtr<TI0> ppResource) where TI0 : unmanaged, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        ppResource = default;
        return @this->OpenSharedResourceByName(lpName, dwDesiredAccess, SilkMarshal.GuidPtrOf<TI0>(), (void**) ppResource.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] char* lpName, uint dwDesiredAccess, Span<Guid> returnedInterface, void** ppResource)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResourceByName(lpName, dwDesiredAccess, ref returnedInterface.GetPinnableReference(), ppResource);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] char* lpName, uint dwDesiredAccess, Span<Guid> returnedInterface, ref void* ppResource)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResourceByName(lpName, dwDesiredAccess, ref returnedInterface.GetPinnableReference(), ref ppResource);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<char> lpName, uint dwDesiredAccess, Guid* returnedInterface, void** ppResource)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResourceByName(in lpName.GetPinnableReference(), dwDesiredAccess, returnedInterface, ppResource);
    }

    /// <summary>To be documented.</summary>
    public static int OpenSharedResourceByName<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly char lpName, uint dwDesiredAccess, out ComPtr<TI0> ppResource) where TI0 : unmanaged, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        ppResource = default;
        return @this->OpenSharedResourceByName(in lpName, dwDesiredAccess, SilkMarshal.GuidPtrOf<TI0>(), (void**) ppResource.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<char> lpName, uint dwDesiredAccess, Guid* returnedInterface, ref void* ppResource)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResourceByName(in lpName.GetPinnableReference(), dwDesiredAccess, returnedInterface, ref ppResource);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<char> lpName, uint dwDesiredAccess, Span<Guid> returnedInterface, void** ppResource)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResourceByName(in lpName.GetPinnableReference(), dwDesiredAccess, ref returnedInterface.GetPinnableReference(), ppResource);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ReadOnlySpan<char> lpName, uint dwDesiredAccess, Span<Guid> returnedInterface, ref void* ppResource)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResourceByName(in lpName.GetPinnableReference(), dwDesiredAccess, ref returnedInterface.GetPinnableReference(), ref ppResource);
    }

    /// <summary>To be documented.</summary>
    public static int OpenSharedResourceByName<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess, out ComPtr<TI0> ppResource) where TI0 : unmanaged, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // ComPtrOverloader
        ppResource = default;
        return @this->OpenSharedResourceByName(lpName, dwDesiredAccess, SilkMarshal.GuidPtrOf<TI0>(), (void**) ppResource.GetAddressOf());
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess, Span<Guid> returnedInterface, void** ppResource)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResourceByName(lpName, dwDesiredAccess, ref returnedInterface.GetPinnableReference(), ppResource);
    }

    /// <summary>To be documented.</summary>
    public static unsafe int OpenSharedResourceByName(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess, Span<Guid> returnedInterface, ref void* ppResource)
    {
        var @this = thisVtbl.Handle;
        // SpanOverloader
        return @this->OpenSharedResourceByName(lpName, dwDesiredAccess, ref returnedInterface.GetPinnableReference(), ref ppResource);
    }

    /// <summary>To be documented.</summary>
    public static ComPtr<TI0> QueryInterface<TI0>(this ComPtr<ID3D11Device1> thisVtbl) where TI0 : unmanaged, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // NonKhrReturnTypeOverloader
        SilkMarshal.ThrowHResult(@this->QueryInterface(out ComPtr<TI0> silkRet));
        return silkRet;
    }

    /// <summary>To be documented.</summary>
    public static unsafe ComPtr<TI0> OpenSharedResource<TI0>(this ComPtr<ID3D11Device1> thisVtbl, void* hResource) where TI0 : unmanaged, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // NonKhrReturnTypeOverloader
        SilkMarshal.ThrowHResult(@this->OpenSharedResource(hResource, out ComPtr<TI0> silkRet));
        return silkRet;
    }

    /// <summary>To be documented.</summary>
    public static ComPtr<TI0> OpenSharedResource<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, ref T0 hResource) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // NonKhrReturnTypeOverloader
        SilkMarshal.ThrowHResult(@this->OpenSharedResource(ref hResource, out ComPtr<TI0> silkRet));
        return silkRet;
    }

    /// <summary>To be documented.</summary>
    public static unsafe ComPtr<TI0> OpenSharedResource1<TI0>(this ComPtr<ID3D11Device1> thisVtbl, void* hResource) where TI0 : unmanaged, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // NonKhrReturnTypeOverloader
        SilkMarshal.ThrowHResult(@this->OpenSharedResource1(hResource, out ComPtr<TI0> silkRet));
        return silkRet;
    }

    /// <summary>To be documented.</summary>
    public static ComPtr<TI0> OpenSharedResource1<T0, TI0>(this ComPtr<ID3D11Device1> thisVtbl, ref T0 hResource) where T0 : unmanaged where TI0 : unmanaged, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // NonKhrReturnTypeOverloader
        SilkMarshal.ThrowHResult(@this->OpenSharedResource1(ref hResource, out ComPtr<TI0> silkRet));
        return silkRet;
    }

    /// <summary>To be documented.</summary>
    public static unsafe ComPtr<TI0> OpenSharedResourceByName<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] char* lpName, uint dwDesiredAccess) where TI0 : unmanaged, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // NonKhrReturnTypeOverloader
        SilkMarshal.ThrowHResult(@this->OpenSharedResourceByName(lpName, dwDesiredAccess, out ComPtr<TI0> silkRet));
        return silkRet;
    }

    /// <summary>To be documented.</summary>
    public static ComPtr<TI0> OpenSharedResourceByName<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ref readonly char lpName, uint dwDesiredAccess) where TI0 : unmanaged, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // NonKhrReturnTypeOverloader
        SilkMarshal.ThrowHResult(@this->OpenSharedResourceByName(in lpName, dwDesiredAccess, out ComPtr<TI0> silkRet));
        return silkRet;
    }

    /// <summary>To be documented.</summary>
    public static ComPtr<TI0> OpenSharedResourceByName<TI0>(this ComPtr<ID3D11Device1> thisVtbl, [Flow(Silk.NET.Core.Native.FlowDirection.In), UnmanagedType(Silk.NET.Core.Native.UnmanagedType.LPWStr)] string lpName, uint dwDesiredAccess) where TI0 : unmanaged, IComVtbl<TI0>
    {
        var @this = thisVtbl.Handle;
        // NonKhrReturnTypeOverloader
        SilkMarshal.ThrowHResult(@this->OpenSharedResourceByName(lpName, dwDesiredAccess, out ComPtr<TI0> silkRet));
        return silkRet;
    }

}
