// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Text;
using Silk.NET.Core;
using Silk.NET.Core.Native;
using Silk.NET.Core.Attributes;
using Silk.NET.Core.Contexts;
using Silk.NET.Core.Loader;
using Silk.NET.OpenCL;
using Extension = Silk.NET.Core.Attributes.ExtensionAttribute;

#pragma warning disable 1591

namespace Silk.NET.OpenCL.Extensions.KHR
{
    [Extension("KHR_command_buffer")]
    public unsafe partial class KhrCommandBuffer : NativeExtension<CL>
    {
        public const string ExtensionName = "KHR_command_buffer";
        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandBarrierWithWaitListKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandBarrierWithWaitList([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandCopyBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferRectKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandCopyBufferRect([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_row_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_slice_pitch, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyBufferToImageKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandCopyBufferToImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint src_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandCopyImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint dst_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandCopyImageToBufferKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandCopyImageToBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint src_image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint dst_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint src_origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint dst_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillBufferKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandFillBuffer<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandFillImageKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandFillImage<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint image, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 fill_color, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint origin, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint region, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint* local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandNDRangeKernelKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandNdrangeKernel([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint kernel, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint work_dim, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_offset, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint global_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nuint local_work_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemcpyKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandSvmmemcpy<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 dst_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 src_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint* sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCommandSVMMemFillKHR", Convention = CallingConvention.Winapi)]
        public partial int CommandSvmmemFill<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_queue, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 svm_ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T1 pattern, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint pattern_size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_sync_points_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in uint sync_point_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint sync_point, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint mutable_handle) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clCreateCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial nint CreateCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint* queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandBufferProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] int* errcode_ret);

        [NativeApi(EntryPoint = "clCreateCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial nint CreateCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint* queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandBufferProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out int errcode_ret);

        [NativeApi(EntryPoint = "clCreateCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial nint CreateCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint* queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandBufferProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] int* errcode_ret);

        [NativeApi(EntryPoint = "clCreateCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial nint CreateCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint* queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandBufferProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out int errcode_ret);

        [NativeApi(EntryPoint = "clCreateCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial nint CreateCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nint queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandBufferProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] int* errcode_ret);

        [NativeApi(EntryPoint = "clCreateCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial nint CreateCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nint queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandBufferProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out int errcode_ret);

        [NativeApi(EntryPoint = "clCreateCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial nint CreateCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nint queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandBufferProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] int* errcode_ret);

        [NativeApi(EntryPoint = "clCreateCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public partial nint CreateCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nint queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in CommandBufferProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out int errcode_ret);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandBufferProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCreateCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial nint CreateCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint* queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ulong* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] int* errcode_ret);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandBufferProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCreateCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial nint CreateCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint* queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ulong* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out int errcode_ret);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandBufferProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCreateCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial nint CreateCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint* queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in ulong properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] int* errcode_ret);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandBufferProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCreateCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial nint CreateCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint* queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in ulong properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out int errcode_ret);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandBufferProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCreateCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial nint CreateCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nint queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ulong* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] int* errcode_ret);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandBufferProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCreateCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial nint CreateCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nint queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] ulong* properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out int errcode_ret);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandBufferProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCreateCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial nint CreateCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nint queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in ulong properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] int* errcode_ret);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandBufferProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clCreateCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public partial nint CreateCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nint queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in ulong properties, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out int errcode_ret);

        [NativeApi(EntryPoint = "clEnqueueCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int EnqueueCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_events_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint* event_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* @event);

        [NativeApi(EntryPoint = "clEnqueueCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int EnqueueCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_events_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint* event_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint @event);

        [NativeApi(EntryPoint = "clEnqueueCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int EnqueueCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_events_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nint event_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* @event);

        [NativeApi(EntryPoint = "clEnqueueCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int EnqueueCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_events_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nint event_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint @event);

        [NativeApi(EntryPoint = "clEnqueueCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int EnqueueCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_events_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint* event_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* @event);

        [NativeApi(EntryPoint = "clEnqueueCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int EnqueueCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_events_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint* event_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint @event);

        [NativeApi(EntryPoint = "clEnqueueCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int EnqueueCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_events_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nint event_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nint* @event);

        [NativeApi(EntryPoint = "clEnqueueCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public partial int EnqueueCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_queues, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint queues, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint num_events_in_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in nint event_wait_list, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nint @event);

        [NativeApi(EntryPoint = "clFinalizeCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public partial int FinalizeCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer);

        [NativeApi(EntryPoint = "clGetCommandBufferInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetCommandBufferInfo([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandBufferInfo param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nuint* param_value_size_ret);

        [NativeApi(EntryPoint = "clGetCommandBufferInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetCommandBufferInfo([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandBufferInfo param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nuint param_value_size_ret);

        [NativeApi(EntryPoint = "clGetCommandBufferInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetCommandBufferInfo<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandBufferInfo param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nuint* param_value_size_ret) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clGetCommandBufferInfoKHR", Convention = CallingConvention.Winapi)]
        public partial int GetCommandBufferInfo<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] CommandBufferInfo param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nuint param_value_size_ret) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandBufferInfo). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", false)]
        [NativeApi(EntryPoint = "clGetCommandBufferInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetCommandBufferInfo([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nuint* param_value_size_ret);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandBufferInfo). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", false)]
        [NativeApi(EntryPoint = "clGetCommandBufferInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetCommandBufferInfo([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nuint param_value_size_ret);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandBufferInfo). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", false)]
        [NativeApi(EntryPoint = "clGetCommandBufferInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetCommandBufferInfo<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nuint* param_value_size_ret) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (CommandBufferInfo). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", false)]
        [NativeApi(EntryPoint = "clGetCommandBufferInfoKHR", Convention = CallingConvention.Winapi)]
        public partial int GetCommandBufferInfo<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nuint param_value_size_ret) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clReleaseCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public partial int ReleaseCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer);

        [NativeApi(EntryPoint = "clRetainCommandBufferKHR", Convention = CallingConvention.Winapi)]
        public partial int RetainCommandBuffer([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint command_buffer);

        public KhrCommandBuffer(INativeContext ctx)
            : base(ctx)
        {
        }
    }
}

