// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Text;
using Silk.NET.Core;
using Silk.NET.Core.Native;
using Silk.NET.Core.Attributes;
using Silk.NET.Core.Contexts;
using Silk.NET.Core.Loader;
using Silk.NET.OpenCL;
using Extension = Silk.NET.Core.Attributes.ExtensionAttribute;

#pragma warning disable 1591

namespace Silk.NET.OpenCL.Extensions.KHR
{
    [Extension("KHR_unified_svm")]
    public unsafe partial class KhrUnifiedSvm : NativeExtension<CL>
    {
        public const string ExtensionName = "KHR_unified_svm";
        [NativeApi(EntryPoint = "clGetSVMPointerInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmpointerInfo([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint device, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmPointerInfo param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nuint* param_value_size_ret);

        [NativeApi(EntryPoint = "clGetSVMPointerInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmpointerInfo([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint device, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmPointerInfo param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nuint param_value_size_ret);

        [NativeApi(EntryPoint = "clGetSVMPointerInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmpointerInfo<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint device, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmPointerInfo param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nuint* param_value_size_ret) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clGetSVMPointerInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmpointerInfo<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint device, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmPointerInfo param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nuint param_value_size_ret) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clGetSVMPointerInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmpointerInfo<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint device, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmPointerInfo param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nuint* param_value_size_ret) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clGetSVMPointerInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmpointerInfo<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint device, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmPointerInfo param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nuint param_value_size_ret) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clGetSVMPointerInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmpointerInfo<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint device, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmPointerInfo param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T1 param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nuint* param_value_size_ret) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clGetSVMPointerInfoKHR", Convention = CallingConvention.Winapi)]
        public partial int GetSvmpointerInfo<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint device, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmPointerInfo param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T1 param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nuint param_value_size_ret) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmPointerInfo). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", false)]
        [NativeApi(EntryPoint = "clGetSVMPointerInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmpointerInfo([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint device, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nuint* param_value_size_ret);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmPointerInfo). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", false)]
        [NativeApi(EntryPoint = "clGetSVMPointerInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmpointerInfo([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint device, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nuint param_value_size_ret);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmPointerInfo). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", false)]
        [NativeApi(EntryPoint = "clGetSVMPointerInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmpointerInfo<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint device, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nuint* param_value_size_ret) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmPointerInfo). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", false)]
        [NativeApi(EntryPoint = "clGetSVMPointerInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmpointerInfo<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint device, [Flow(Silk.NET.Core.Native.FlowDirection.In)] void* ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nuint param_value_size_ret) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmPointerInfo). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", false)]
        [NativeApi(EntryPoint = "clGetSVMPointerInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmpointerInfo<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint device, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nuint* param_value_size_ret) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmPointerInfo). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", false)]
        [NativeApi(EntryPoint = "clGetSVMPointerInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmpointerInfo<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint device, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nuint param_value_size_ret) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmPointerInfo). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", false)]
        [NativeApi(EntryPoint = "clGetSVMPointerInfoKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmpointerInfo<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint device, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T1 param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] nuint* param_value_size_ret) where T0 : unmanaged where T1 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmPointerInfo). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", false)]
        [NativeApi(EntryPoint = "clGetSVMPointerInfoKHR", Convention = CallingConvention.Winapi)]
        public partial int GetSvmpointerInfo<T0, T1>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nint device, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in T0 ptr, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR param_name, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint param_value_size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T1 param_value, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out nuint param_value_size_ret) where T0 : unmanaged where T1 : unmanaged;

        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmAllocProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* suggested_svm_type_index);

        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmAllocProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint suggested_svm_type_index);

        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in SvmAllocProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* suggested_svm_type_index);

        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in SvmAllocProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmAllocProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmAllocProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in SvmAllocProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in SvmAllocProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmAllocProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmAllocProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in SvmAllocProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in SvmAllocProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmCapabilities desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmAllocProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmAllocProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in SvmAllocProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in SvmAllocProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] uint* suggested_svm_type_index);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmCapabilities, SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clGetSVMSuggestedTypeIndexKHR", Convention = CallingConvention.Winapi)]
        public partial int GetSvmsuggestedTypeIndex([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR required_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR desired_capabilities, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out uint suggested_svm_type_index);

        [NativeApi(EntryPoint = "clSVMAllocWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial void* SvmallocWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmAllocProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint svm_type_index, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] int* errcode_ret);

        [NativeApi(EntryPoint = "clSVMAllocWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial void* SvmallocWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmAllocProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint svm_type_index, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out int errcode_ret);

        [NativeApi(EntryPoint = "clSVMAllocWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial void* SvmallocWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in SvmAllocProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint svm_type_index, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] int* errcode_ret);

        [NativeApi(EntryPoint = "clSVMAllocWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial void* SvmallocWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in SvmAllocProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint svm_type_index, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out int errcode_ret);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clSVMAllocWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial void* SvmallocWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint svm_type_index, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] int* errcode_ret);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clSVMAllocWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial void* SvmallocWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint svm_type_index, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out int errcode_ret);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clSVMAllocWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial void* SvmallocWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint svm_type_index, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] int* errcode_ret);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clSVMAllocWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial void* SvmallocWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint svm_type_index, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out int errcode_ret);

        [NativeApi(EntryPoint = "clSVMFreeWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int SvmfreeWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmFreeProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmFreeFlags flags, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* ptr);

        [NativeApi(EntryPoint = "clSVMFreeWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int SvmfreeWithProperties<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmFreeProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmFreeFlags flags, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 ptr) where T0 : unmanaged;

        [NativeApi(EntryPoint = "clSVMFreeWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int SvmfreeWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in SvmFreeProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmFreeFlags flags, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* ptr);

        [NativeApi(EntryPoint = "clSVMFreeWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public partial int SvmfreeWithProperties<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in SvmFreeProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmFreeFlags flags, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 ptr) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmFreeProperties, SvmFreeFlags). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clSVMFreeWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int SvmfreeWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmFreeProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR flags, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* ptr);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmFreeProperties, SvmFreeFlags). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clSVMFreeWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int SvmfreeWithProperties<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmFreeProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR flags, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 ptr) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmFreeProperties, SvmFreeFlags). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clSVMFreeWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int SvmfreeWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in SvmFreeProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR flags, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* ptr);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmFreeProperties, SvmFreeFlags). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clSVMFreeWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public partial int SvmfreeWithProperties<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in SvmFreeProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR flags, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 ptr) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmFreeProperties, SvmFreeFlags). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clSVMFreeWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int SvmfreeWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmFreeFlags flags, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* ptr);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmFreeProperties, SvmFreeFlags). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clSVMFreeWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int SvmfreeWithProperties<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmFreeFlags flags, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 ptr) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmFreeProperties, SvmFreeFlags). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clSVMFreeWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int SvmfreeWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmFreeFlags flags, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* ptr);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmFreeProperties, SvmFreeFlags). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clSVMFreeWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public partial int SvmfreeWithProperties<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmFreeFlags flags, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 ptr) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmFreeProperties, SvmFreeFlags). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clSVMFreeWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int SvmfreeWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR flags, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* ptr);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmFreeProperties, SvmFreeFlags). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clSVMFreeWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int SvmfreeWithProperties<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR flags, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 ptr) where T0 : unmanaged;

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmFreeProperties, SvmFreeFlags). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clSVMFreeWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public unsafe partial int SvmfreeWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR flags, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] void* ptr);

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmFreeProperties, SvmFreeFlags). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        [NativeApi(EntryPoint = "clSVMFreeWithPropertiesKHR", Convention = CallingConvention.Winapi)]
        public partial int SvmfreeWithProperties<T0>([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR flags, [Flow(Silk.NET.Core.Native.FlowDirection.Out)] out T0 ptr) where T0 : unmanaged;

        public unsafe int SvmallocWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] SvmAllocProperties* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint svm_type_index, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size)
        {
            // NonKhrReturnTypeOverloader
            SvmallocWithProperties(context, properties, svm_type_index, size, out int silkRet);
            return silkRet;
        }

        public unsafe int SvmallocWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in SvmAllocProperties properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint svm_type_index, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size)
        {
            // NonKhrReturnTypeOverloader
            SvmallocWithProperties(context, in properties, svm_type_index, size, out int silkRet);
            return silkRet;
        }

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        public unsafe int SvmallocWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] KHR* properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint svm_type_index, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size)
        {
            // NonKhrReturnTypeOverloader
            SvmallocWithProperties(context, properties, svm_type_index, size, out int silkRet);
            return silkRet;
        }

        [Obsolete("The \"ungrouped\" enums (KHR) are deprecated in favour of the \"grouped\" enums (SvmAllocProperties). Not only is this akin to how the original specification represents enums, it also ensures that the size of the enum is correct which is a guarantee the \"ungrouped\" enums do not provide. As such, we have made every attempt to prevent functions known to use these ungrouped enums problematically from compiling; but regardless of whether usage of these deprecated enums compiles please use the other enums to ensure that all functions will work as intended. ", true)]
        public unsafe int SvmallocWithProperties([Flow(Silk.NET.Core.Native.FlowDirection.In)] nint context, [Flow(Silk.NET.Core.Native.FlowDirection.In)] [RequiresLocation] in KHR properties, [Flow(Silk.NET.Core.Native.FlowDirection.In)] uint svm_type_index, [Flow(Silk.NET.Core.Native.FlowDirection.In)] nuint size)
        {
            // NonKhrReturnTypeOverloader
            SvmallocWithProperties(context, in properties, svm_type_index, size, out int silkRet);
            return silkRet;
        }

        public KhrUnifiedSvm(INativeContext ctx)
            : base(ctx)
        {
        }
    }
}

